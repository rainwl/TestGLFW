// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fusion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fusion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "coord.pb.h"
#include "tissue.pb.h"
#include "haptic.pb.h"
#include "offset.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fusion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fusion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fusion_2eproto;
namespace pb {
namespace FusionData {
class FusionData;
class FusionDataDefaultTypeInternal;
extern FusionDataDefaultTypeInternal _FusionData_default_instance_;
}  // namespace FusionData
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::FusionData::FusionData* Arena::CreateMaybeMessage<::pb::FusionData::FusionData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace FusionData {

// ===================================================================

class FusionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.FusionData.FusionData) */ {
 public:
  FusionData();
  virtual ~FusionData();

  FusionData(const FusionData& from);
  FusionData(FusionData&& from) noexcept
    : FusionData() {
    *this = ::std::move(from);
  }

  inline FusionData& operator=(const FusionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionData& operator=(FusionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FusionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionData* internal_default_instance() {
    return reinterpret_cast<const FusionData*>(
               &_FusionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FusionData& a, FusionData& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FusionData* New() const final {
    return CreateMaybeMessage<FusionData>(nullptr);
  }

  FusionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FusionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FusionData& from);
  void MergeFrom(const FusionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.FusionData.FusionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fusion_2eproto);
    return ::descriptor_table_fusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndoscopePosFieldNumber = 1,
    kEndoscopeEulerFieldNumber = 2,
    kTubePosFieldNumber = 3,
    kTubeEulerFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kRotCoordFieldNumber = 6,
    kPivotPosFieldNumber = 7,
    kHapticFieldNumber = 9,
    kSoftTissueFieldNumber = 12,
    kRongeurPosFieldNumber = 14,
    kRongeurRotFieldNumber = 15,
    kAblationCountFieldNumber = 8,
    kHemostasisCountFieldNumber = 10,
    kHemostasisIndexFieldNumber = 11,
    kNerveRootDanceFieldNumber = 13,
  };
  // .pb.Coord.Vector3 endoscope_pos = 1;
  bool has_endoscope_pos() const;
  private:
  bool _internal_has_endoscope_pos() const;
  public:
  void clear_endoscope_pos();
  const ::pb::Coord::Vector3& endoscope_pos() const;
  ::pb::Coord::Vector3* release_endoscope_pos();
  ::pb::Coord::Vector3* mutable_endoscope_pos();
  void set_allocated_endoscope_pos(::pb::Coord::Vector3* endoscope_pos);
  private:
  const ::pb::Coord::Vector3& _internal_endoscope_pos() const;
  ::pb::Coord::Vector3* _internal_mutable_endoscope_pos();
  public:

  // .pb.Coord.Euler endoscope_euler = 2;
  bool has_endoscope_euler() const;
  private:
  bool _internal_has_endoscope_euler() const;
  public:
  void clear_endoscope_euler();
  const ::pb::Coord::Euler& endoscope_euler() const;
  ::pb::Coord::Euler* release_endoscope_euler();
  ::pb::Coord::Euler* mutable_endoscope_euler();
  void set_allocated_endoscope_euler(::pb::Coord::Euler* endoscope_euler);
  private:
  const ::pb::Coord::Euler& _internal_endoscope_euler() const;
  ::pb::Coord::Euler* _internal_mutable_endoscope_euler();
  public:

  // .pb.Coord.Vector3 tube_pos = 3;
  bool has_tube_pos() const;
  private:
  bool _internal_has_tube_pos() const;
  public:
  void clear_tube_pos();
  const ::pb::Coord::Vector3& tube_pos() const;
  ::pb::Coord::Vector3* release_tube_pos();
  ::pb::Coord::Vector3* mutable_tube_pos();
  void set_allocated_tube_pos(::pb::Coord::Vector3* tube_pos);
  private:
  const ::pb::Coord::Vector3& _internal_tube_pos() const;
  ::pb::Coord::Vector3* _internal_mutable_tube_pos();
  public:

  // .pb.Coord.Euler tube_euler = 4;
  bool has_tube_euler() const;
  private:
  bool _internal_has_tube_euler() const;
  public:
  void clear_tube_euler();
  const ::pb::Coord::Euler& tube_euler() const;
  ::pb::Coord::Euler* release_tube_euler();
  ::pb::Coord::Euler* mutable_tube_euler();
  void set_allocated_tube_euler(::pb::Coord::Euler* tube_euler);
  private:
  const ::pb::Coord::Euler& _internal_tube_euler() const;
  ::pb::Coord::Euler* _internal_mutable_tube_euler();
  public:

  // .pb.Offset.Offset offset = 5;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::pb::Offset::Offset& offset() const;
  ::pb::Offset::Offset* release_offset();
  ::pb::Offset::Offset* mutable_offset();
  void set_allocated_offset(::pb::Offset::Offset* offset);
  private:
  const ::pb::Offset::Offset& _internal_offset() const;
  ::pb::Offset::Offset* _internal_mutable_offset();
  public:

  // .pb.Coord.Quaternion rot_coord = 6;
  bool has_rot_coord() const;
  private:
  bool _internal_has_rot_coord() const;
  public:
  void clear_rot_coord();
  const ::pb::Coord::Quaternion& rot_coord() const;
  ::pb::Coord::Quaternion* release_rot_coord();
  ::pb::Coord::Quaternion* mutable_rot_coord();
  void set_allocated_rot_coord(::pb::Coord::Quaternion* rot_coord);
  private:
  const ::pb::Coord::Quaternion& _internal_rot_coord() const;
  ::pb::Coord::Quaternion* _internal_mutable_rot_coord();
  public:

  // .pb.Coord.Vector3 pivot_pos = 7;
  bool has_pivot_pos() const;
  private:
  bool _internal_has_pivot_pos() const;
  public:
  void clear_pivot_pos();
  const ::pb::Coord::Vector3& pivot_pos() const;
  ::pb::Coord::Vector3* release_pivot_pos();
  ::pb::Coord::Vector3* mutable_pivot_pos();
  void set_allocated_pivot_pos(::pb::Coord::Vector3* pivot_pos);
  private:
  const ::pb::Coord::Vector3& _internal_pivot_pos() const;
  ::pb::Coord::Vector3* _internal_mutable_pivot_pos();
  public:

  // .pb.Haptic.Haptic haptic = 9;
  bool has_haptic() const;
  private:
  bool _internal_has_haptic() const;
  public:
  void clear_haptic();
  const ::pb::Haptic::Haptic& haptic() const;
  ::pb::Haptic::Haptic* release_haptic();
  ::pb::Haptic::Haptic* mutable_haptic();
  void set_allocated_haptic(::pb::Haptic::Haptic* haptic);
  private:
  const ::pb::Haptic::Haptic& _internal_haptic() const;
  ::pb::Haptic::Haptic* _internal_mutable_haptic();
  public:

  // .pb.Tissue.Tissue soft_tissue = 12;
  bool has_soft_tissue() const;
  private:
  bool _internal_has_soft_tissue() const;
  public:
  void clear_soft_tissue();
  const ::pb::Tissue::Tissue& soft_tissue() const;
  ::pb::Tissue::Tissue* release_soft_tissue();
  ::pb::Tissue::Tissue* mutable_soft_tissue();
  void set_allocated_soft_tissue(::pb::Tissue::Tissue* soft_tissue);
  private:
  const ::pb::Tissue::Tissue& _internal_soft_tissue() const;
  ::pb::Tissue::Tissue* _internal_mutable_soft_tissue();
  public:

  // .pb.Coord.Vector3 rongeur_pos = 14;
  bool has_rongeur_pos() const;
  private:
  bool _internal_has_rongeur_pos() const;
  public:
  void clear_rongeur_pos();
  const ::pb::Coord::Vector3& rongeur_pos() const;
  ::pb::Coord::Vector3* release_rongeur_pos();
  ::pb::Coord::Vector3* mutable_rongeur_pos();
  void set_allocated_rongeur_pos(::pb::Coord::Vector3* rongeur_pos);
  private:
  const ::pb::Coord::Vector3& _internal_rongeur_pos() const;
  ::pb::Coord::Vector3* _internal_mutable_rongeur_pos();
  public:

  // .pb.Coord.Vector3 rongeur_rot = 15;
  bool has_rongeur_rot() const;
  private:
  bool _internal_has_rongeur_rot() const;
  public:
  void clear_rongeur_rot();
  const ::pb::Coord::Vector3& rongeur_rot() const;
  ::pb::Coord::Vector3* release_rongeur_rot();
  ::pb::Coord::Vector3* mutable_rongeur_rot();
  void set_allocated_rongeur_rot(::pb::Coord::Vector3* rongeur_rot);
  private:
  const ::pb::Coord::Vector3& _internal_rongeur_rot() const;
  ::pb::Coord::Vector3* _internal_mutable_rongeur_rot();
  public:

  // float ablation_count = 8;
  void clear_ablation_count();
  float ablation_count() const;
  void set_ablation_count(float value);
  private:
  float _internal_ablation_count() const;
  void _internal_set_ablation_count(float value);
  public:

  // float hemostasis_count = 10;
  void clear_hemostasis_count();
  float hemostasis_count() const;
  void set_hemostasis_count(float value);
  private:
  float _internal_hemostasis_count() const;
  void _internal_set_hemostasis_count(float value);
  public:

  // float hemostasis_index = 11;
  void clear_hemostasis_index();
  float hemostasis_index() const;
  void set_hemostasis_index(float value);
  private:
  float _internal_hemostasis_index() const;
  void _internal_set_hemostasis_index(float value);
  public:

  // float nerve_root_dance = 13;
  void clear_nerve_root_dance();
  float nerve_root_dance() const;
  void set_nerve_root_dance(float value);
  private:
  float _internal_nerve_root_dance() const;
  void _internal_set_nerve_root_dance(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.FusionData.FusionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Coord::Vector3* endoscope_pos_;
  ::pb::Coord::Euler* endoscope_euler_;
  ::pb::Coord::Vector3* tube_pos_;
  ::pb::Coord::Euler* tube_euler_;
  ::pb::Offset::Offset* offset_;
  ::pb::Coord::Quaternion* rot_coord_;
  ::pb::Coord::Vector3* pivot_pos_;
  ::pb::Haptic::Haptic* haptic_;
  ::pb::Tissue::Tissue* soft_tissue_;
  ::pb::Coord::Vector3* rongeur_pos_;
  ::pb::Coord::Vector3* rongeur_rot_;
  float ablation_count_;
  float hemostasis_count_;
  float hemostasis_index_;
  float nerve_root_dance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fusion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionData

// .pb.Coord.Vector3 endoscope_pos = 1;
inline bool FusionData::_internal_has_endoscope_pos() const {
  return this != internal_default_instance() && endoscope_pos_ != nullptr;
}
inline bool FusionData::has_endoscope_pos() const {
  return _internal_has_endoscope_pos();
}
inline const ::pb::Coord::Vector3& FusionData::_internal_endoscope_pos() const {
  const ::pb::Coord::Vector3* p = endoscope_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Vector3*>(
      &::pb::Coord::_Vector3_default_instance_);
}
inline const ::pb::Coord::Vector3& FusionData::endoscope_pos() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.endoscope_pos)
  return _internal_endoscope_pos();
}
inline ::pb::Coord::Vector3* FusionData::release_endoscope_pos() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.endoscope_pos)
  
  ::pb::Coord::Vector3* temp = endoscope_pos_;
  endoscope_pos_ = nullptr;
  return temp;
}
inline ::pb::Coord::Vector3* FusionData::_internal_mutable_endoscope_pos() {
  
  if (endoscope_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Vector3>(GetArenaNoVirtual());
    endoscope_pos_ = p;
  }
  return endoscope_pos_;
}
inline ::pb::Coord::Vector3* FusionData::mutable_endoscope_pos() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.endoscope_pos)
  return _internal_mutable_endoscope_pos();
}
inline void FusionData::set_allocated_endoscope_pos(::pb::Coord::Vector3* endoscope_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endoscope_pos_);
  }
  if (endoscope_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endoscope_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endoscope_pos, submessage_arena);
    }
    
  } else {
    
  }
  endoscope_pos_ = endoscope_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.endoscope_pos)
}

// .pb.Coord.Euler endoscope_euler = 2;
inline bool FusionData::_internal_has_endoscope_euler() const {
  return this != internal_default_instance() && endoscope_euler_ != nullptr;
}
inline bool FusionData::has_endoscope_euler() const {
  return _internal_has_endoscope_euler();
}
inline const ::pb::Coord::Euler& FusionData::_internal_endoscope_euler() const {
  const ::pb::Coord::Euler* p = endoscope_euler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Euler*>(
      &::pb::Coord::_Euler_default_instance_);
}
inline const ::pb::Coord::Euler& FusionData::endoscope_euler() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.endoscope_euler)
  return _internal_endoscope_euler();
}
inline ::pb::Coord::Euler* FusionData::release_endoscope_euler() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.endoscope_euler)
  
  ::pb::Coord::Euler* temp = endoscope_euler_;
  endoscope_euler_ = nullptr;
  return temp;
}
inline ::pb::Coord::Euler* FusionData::_internal_mutable_endoscope_euler() {
  
  if (endoscope_euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Euler>(GetArenaNoVirtual());
    endoscope_euler_ = p;
  }
  return endoscope_euler_;
}
inline ::pb::Coord::Euler* FusionData::mutable_endoscope_euler() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.endoscope_euler)
  return _internal_mutable_endoscope_euler();
}
inline void FusionData::set_allocated_endoscope_euler(::pb::Coord::Euler* endoscope_euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endoscope_euler_);
  }
  if (endoscope_euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endoscope_euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endoscope_euler, submessage_arena);
    }
    
  } else {
    
  }
  endoscope_euler_ = endoscope_euler;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.endoscope_euler)
}

// .pb.Coord.Vector3 tube_pos = 3;
inline bool FusionData::_internal_has_tube_pos() const {
  return this != internal_default_instance() && tube_pos_ != nullptr;
}
inline bool FusionData::has_tube_pos() const {
  return _internal_has_tube_pos();
}
inline const ::pb::Coord::Vector3& FusionData::_internal_tube_pos() const {
  const ::pb::Coord::Vector3* p = tube_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Vector3*>(
      &::pb::Coord::_Vector3_default_instance_);
}
inline const ::pb::Coord::Vector3& FusionData::tube_pos() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.tube_pos)
  return _internal_tube_pos();
}
inline ::pb::Coord::Vector3* FusionData::release_tube_pos() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.tube_pos)
  
  ::pb::Coord::Vector3* temp = tube_pos_;
  tube_pos_ = nullptr;
  return temp;
}
inline ::pb::Coord::Vector3* FusionData::_internal_mutable_tube_pos() {
  
  if (tube_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Vector3>(GetArenaNoVirtual());
    tube_pos_ = p;
  }
  return tube_pos_;
}
inline ::pb::Coord::Vector3* FusionData::mutable_tube_pos() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.tube_pos)
  return _internal_mutable_tube_pos();
}
inline void FusionData::set_allocated_tube_pos(::pb::Coord::Vector3* tube_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tube_pos_);
  }
  if (tube_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tube_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tube_pos, submessage_arena);
    }
    
  } else {
    
  }
  tube_pos_ = tube_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.tube_pos)
}

// .pb.Coord.Euler tube_euler = 4;
inline bool FusionData::_internal_has_tube_euler() const {
  return this != internal_default_instance() && tube_euler_ != nullptr;
}
inline bool FusionData::has_tube_euler() const {
  return _internal_has_tube_euler();
}
inline const ::pb::Coord::Euler& FusionData::_internal_tube_euler() const {
  const ::pb::Coord::Euler* p = tube_euler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Euler*>(
      &::pb::Coord::_Euler_default_instance_);
}
inline const ::pb::Coord::Euler& FusionData::tube_euler() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.tube_euler)
  return _internal_tube_euler();
}
inline ::pb::Coord::Euler* FusionData::release_tube_euler() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.tube_euler)
  
  ::pb::Coord::Euler* temp = tube_euler_;
  tube_euler_ = nullptr;
  return temp;
}
inline ::pb::Coord::Euler* FusionData::_internal_mutable_tube_euler() {
  
  if (tube_euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Euler>(GetArenaNoVirtual());
    tube_euler_ = p;
  }
  return tube_euler_;
}
inline ::pb::Coord::Euler* FusionData::mutable_tube_euler() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.tube_euler)
  return _internal_mutable_tube_euler();
}
inline void FusionData::set_allocated_tube_euler(::pb::Coord::Euler* tube_euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tube_euler_);
  }
  if (tube_euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tube_euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tube_euler, submessage_arena);
    }
    
  } else {
    
  }
  tube_euler_ = tube_euler;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.tube_euler)
}

// .pb.Offset.Offset offset = 5;
inline bool FusionData::_internal_has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline bool FusionData::has_offset() const {
  return _internal_has_offset();
}
inline const ::pb::Offset::Offset& FusionData::_internal_offset() const {
  const ::pb::Offset::Offset* p = offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Offset::Offset*>(
      &::pb::Offset::_Offset_default_instance_);
}
inline const ::pb::Offset::Offset& FusionData::offset() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.offset)
  return _internal_offset();
}
inline ::pb::Offset::Offset* FusionData::release_offset() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.offset)
  
  ::pb::Offset::Offset* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::pb::Offset::Offset* FusionData::_internal_mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Offset::Offset>(GetArenaNoVirtual());
    offset_ = p;
  }
  return offset_;
}
inline ::pb::Offset::Offset* FusionData::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.offset)
  return _internal_mutable_offset();
}
inline void FusionData::set_allocated_offset(::pb::Offset::Offset* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.offset)
}

// .pb.Coord.Quaternion rot_coord = 6;
inline bool FusionData::_internal_has_rot_coord() const {
  return this != internal_default_instance() && rot_coord_ != nullptr;
}
inline bool FusionData::has_rot_coord() const {
  return _internal_has_rot_coord();
}
inline const ::pb::Coord::Quaternion& FusionData::_internal_rot_coord() const {
  const ::pb::Coord::Quaternion* p = rot_coord_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Quaternion*>(
      &::pb::Coord::_Quaternion_default_instance_);
}
inline const ::pb::Coord::Quaternion& FusionData::rot_coord() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.rot_coord)
  return _internal_rot_coord();
}
inline ::pb::Coord::Quaternion* FusionData::release_rot_coord() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.rot_coord)
  
  ::pb::Coord::Quaternion* temp = rot_coord_;
  rot_coord_ = nullptr;
  return temp;
}
inline ::pb::Coord::Quaternion* FusionData::_internal_mutable_rot_coord() {
  
  if (rot_coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Quaternion>(GetArenaNoVirtual());
    rot_coord_ = p;
  }
  return rot_coord_;
}
inline ::pb::Coord::Quaternion* FusionData::mutable_rot_coord() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.rot_coord)
  return _internal_mutable_rot_coord();
}
inline void FusionData::set_allocated_rot_coord(::pb::Coord::Quaternion* rot_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_coord_);
  }
  if (rot_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rot_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot_coord, submessage_arena);
    }
    
  } else {
    
  }
  rot_coord_ = rot_coord;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.rot_coord)
}

// .pb.Coord.Vector3 pivot_pos = 7;
inline bool FusionData::_internal_has_pivot_pos() const {
  return this != internal_default_instance() && pivot_pos_ != nullptr;
}
inline bool FusionData::has_pivot_pos() const {
  return _internal_has_pivot_pos();
}
inline const ::pb::Coord::Vector3& FusionData::_internal_pivot_pos() const {
  const ::pb::Coord::Vector3* p = pivot_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Vector3*>(
      &::pb::Coord::_Vector3_default_instance_);
}
inline const ::pb::Coord::Vector3& FusionData::pivot_pos() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.pivot_pos)
  return _internal_pivot_pos();
}
inline ::pb::Coord::Vector3* FusionData::release_pivot_pos() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.pivot_pos)
  
  ::pb::Coord::Vector3* temp = pivot_pos_;
  pivot_pos_ = nullptr;
  return temp;
}
inline ::pb::Coord::Vector3* FusionData::_internal_mutable_pivot_pos() {
  
  if (pivot_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Vector3>(GetArenaNoVirtual());
    pivot_pos_ = p;
  }
  return pivot_pos_;
}
inline ::pb::Coord::Vector3* FusionData::mutable_pivot_pos() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.pivot_pos)
  return _internal_mutable_pivot_pos();
}
inline void FusionData::set_allocated_pivot_pos(::pb::Coord::Vector3* pivot_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pivot_pos_);
  }
  if (pivot_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pivot_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pivot_pos, submessage_arena);
    }
    
  } else {
    
  }
  pivot_pos_ = pivot_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.pivot_pos)
}

// float ablation_count = 8;
inline void FusionData::clear_ablation_count() {
  ablation_count_ = 0;
}
inline float FusionData::_internal_ablation_count() const {
  return ablation_count_;
}
inline float FusionData::ablation_count() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.ablation_count)
  return _internal_ablation_count();
}
inline void FusionData::_internal_set_ablation_count(float value) {
  
  ablation_count_ = value;
}
inline void FusionData::set_ablation_count(float value) {
  _internal_set_ablation_count(value);
  // @@protoc_insertion_point(field_set:pb.FusionData.FusionData.ablation_count)
}

// .pb.Haptic.Haptic haptic = 9;
inline bool FusionData::_internal_has_haptic() const {
  return this != internal_default_instance() && haptic_ != nullptr;
}
inline bool FusionData::has_haptic() const {
  return _internal_has_haptic();
}
inline const ::pb::Haptic::Haptic& FusionData::_internal_haptic() const {
  const ::pb::Haptic::Haptic* p = haptic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Haptic::Haptic*>(
      &::pb::Haptic::_Haptic_default_instance_);
}
inline const ::pb::Haptic::Haptic& FusionData::haptic() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.haptic)
  return _internal_haptic();
}
inline ::pb::Haptic::Haptic* FusionData::release_haptic() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.haptic)
  
  ::pb::Haptic::Haptic* temp = haptic_;
  haptic_ = nullptr;
  return temp;
}
inline ::pb::Haptic::Haptic* FusionData::_internal_mutable_haptic() {
  
  if (haptic_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Haptic::Haptic>(GetArenaNoVirtual());
    haptic_ = p;
  }
  return haptic_;
}
inline ::pb::Haptic::Haptic* FusionData::mutable_haptic() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.haptic)
  return _internal_mutable_haptic();
}
inline void FusionData::set_allocated_haptic(::pb::Haptic::Haptic* haptic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(haptic_);
  }
  if (haptic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      haptic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, haptic, submessage_arena);
    }
    
  } else {
    
  }
  haptic_ = haptic;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.haptic)
}

// float hemostasis_count = 10;
inline void FusionData::clear_hemostasis_count() {
  hemostasis_count_ = 0;
}
inline float FusionData::_internal_hemostasis_count() const {
  return hemostasis_count_;
}
inline float FusionData::hemostasis_count() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.hemostasis_count)
  return _internal_hemostasis_count();
}
inline void FusionData::_internal_set_hemostasis_count(float value) {
  
  hemostasis_count_ = value;
}
inline void FusionData::set_hemostasis_count(float value) {
  _internal_set_hemostasis_count(value);
  // @@protoc_insertion_point(field_set:pb.FusionData.FusionData.hemostasis_count)
}

// float hemostasis_index = 11;
inline void FusionData::clear_hemostasis_index() {
  hemostasis_index_ = 0;
}
inline float FusionData::_internal_hemostasis_index() const {
  return hemostasis_index_;
}
inline float FusionData::hemostasis_index() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.hemostasis_index)
  return _internal_hemostasis_index();
}
inline void FusionData::_internal_set_hemostasis_index(float value) {
  
  hemostasis_index_ = value;
}
inline void FusionData::set_hemostasis_index(float value) {
  _internal_set_hemostasis_index(value);
  // @@protoc_insertion_point(field_set:pb.FusionData.FusionData.hemostasis_index)
}

// .pb.Tissue.Tissue soft_tissue = 12;
inline bool FusionData::_internal_has_soft_tissue() const {
  return this != internal_default_instance() && soft_tissue_ != nullptr;
}
inline bool FusionData::has_soft_tissue() const {
  return _internal_has_soft_tissue();
}
inline const ::pb::Tissue::Tissue& FusionData::_internal_soft_tissue() const {
  const ::pb::Tissue::Tissue* p = soft_tissue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Tissue::Tissue*>(
      &::pb::Tissue::_Tissue_default_instance_);
}
inline const ::pb::Tissue::Tissue& FusionData::soft_tissue() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.soft_tissue)
  return _internal_soft_tissue();
}
inline ::pb::Tissue::Tissue* FusionData::release_soft_tissue() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.soft_tissue)
  
  ::pb::Tissue::Tissue* temp = soft_tissue_;
  soft_tissue_ = nullptr;
  return temp;
}
inline ::pb::Tissue::Tissue* FusionData::_internal_mutable_soft_tissue() {
  
  if (soft_tissue_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Tissue::Tissue>(GetArenaNoVirtual());
    soft_tissue_ = p;
  }
  return soft_tissue_;
}
inline ::pb::Tissue::Tissue* FusionData::mutable_soft_tissue() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.soft_tissue)
  return _internal_mutable_soft_tissue();
}
inline void FusionData::set_allocated_soft_tissue(::pb::Tissue::Tissue* soft_tissue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soft_tissue_);
  }
  if (soft_tissue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      soft_tissue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soft_tissue, submessage_arena);
    }
    
  } else {
    
  }
  soft_tissue_ = soft_tissue;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.soft_tissue)
}

// float nerve_root_dance = 13;
inline void FusionData::clear_nerve_root_dance() {
  nerve_root_dance_ = 0;
}
inline float FusionData::_internal_nerve_root_dance() const {
  return nerve_root_dance_;
}
inline float FusionData::nerve_root_dance() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.nerve_root_dance)
  return _internal_nerve_root_dance();
}
inline void FusionData::_internal_set_nerve_root_dance(float value) {
  
  nerve_root_dance_ = value;
}
inline void FusionData::set_nerve_root_dance(float value) {
  _internal_set_nerve_root_dance(value);
  // @@protoc_insertion_point(field_set:pb.FusionData.FusionData.nerve_root_dance)
}

// .pb.Coord.Vector3 rongeur_pos = 14;
inline bool FusionData::_internal_has_rongeur_pos() const {
  return this != internal_default_instance() && rongeur_pos_ != nullptr;
}
inline bool FusionData::has_rongeur_pos() const {
  return _internal_has_rongeur_pos();
}
inline const ::pb::Coord::Vector3& FusionData::_internal_rongeur_pos() const {
  const ::pb::Coord::Vector3* p = rongeur_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Vector3*>(
      &::pb::Coord::_Vector3_default_instance_);
}
inline const ::pb::Coord::Vector3& FusionData::rongeur_pos() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.rongeur_pos)
  return _internal_rongeur_pos();
}
inline ::pb::Coord::Vector3* FusionData::release_rongeur_pos() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.rongeur_pos)
  
  ::pb::Coord::Vector3* temp = rongeur_pos_;
  rongeur_pos_ = nullptr;
  return temp;
}
inline ::pb::Coord::Vector3* FusionData::_internal_mutable_rongeur_pos() {
  
  if (rongeur_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Vector3>(GetArenaNoVirtual());
    rongeur_pos_ = p;
  }
  return rongeur_pos_;
}
inline ::pb::Coord::Vector3* FusionData::mutable_rongeur_pos() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.rongeur_pos)
  return _internal_mutable_rongeur_pos();
}
inline void FusionData::set_allocated_rongeur_pos(::pb::Coord::Vector3* rongeur_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rongeur_pos_);
  }
  if (rongeur_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rongeur_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rongeur_pos, submessage_arena);
    }
    
  } else {
    
  }
  rongeur_pos_ = rongeur_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.rongeur_pos)
}

// .pb.Coord.Vector3 rongeur_rot = 15;
inline bool FusionData::_internal_has_rongeur_rot() const {
  return this != internal_default_instance() && rongeur_rot_ != nullptr;
}
inline bool FusionData::has_rongeur_rot() const {
  return _internal_has_rongeur_rot();
}
inline const ::pb::Coord::Vector3& FusionData::_internal_rongeur_rot() const {
  const ::pb::Coord::Vector3* p = rongeur_rot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Coord::Vector3*>(
      &::pb::Coord::_Vector3_default_instance_);
}
inline const ::pb::Coord::Vector3& FusionData::rongeur_rot() const {
  // @@protoc_insertion_point(field_get:pb.FusionData.FusionData.rongeur_rot)
  return _internal_rongeur_rot();
}
inline ::pb::Coord::Vector3* FusionData::release_rongeur_rot() {
  // @@protoc_insertion_point(field_release:pb.FusionData.FusionData.rongeur_rot)
  
  ::pb::Coord::Vector3* temp = rongeur_rot_;
  rongeur_rot_ = nullptr;
  return temp;
}
inline ::pb::Coord::Vector3* FusionData::_internal_mutable_rongeur_rot() {
  
  if (rongeur_rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Coord::Vector3>(GetArenaNoVirtual());
    rongeur_rot_ = p;
  }
  return rongeur_rot_;
}
inline ::pb::Coord::Vector3* FusionData::mutable_rongeur_rot() {
  // @@protoc_insertion_point(field_mutable:pb.FusionData.FusionData.rongeur_rot)
  return _internal_mutable_rongeur_rot();
}
inline void FusionData::set_allocated_rongeur_rot(::pb::Coord::Vector3* rongeur_rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rongeur_rot_);
  }
  if (rongeur_rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rongeur_rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rongeur_rot, submessage_arena);
    }
    
  } else {
    
  }
  rongeur_rot_ = rongeur_rot;
  // @@protoc_insertion_point(field_set_allocated:pb.FusionData.FusionData.rongeur_rot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace FusionData
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fusion_2eproto
