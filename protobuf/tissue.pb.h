// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tissue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tissue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tissue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tissue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tissue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tissue_2eproto;
namespace pb {
namespace Tissue {
class Tissue;
class TissueDefaultTypeInternal;
extern TissueDefaultTypeInternal _Tissue_default_instance_;
}  // namespace Tissue
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Tissue::Tissue* Arena::CreateMaybeMessage<::pb::Tissue::Tissue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace Tissue {

// ===================================================================

class Tissue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Tissue.Tissue) */ {
 public:
  Tissue();
  virtual ~Tissue();

  Tissue(const Tissue& from);
  Tissue(Tissue&& from) noexcept
    : Tissue() {
    *this = ::std::move(from);
  }

  inline Tissue& operator=(const Tissue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tissue& operator=(Tissue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tissue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tissue* internal_default_instance() {
    return reinterpret_cast<const Tissue*>(
               &_Tissue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tissue& a, Tissue& b) {
    a.Swap(&b);
  }
  inline void Swap(Tissue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tissue* New() const final {
    return CreateMaybeMessage<Tissue>(nullptr);
  }

  Tissue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tissue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tissue& from);
  void MergeFrom(const Tissue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tissue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Tissue.Tissue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tissue_2eproto);
    return ::descriptor_table_tissue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLigaFlavumFieldNumber = 1,
    kDiscYellowSpaceFieldNumber = 2,
    kVeutroVesselFieldNumber = 3,
    kFatFieldNumber = 4,
    kFibrousRingsFieldNumber = 5,
    kNucleusPulposusFieldNumber = 6,
    kPLongitudinalLigaFieldNumber = 7,
    kDuraMaterFieldNumber = 8,
    kNerveRootFieldNumber = 9,
  };
  // float liga_flavum = 1;
  void clear_liga_flavum();
  float liga_flavum() const;
  void set_liga_flavum(float value);
  private:
  float _internal_liga_flavum() const;
  void _internal_set_liga_flavum(float value);
  public:

  // float disc_yellow_space = 2;
  void clear_disc_yellow_space();
  float disc_yellow_space() const;
  void set_disc_yellow_space(float value);
  private:
  float _internal_disc_yellow_space() const;
  void _internal_set_disc_yellow_space(float value);
  public:

  // float veutro_vessel = 3;
  void clear_veutro_vessel();
  float veutro_vessel() const;
  void set_veutro_vessel(float value);
  private:
  float _internal_veutro_vessel() const;
  void _internal_set_veutro_vessel(float value);
  public:

  // float fat = 4;
  void clear_fat();
  float fat() const;
  void set_fat(float value);
  private:
  float _internal_fat() const;
  void _internal_set_fat(float value);
  public:

  // float fibrous_rings = 5;
  void clear_fibrous_rings();
  float fibrous_rings() const;
  void set_fibrous_rings(float value);
  private:
  float _internal_fibrous_rings() const;
  void _internal_set_fibrous_rings(float value);
  public:

  // float nucleus_pulposus = 6;
  void clear_nucleus_pulposus();
  float nucleus_pulposus() const;
  void set_nucleus_pulposus(float value);
  private:
  float _internal_nucleus_pulposus() const;
  void _internal_set_nucleus_pulposus(float value);
  public:

  // float p_longitudinal_liga = 7;
  void clear_p_longitudinal_liga();
  float p_longitudinal_liga() const;
  void set_p_longitudinal_liga(float value);
  private:
  float _internal_p_longitudinal_liga() const;
  void _internal_set_p_longitudinal_liga(float value);
  public:

  // float dura_mater = 8;
  void clear_dura_mater();
  float dura_mater() const;
  void set_dura_mater(float value);
  private:
  float _internal_dura_mater() const;
  void _internal_set_dura_mater(float value);
  public:

  // float nerve_root = 9;
  void clear_nerve_root();
  float nerve_root() const;
  void set_nerve_root(float value);
  private:
  float _internal_nerve_root() const;
  void _internal_set_nerve_root(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Tissue.Tissue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float liga_flavum_;
  float disc_yellow_space_;
  float veutro_vessel_;
  float fat_;
  float fibrous_rings_;
  float nucleus_pulposus_;
  float p_longitudinal_liga_;
  float dura_mater_;
  float nerve_root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tissue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tissue

// float liga_flavum = 1;
inline void Tissue::clear_liga_flavum() {
  liga_flavum_ = 0;
}
inline float Tissue::_internal_liga_flavum() const {
  return liga_flavum_;
}
inline float Tissue::liga_flavum() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.liga_flavum)
  return _internal_liga_flavum();
}
inline void Tissue::_internal_set_liga_flavum(float value) {
  
  liga_flavum_ = value;
}
inline void Tissue::set_liga_flavum(float value) {
  _internal_set_liga_flavum(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.liga_flavum)
}

// float disc_yellow_space = 2;
inline void Tissue::clear_disc_yellow_space() {
  disc_yellow_space_ = 0;
}
inline float Tissue::_internal_disc_yellow_space() const {
  return disc_yellow_space_;
}
inline float Tissue::disc_yellow_space() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.disc_yellow_space)
  return _internal_disc_yellow_space();
}
inline void Tissue::_internal_set_disc_yellow_space(float value) {
  
  disc_yellow_space_ = value;
}
inline void Tissue::set_disc_yellow_space(float value) {
  _internal_set_disc_yellow_space(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.disc_yellow_space)
}

// float veutro_vessel = 3;
inline void Tissue::clear_veutro_vessel() {
  veutro_vessel_ = 0;
}
inline float Tissue::_internal_veutro_vessel() const {
  return veutro_vessel_;
}
inline float Tissue::veutro_vessel() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.veutro_vessel)
  return _internal_veutro_vessel();
}
inline void Tissue::_internal_set_veutro_vessel(float value) {
  
  veutro_vessel_ = value;
}
inline void Tissue::set_veutro_vessel(float value) {
  _internal_set_veutro_vessel(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.veutro_vessel)
}

// float fat = 4;
inline void Tissue::clear_fat() {
  fat_ = 0;
}
inline float Tissue::_internal_fat() const {
  return fat_;
}
inline float Tissue::fat() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.fat)
  return _internal_fat();
}
inline void Tissue::_internal_set_fat(float value) {
  
  fat_ = value;
}
inline void Tissue::set_fat(float value) {
  _internal_set_fat(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.fat)
}

// float fibrous_rings = 5;
inline void Tissue::clear_fibrous_rings() {
  fibrous_rings_ = 0;
}
inline float Tissue::_internal_fibrous_rings() const {
  return fibrous_rings_;
}
inline float Tissue::fibrous_rings() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.fibrous_rings)
  return _internal_fibrous_rings();
}
inline void Tissue::_internal_set_fibrous_rings(float value) {
  
  fibrous_rings_ = value;
}
inline void Tissue::set_fibrous_rings(float value) {
  _internal_set_fibrous_rings(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.fibrous_rings)
}

// float nucleus_pulposus = 6;
inline void Tissue::clear_nucleus_pulposus() {
  nucleus_pulposus_ = 0;
}
inline float Tissue::_internal_nucleus_pulposus() const {
  return nucleus_pulposus_;
}
inline float Tissue::nucleus_pulposus() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.nucleus_pulposus)
  return _internal_nucleus_pulposus();
}
inline void Tissue::_internal_set_nucleus_pulposus(float value) {
  
  nucleus_pulposus_ = value;
}
inline void Tissue::set_nucleus_pulposus(float value) {
  _internal_set_nucleus_pulposus(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.nucleus_pulposus)
}

// float p_longitudinal_liga = 7;
inline void Tissue::clear_p_longitudinal_liga() {
  p_longitudinal_liga_ = 0;
}
inline float Tissue::_internal_p_longitudinal_liga() const {
  return p_longitudinal_liga_;
}
inline float Tissue::p_longitudinal_liga() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.p_longitudinal_liga)
  return _internal_p_longitudinal_liga();
}
inline void Tissue::_internal_set_p_longitudinal_liga(float value) {
  
  p_longitudinal_liga_ = value;
}
inline void Tissue::set_p_longitudinal_liga(float value) {
  _internal_set_p_longitudinal_liga(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.p_longitudinal_liga)
}

// float dura_mater = 8;
inline void Tissue::clear_dura_mater() {
  dura_mater_ = 0;
}
inline float Tissue::_internal_dura_mater() const {
  return dura_mater_;
}
inline float Tissue::dura_mater() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.dura_mater)
  return _internal_dura_mater();
}
inline void Tissue::_internal_set_dura_mater(float value) {
  
  dura_mater_ = value;
}
inline void Tissue::set_dura_mater(float value) {
  _internal_set_dura_mater(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.dura_mater)
}

// float nerve_root = 9;
inline void Tissue::clear_nerve_root() {
  nerve_root_ = 0;
}
inline float Tissue::_internal_nerve_root() const {
  return nerve_root_;
}
inline float Tissue::nerve_root() const {
  // @@protoc_insertion_point(field_get:pb.Tissue.Tissue.nerve_root)
  return _internal_nerve_root();
}
inline void Tissue::_internal_set_nerve_root(float value) {
  
  nerve_root_ = value;
}
inline void Tissue::set_nerve_root(float value) {
  _internal_set_nerve_root(value);
  // @@protoc_insertion_point(field_set:pb.Tissue.Tissue.nerve_root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tissue
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tissue_2eproto
