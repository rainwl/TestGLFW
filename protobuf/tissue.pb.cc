// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tissue.proto

#include "tissue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace Tissue {
class TissueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tissue> _instance;
} _Tissue_default_instance_;
}  // namespace Tissue
}  // namespace pb
static void InitDefaultsscc_info_Tissue_tissue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::Tissue::_Tissue_default_instance_;
    new (ptr) ::pb::Tissue::Tissue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Tissue::Tissue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tissue_tissue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tissue_tissue_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tissue_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tissue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tissue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tissue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, liga_flavum_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, disc_yellow_space_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, veutro_vessel_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, fat_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, fibrous_rings_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, nucleus_pulposus_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, p_longitudinal_liga_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, dura_mater_),
  PROTOBUF_FIELD_OFFSET(::pb::Tissue::Tissue, nerve_root_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::Tissue::Tissue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::Tissue::_Tissue_default_instance_),
};

const char descriptor_table_protodef_tissue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014tissue.proto\022\tpb.Tissue\"\322\001\n\006Tissue\022\023\n\013"
  "liga_flavum\030\001 \001(\002\022\031\n\021disc_yellow_space\030\002"
  " \001(\002\022\025\n\rveutro_vessel\030\003 \001(\002\022\013\n\003fat\030\004 \001(\002"
  "\022\025\n\rfibrous_rings\030\005 \001(\002\022\030\n\020nucleus_pulpo"
  "sus\030\006 \001(\002\022\033\n\023p_longitudinal_liga\030\007 \001(\002\022\022"
  "\n\ndura_mater\030\010 \001(\002\022\022\n\nnerve_root\030\t \001(\002b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tissue_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tissue_2eproto_sccs[1] = {
  &scc_info_Tissue_tissue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tissue_2eproto_once;
static bool descriptor_table_tissue_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tissue_2eproto = {
  &descriptor_table_tissue_2eproto_initialized, descriptor_table_protodef_tissue_2eproto, "tissue.proto", 246,
  &descriptor_table_tissue_2eproto_once, descriptor_table_tissue_2eproto_sccs, descriptor_table_tissue_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_tissue_2eproto::offsets,
  file_level_metadata_tissue_2eproto, 1, file_level_enum_descriptors_tissue_2eproto, file_level_service_descriptors_tissue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tissue_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tissue_2eproto), true);
namespace pb {
namespace Tissue {

// ===================================================================

void Tissue::InitAsDefaultInstance() {
}
class Tissue::_Internal {
 public:
};

Tissue::Tissue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Tissue.Tissue)
}
Tissue::Tissue(const Tissue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&liga_flavum_, &from.liga_flavum_,
    static_cast<size_t>(reinterpret_cast<char*>(&nerve_root_) -
    reinterpret_cast<char*>(&liga_flavum_)) + sizeof(nerve_root_));
  // @@protoc_insertion_point(copy_constructor:pb.Tissue.Tissue)
}

void Tissue::SharedCtor() {
  ::memset(&liga_flavum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nerve_root_) -
      reinterpret_cast<char*>(&liga_flavum_)) + sizeof(nerve_root_));
}

Tissue::~Tissue() {
  // @@protoc_insertion_point(destructor:pb.Tissue.Tissue)
  SharedDtor();
}

void Tissue::SharedDtor() {
}

void Tissue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tissue& Tissue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tissue_tissue_2eproto.base);
  return *internal_default_instance();
}


void Tissue::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Tissue.Tissue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&liga_flavum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nerve_root_) -
      reinterpret_cast<char*>(&liga_flavum_)) + sizeof(nerve_root_));
  _internal_metadata_.Clear();
}

const char* Tissue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float liga_flavum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          liga_flavum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float disc_yellow_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          disc_yellow_space_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float veutro_vessel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          veutro_vessel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fibrous_rings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fibrous_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nucleus_pulposus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          nucleus_pulposus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_longitudinal_liga = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          p_longitudinal_liga_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dura_mater = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          dura_mater_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nerve_root = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          nerve_root_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tissue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Tissue.Tissue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float liga_flavum = 1;
  if (!(this->liga_flavum() <= 0 && this->liga_flavum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_liga_flavum(), target);
  }

  // float disc_yellow_space = 2;
  if (!(this->disc_yellow_space() <= 0 && this->disc_yellow_space() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_disc_yellow_space(), target);
  }

  // float veutro_vessel = 3;
  if (!(this->veutro_vessel() <= 0 && this->veutro_vessel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_veutro_vessel(), target);
  }

  // float fat = 4;
  if (!(this->fat() <= 0 && this->fat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fat(), target);
  }

  // float fibrous_rings = 5;
  if (!(this->fibrous_rings() <= 0 && this->fibrous_rings() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fibrous_rings(), target);
  }

  // float nucleus_pulposus = 6;
  if (!(this->nucleus_pulposus() <= 0 && this->nucleus_pulposus() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_nucleus_pulposus(), target);
  }

  // float p_longitudinal_liga = 7;
  if (!(this->p_longitudinal_liga() <= 0 && this->p_longitudinal_liga() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_p_longitudinal_liga(), target);
  }

  // float dura_mater = 8;
  if (!(this->dura_mater() <= 0 && this->dura_mater() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_dura_mater(), target);
  }

  // float nerve_root = 9;
  if (!(this->nerve_root() <= 0 && this->nerve_root() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_nerve_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Tissue.Tissue)
  return target;
}

size_t Tissue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Tissue.Tissue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float liga_flavum = 1;
  if (!(this->liga_flavum() <= 0 && this->liga_flavum() >= 0)) {
    total_size += 1 + 4;
  }

  // float disc_yellow_space = 2;
  if (!(this->disc_yellow_space() <= 0 && this->disc_yellow_space() >= 0)) {
    total_size += 1 + 4;
  }

  // float veutro_vessel = 3;
  if (!(this->veutro_vessel() <= 0 && this->veutro_vessel() >= 0)) {
    total_size += 1 + 4;
  }

  // float fat = 4;
  if (!(this->fat() <= 0 && this->fat() >= 0)) {
    total_size += 1 + 4;
  }

  // float fibrous_rings = 5;
  if (!(this->fibrous_rings() <= 0 && this->fibrous_rings() >= 0)) {
    total_size += 1 + 4;
  }

  // float nucleus_pulposus = 6;
  if (!(this->nucleus_pulposus() <= 0 && this->nucleus_pulposus() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_longitudinal_liga = 7;
  if (!(this->p_longitudinal_liga() <= 0 && this->p_longitudinal_liga() >= 0)) {
    total_size += 1 + 4;
  }

  // float dura_mater = 8;
  if (!(this->dura_mater() <= 0 && this->dura_mater() >= 0)) {
    total_size += 1 + 4;
  }

  // float nerve_root = 9;
  if (!(this->nerve_root() <= 0 && this->nerve_root() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tissue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Tissue.Tissue)
  GOOGLE_DCHECK_NE(&from, this);
  const Tissue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tissue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Tissue.Tissue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Tissue.Tissue)
    MergeFrom(*source);
  }
}

void Tissue::MergeFrom(const Tissue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Tissue.Tissue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.liga_flavum() <= 0 && from.liga_flavum() >= 0)) {
    _internal_set_liga_flavum(from._internal_liga_flavum());
  }
  if (!(from.disc_yellow_space() <= 0 && from.disc_yellow_space() >= 0)) {
    _internal_set_disc_yellow_space(from._internal_disc_yellow_space());
  }
  if (!(from.veutro_vessel() <= 0 && from.veutro_vessel() >= 0)) {
    _internal_set_veutro_vessel(from._internal_veutro_vessel());
  }
  if (!(from.fat() <= 0 && from.fat() >= 0)) {
    _internal_set_fat(from._internal_fat());
  }
  if (!(from.fibrous_rings() <= 0 && from.fibrous_rings() >= 0)) {
    _internal_set_fibrous_rings(from._internal_fibrous_rings());
  }
  if (!(from.nucleus_pulposus() <= 0 && from.nucleus_pulposus() >= 0)) {
    _internal_set_nucleus_pulposus(from._internal_nucleus_pulposus());
  }
  if (!(from.p_longitudinal_liga() <= 0 && from.p_longitudinal_liga() >= 0)) {
    _internal_set_p_longitudinal_liga(from._internal_p_longitudinal_liga());
  }
  if (!(from.dura_mater() <= 0 && from.dura_mater() >= 0)) {
    _internal_set_dura_mater(from._internal_dura_mater());
  }
  if (!(from.nerve_root() <= 0 && from.nerve_root() >= 0)) {
    _internal_set_nerve_root(from._internal_nerve_root());
  }
}

void Tissue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Tissue.Tissue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tissue::CopyFrom(const Tissue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Tissue.Tissue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tissue::IsInitialized() const {
  return true;
}

void Tissue::InternalSwap(Tissue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(liga_flavum_, other->liga_flavum_);
  swap(disc_yellow_space_, other->disc_yellow_space_);
  swap(veutro_vessel_, other->veutro_vessel_);
  swap(fat_, other->fat_);
  swap(fibrous_rings_, other->fibrous_rings_);
  swap(nucleus_pulposus_, other->nucleus_pulposus_);
  swap(p_longitudinal_liga_, other->p_longitudinal_liga_);
  swap(dura_mater_, other->dura_mater_);
  swap(nerve_root_, other->nerve_root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tissue::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Tissue
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Tissue::Tissue* Arena::CreateMaybeMessage< ::pb::Tissue::Tissue >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Tissue::Tissue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
