// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offset.proto

#include "offset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace Offset {
class OffsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Offset> _instance;
} _Offset_default_instance_;
}  // namespace Offset
}  // namespace pb
static void InitDefaultsscc_info_Offset_offset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::Offset::_Offset_default_instance_;
    new (ptr) ::pb::Offset::Offset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Offset::Offset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Offset_offset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Offset_offset_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_offset_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_offset_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_offset_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_offset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Offset::Offset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Offset::Offset, endoscope_offset_),
  PROTOBUF_FIELD_OFFSET(::pb::Offset::Offset, tube_offset_),
  PROTOBUF_FIELD_OFFSET(::pb::Offset::Offset, instrument_switch_),
  PROTOBUF_FIELD_OFFSET(::pb::Offset::Offset, animation_value_),
  PROTOBUF_FIELD_OFFSET(::pb::Offset::Offset, pivot_offset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::Offset::Offset)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::Offset::_Offset_default_instance_),
};

const char descriptor_table_protodef_offset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014offset.proto\022\tpb.Offset\"\201\001\n\006Offset\022\030\n\020"
  "endoscope_offset\030\001 \001(\002\022\023\n\013tube_offset\030\002 "
  "\001(\002\022\031\n\021instrument_switch\030\003 \001(\002\022\027\n\017animat"
  "ion_value\030\004 \001(\002\022\024\n\014pivot_offset\030\005 \001(\002b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_offset_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_offset_2eproto_sccs[1] = {
  &scc_info_Offset_offset_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_offset_2eproto_once;
static bool descriptor_table_offset_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offset_2eproto = {
  &descriptor_table_offset_2eproto_initialized, descriptor_table_protodef_offset_2eproto, "offset.proto", 165,
  &descriptor_table_offset_2eproto_once, descriptor_table_offset_2eproto_sccs, descriptor_table_offset_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_offset_2eproto::offsets,
  file_level_metadata_offset_2eproto, 1, file_level_enum_descriptors_offset_2eproto, file_level_service_descriptors_offset_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_offset_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_offset_2eproto), true);
namespace pb {
namespace Offset {

// ===================================================================

void Offset::InitAsDefaultInstance() {
}
class Offset::_Internal {
 public:
};

Offset::Offset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Offset.Offset)
}
Offset::Offset(const Offset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&endoscope_offset_, &from.endoscope_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&pivot_offset_) -
    reinterpret_cast<char*>(&endoscope_offset_)) + sizeof(pivot_offset_));
  // @@protoc_insertion_point(copy_constructor:pb.Offset.Offset)
}

void Offset::SharedCtor() {
  ::memset(&endoscope_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pivot_offset_) -
      reinterpret_cast<char*>(&endoscope_offset_)) + sizeof(pivot_offset_));
}

Offset::~Offset() {
  // @@protoc_insertion_point(destructor:pb.Offset.Offset)
  SharedDtor();
}

void Offset::SharedDtor() {
}

void Offset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Offset& Offset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Offset_offset_2eproto.base);
  return *internal_default_instance();
}


void Offset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Offset.Offset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&endoscope_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pivot_offset_) -
      reinterpret_cast<char*>(&endoscope_offset_)) + sizeof(pivot_offset_));
  _internal_metadata_.Clear();
}

const char* Offset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float endoscope_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          endoscope_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tube_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          tube_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float instrument_switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          instrument_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float animation_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          animation_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pivot_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pivot_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Offset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Offset.Offset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float endoscope_offset = 1;
  if (!(this->endoscope_offset() <= 0 && this->endoscope_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_endoscope_offset(), target);
  }

  // float tube_offset = 2;
  if (!(this->tube_offset() <= 0 && this->tube_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_tube_offset(), target);
  }

  // float instrument_switch = 3;
  if (!(this->instrument_switch() <= 0 && this->instrument_switch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_instrument_switch(), target);
  }

  // float animation_value = 4;
  if (!(this->animation_value() <= 0 && this->animation_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_animation_value(), target);
  }

  // float pivot_offset = 5;
  if (!(this->pivot_offset() <= 0 && this->pivot_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pivot_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Offset.Offset)
  return target;
}

size_t Offset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Offset.Offset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float endoscope_offset = 1;
  if (!(this->endoscope_offset() <= 0 && this->endoscope_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float tube_offset = 2;
  if (!(this->tube_offset() <= 0 && this->tube_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float instrument_switch = 3;
  if (!(this->instrument_switch() <= 0 && this->instrument_switch() >= 0)) {
    total_size += 1 + 4;
  }

  // float animation_value = 4;
  if (!(this->animation_value() <= 0 && this->animation_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float pivot_offset = 5;
  if (!(this->pivot_offset() <= 0 && this->pivot_offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Offset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Offset.Offset)
  GOOGLE_DCHECK_NE(&from, this);
  const Offset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Offset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Offset.Offset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Offset.Offset)
    MergeFrom(*source);
  }
}

void Offset::MergeFrom(const Offset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Offset.Offset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.endoscope_offset() <= 0 && from.endoscope_offset() >= 0)) {
    _internal_set_endoscope_offset(from._internal_endoscope_offset());
  }
  if (!(from.tube_offset() <= 0 && from.tube_offset() >= 0)) {
    _internal_set_tube_offset(from._internal_tube_offset());
  }
  if (!(from.instrument_switch() <= 0 && from.instrument_switch() >= 0)) {
    _internal_set_instrument_switch(from._internal_instrument_switch());
  }
  if (!(from.animation_value() <= 0 && from.animation_value() >= 0)) {
    _internal_set_animation_value(from._internal_animation_value());
  }
  if (!(from.pivot_offset() <= 0 && from.pivot_offset() >= 0)) {
    _internal_set_pivot_offset(from._internal_pivot_offset());
  }
}

void Offset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Offset.Offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offset::CopyFrom(const Offset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Offset.Offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offset::IsInitialized() const {
  return true;
}

void Offset::InternalSwap(Offset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(endoscope_offset_, other->endoscope_offset_);
  swap(tube_offset_, other->tube_offset_);
  swap(instrument_switch_, other->instrument_switch_);
  swap(animation_value_, other->animation_value_);
  swap(pivot_offset_, other->pivot_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Offset::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Offset
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Offset::Offset* Arena::CreateMaybeMessage< ::pb::Offset::Offset >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Offset::Offset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
