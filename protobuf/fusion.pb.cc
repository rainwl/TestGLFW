// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion.proto

#include "fusion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_coord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Euler_coord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_coord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_coord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_haptic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Haptic_haptic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Offset_offset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tissue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tissue_tissue_2eproto;
namespace pb {
namespace FusionData {
class FusionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FusionData> _instance;
} _FusionData_default_instance_;
}  // namespace FusionData
}  // namespace pb
static void InitDefaultsscc_info_FusionData_fusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::FusionData::_FusionData_default_instance_;
    new (ptr) ::pb::FusionData::FusionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::FusionData::FusionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FusionData_fusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_FusionData_fusion_2eproto}, {
      &scc_info_Vector3_coord_2eproto.base,
      &scc_info_Euler_coord_2eproto.base,
      &scc_info_Offset_offset_2eproto.base,
      &scc_info_Quaternion_coord_2eproto.base,
      &scc_info_Haptic_haptic_2eproto.base,
      &scc_info_Tissue_tissue_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fusion_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fusion_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fusion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fusion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, endoscope_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, endoscope_euler_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, tube_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, tube_euler_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, offset_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, rot_coord_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, pivot_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, ablation_count_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, haptic_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, hemostasis_count_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, hemostasis_index_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, soft_tissue_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, nerve_root_dance_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, rongeur_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::FusionData::FusionData, rongeur_rot_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::FusionData::FusionData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::FusionData::_FusionData_default_instance_),
};

const char descriptor_table_protodef_fusion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014fusion.proto\022\rpb.FusionData\032\013coord.pro"
  "to\032\014tissue.proto\032\014haptic.proto\032\014offset.p"
  "roto\"\235\004\n\nFusionData\022(\n\rendoscope_pos\030\001 \001"
  "(\0132\021.pb.Coord.Vector3\022(\n\017endoscope_euler"
  "\030\002 \001(\0132\017.pb.Coord.Euler\022#\n\010tube_pos\030\003 \001("
  "\0132\021.pb.Coord.Vector3\022#\n\ntube_euler\030\004 \001(\013"
  "2\017.pb.Coord.Euler\022!\n\006offset\030\005 \001(\0132\021.pb.O"
  "ffset.Offset\022\'\n\trot_coord\030\006 \001(\0132\024.pb.Coo"
  "rd.Quaternion\022$\n\tpivot_pos\030\007 \001(\0132\021.pb.Co"
  "ord.Vector3\022\026\n\016ablation_count\030\010 \001(\002\022!\n\006h"
  "aptic\030\t \001(\0132\021.pb.Haptic.Haptic\022\030\n\020hemost"
  "asis_count\030\n \001(\002\022\030\n\020hemostasis_index\030\013 \001"
  "(\002\022&\n\013soft_tissue\030\014 \001(\0132\021.pb.Tissue.Tiss"
  "ue\022\030\n\020nerve_root_dance\030\r \001(\002\022&\n\013rongeur_"
  "pos\030\016 \001(\0132\021.pb.Coord.Vector3\022&\n\013rongeur_"
  "rot\030\017 \001(\0132\021.pb.Coord.Vector3b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fusion_2eproto_deps[4] = {
  &::descriptor_table_coord_2eproto,
  &::descriptor_table_haptic_2eproto,
  &::descriptor_table_offset_2eproto,
  &::descriptor_table_tissue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fusion_2eproto_sccs[1] = {
  &scc_info_FusionData_fusion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fusion_2eproto_once;
static bool descriptor_table_fusion_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fusion_2eproto = {
  &descriptor_table_fusion_2eproto_initialized, descriptor_table_protodef_fusion_2eproto, "fusion.proto", 636,
  &descriptor_table_fusion_2eproto_once, descriptor_table_fusion_2eproto_sccs, descriptor_table_fusion_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_fusion_2eproto::offsets,
  file_level_metadata_fusion_2eproto, 1, file_level_enum_descriptors_fusion_2eproto, file_level_service_descriptors_fusion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fusion_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fusion_2eproto), true);
namespace pb {
namespace FusionData {

// ===================================================================

void FusionData::InitAsDefaultInstance() {
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->endoscope_pos_ = const_cast< ::pb::Coord::Vector3*>(
      ::pb::Coord::Vector3::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->endoscope_euler_ = const_cast< ::pb::Coord::Euler*>(
      ::pb::Coord::Euler::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->tube_pos_ = const_cast< ::pb::Coord::Vector3*>(
      ::pb::Coord::Vector3::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->tube_euler_ = const_cast< ::pb::Coord::Euler*>(
      ::pb::Coord::Euler::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->offset_ = const_cast< ::pb::Offset::Offset*>(
      ::pb::Offset::Offset::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->rot_coord_ = const_cast< ::pb::Coord::Quaternion*>(
      ::pb::Coord::Quaternion::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->pivot_pos_ = const_cast< ::pb::Coord::Vector3*>(
      ::pb::Coord::Vector3::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->haptic_ = const_cast< ::pb::Haptic::Haptic*>(
      ::pb::Haptic::Haptic::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->soft_tissue_ = const_cast< ::pb::Tissue::Tissue*>(
      ::pb::Tissue::Tissue::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->rongeur_pos_ = const_cast< ::pb::Coord::Vector3*>(
      ::pb::Coord::Vector3::internal_default_instance());
  ::pb::FusionData::_FusionData_default_instance_._instance.get_mutable()->rongeur_rot_ = const_cast< ::pb::Coord::Vector3*>(
      ::pb::Coord::Vector3::internal_default_instance());
}
class FusionData::_Internal {
 public:
  static const ::pb::Coord::Vector3& endoscope_pos(const FusionData* msg);
  static const ::pb::Coord::Euler& endoscope_euler(const FusionData* msg);
  static const ::pb::Coord::Vector3& tube_pos(const FusionData* msg);
  static const ::pb::Coord::Euler& tube_euler(const FusionData* msg);
  static const ::pb::Offset::Offset& offset(const FusionData* msg);
  static const ::pb::Coord::Quaternion& rot_coord(const FusionData* msg);
  static const ::pb::Coord::Vector3& pivot_pos(const FusionData* msg);
  static const ::pb::Haptic::Haptic& haptic(const FusionData* msg);
  static const ::pb::Tissue::Tissue& soft_tissue(const FusionData* msg);
  static const ::pb::Coord::Vector3& rongeur_pos(const FusionData* msg);
  static const ::pb::Coord::Vector3& rongeur_rot(const FusionData* msg);
};

const ::pb::Coord::Vector3&
FusionData::_Internal::endoscope_pos(const FusionData* msg) {
  return *msg->endoscope_pos_;
}
const ::pb::Coord::Euler&
FusionData::_Internal::endoscope_euler(const FusionData* msg) {
  return *msg->endoscope_euler_;
}
const ::pb::Coord::Vector3&
FusionData::_Internal::tube_pos(const FusionData* msg) {
  return *msg->tube_pos_;
}
const ::pb::Coord::Euler&
FusionData::_Internal::tube_euler(const FusionData* msg) {
  return *msg->tube_euler_;
}
const ::pb::Offset::Offset&
FusionData::_Internal::offset(const FusionData* msg) {
  return *msg->offset_;
}
const ::pb::Coord::Quaternion&
FusionData::_Internal::rot_coord(const FusionData* msg) {
  return *msg->rot_coord_;
}
const ::pb::Coord::Vector3&
FusionData::_Internal::pivot_pos(const FusionData* msg) {
  return *msg->pivot_pos_;
}
const ::pb::Haptic::Haptic&
FusionData::_Internal::haptic(const FusionData* msg) {
  return *msg->haptic_;
}
const ::pb::Tissue::Tissue&
FusionData::_Internal::soft_tissue(const FusionData* msg) {
  return *msg->soft_tissue_;
}
const ::pb::Coord::Vector3&
FusionData::_Internal::rongeur_pos(const FusionData* msg) {
  return *msg->rongeur_pos_;
}
const ::pb::Coord::Vector3&
FusionData::_Internal::rongeur_rot(const FusionData* msg) {
  return *msg->rongeur_rot_;
}
void FusionData::clear_endoscope_pos() {
  if (GetArenaNoVirtual() == nullptr && endoscope_pos_ != nullptr) {
    delete endoscope_pos_;
  }
  endoscope_pos_ = nullptr;
}
void FusionData::clear_endoscope_euler() {
  if (GetArenaNoVirtual() == nullptr && endoscope_euler_ != nullptr) {
    delete endoscope_euler_;
  }
  endoscope_euler_ = nullptr;
}
void FusionData::clear_tube_pos() {
  if (GetArenaNoVirtual() == nullptr && tube_pos_ != nullptr) {
    delete tube_pos_;
  }
  tube_pos_ = nullptr;
}
void FusionData::clear_tube_euler() {
  if (GetArenaNoVirtual() == nullptr && tube_euler_ != nullptr) {
    delete tube_euler_;
  }
  tube_euler_ = nullptr;
}
void FusionData::clear_offset() {
  if (GetArenaNoVirtual() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
void FusionData::clear_rot_coord() {
  if (GetArenaNoVirtual() == nullptr && rot_coord_ != nullptr) {
    delete rot_coord_;
  }
  rot_coord_ = nullptr;
}
void FusionData::clear_pivot_pos() {
  if (GetArenaNoVirtual() == nullptr && pivot_pos_ != nullptr) {
    delete pivot_pos_;
  }
  pivot_pos_ = nullptr;
}
void FusionData::clear_haptic() {
  if (GetArenaNoVirtual() == nullptr && haptic_ != nullptr) {
    delete haptic_;
  }
  haptic_ = nullptr;
}
void FusionData::clear_soft_tissue() {
  if (GetArenaNoVirtual() == nullptr && soft_tissue_ != nullptr) {
    delete soft_tissue_;
  }
  soft_tissue_ = nullptr;
}
void FusionData::clear_rongeur_pos() {
  if (GetArenaNoVirtual() == nullptr && rongeur_pos_ != nullptr) {
    delete rongeur_pos_;
  }
  rongeur_pos_ = nullptr;
}
void FusionData::clear_rongeur_rot() {
  if (GetArenaNoVirtual() == nullptr && rongeur_rot_ != nullptr) {
    delete rongeur_rot_;
  }
  rongeur_rot_ = nullptr;
}
FusionData::FusionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FusionData.FusionData)
}
FusionData::FusionData(const FusionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_endoscope_pos()) {
    endoscope_pos_ = new ::pb::Coord::Vector3(*from.endoscope_pos_);
  } else {
    endoscope_pos_ = nullptr;
  }
  if (from._internal_has_endoscope_euler()) {
    endoscope_euler_ = new ::pb::Coord::Euler(*from.endoscope_euler_);
  } else {
    endoscope_euler_ = nullptr;
  }
  if (from._internal_has_tube_pos()) {
    tube_pos_ = new ::pb::Coord::Vector3(*from.tube_pos_);
  } else {
    tube_pos_ = nullptr;
  }
  if (from._internal_has_tube_euler()) {
    tube_euler_ = new ::pb::Coord::Euler(*from.tube_euler_);
  } else {
    tube_euler_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::pb::Offset::Offset(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  if (from._internal_has_rot_coord()) {
    rot_coord_ = new ::pb::Coord::Quaternion(*from.rot_coord_);
  } else {
    rot_coord_ = nullptr;
  }
  if (from._internal_has_pivot_pos()) {
    pivot_pos_ = new ::pb::Coord::Vector3(*from.pivot_pos_);
  } else {
    pivot_pos_ = nullptr;
  }
  if (from._internal_has_haptic()) {
    haptic_ = new ::pb::Haptic::Haptic(*from.haptic_);
  } else {
    haptic_ = nullptr;
  }
  if (from._internal_has_soft_tissue()) {
    soft_tissue_ = new ::pb::Tissue::Tissue(*from.soft_tissue_);
  } else {
    soft_tissue_ = nullptr;
  }
  if (from._internal_has_rongeur_pos()) {
    rongeur_pos_ = new ::pb::Coord::Vector3(*from.rongeur_pos_);
  } else {
    rongeur_pos_ = nullptr;
  }
  if (from._internal_has_rongeur_rot()) {
    rongeur_rot_ = new ::pb::Coord::Vector3(*from.rongeur_rot_);
  } else {
    rongeur_rot_ = nullptr;
  }
  ::memcpy(&ablation_count_, &from.ablation_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&nerve_root_dance_) -
    reinterpret_cast<char*>(&ablation_count_)) + sizeof(nerve_root_dance_));
  // @@protoc_insertion_point(copy_constructor:pb.FusionData.FusionData)
}

void FusionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FusionData_fusion_2eproto.base);
  ::memset(&endoscope_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nerve_root_dance_) -
      reinterpret_cast<char*>(&endoscope_pos_)) + sizeof(nerve_root_dance_));
}

FusionData::~FusionData() {
  // @@protoc_insertion_point(destructor:pb.FusionData.FusionData)
  SharedDtor();
}

void FusionData::SharedDtor() {
  if (this != internal_default_instance()) delete endoscope_pos_;
  if (this != internal_default_instance()) delete endoscope_euler_;
  if (this != internal_default_instance()) delete tube_pos_;
  if (this != internal_default_instance()) delete tube_euler_;
  if (this != internal_default_instance()) delete offset_;
  if (this != internal_default_instance()) delete rot_coord_;
  if (this != internal_default_instance()) delete pivot_pos_;
  if (this != internal_default_instance()) delete haptic_;
  if (this != internal_default_instance()) delete soft_tissue_;
  if (this != internal_default_instance()) delete rongeur_pos_;
  if (this != internal_default_instance()) delete rongeur_rot_;
}

void FusionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FusionData& FusionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FusionData_fusion_2eproto.base);
  return *internal_default_instance();
}


void FusionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FusionData.FusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && endoscope_pos_ != nullptr) {
    delete endoscope_pos_;
  }
  endoscope_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && endoscope_euler_ != nullptr) {
    delete endoscope_euler_;
  }
  endoscope_euler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tube_pos_ != nullptr) {
    delete tube_pos_;
  }
  tube_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tube_euler_ != nullptr) {
    delete tube_euler_;
  }
  tube_euler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rot_coord_ != nullptr) {
    delete rot_coord_;
  }
  rot_coord_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pivot_pos_ != nullptr) {
    delete pivot_pos_;
  }
  pivot_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && haptic_ != nullptr) {
    delete haptic_;
  }
  haptic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soft_tissue_ != nullptr) {
    delete soft_tissue_;
  }
  soft_tissue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rongeur_pos_ != nullptr) {
    delete rongeur_pos_;
  }
  rongeur_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rongeur_rot_ != nullptr) {
    delete rongeur_rot_;
  }
  rongeur_rot_ = nullptr;
  ::memset(&ablation_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nerve_root_dance_) -
      reinterpret_cast<char*>(&ablation_count_)) + sizeof(nerve_root_dance_));
  _internal_metadata_.Clear();
}

const char* FusionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Coord.Vector3 endoscope_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_endoscope_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Euler endoscope_euler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endoscope_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Vector3 tube_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tube_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Euler tube_euler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tube_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Offset.Offset offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Quaternion rot_coord = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rot_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Vector3 pivot_pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ablation_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ablation_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .pb.Haptic.Haptic haptic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_haptic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hemostasis_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          hemostasis_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hemostasis_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          hemostasis_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .pb.Tissue.Tissue soft_tissue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_soft_tissue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float nerve_root_dance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          nerve_root_dance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Vector3 rongeur_pos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_rongeur_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Coord.Vector3 rongeur_rot = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_rongeur_rot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FusionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FusionData.FusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Coord.Vector3 endoscope_pos = 1;
  if (this->has_endoscope_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::endoscope_pos(this), target, stream);
  }

  // .pb.Coord.Euler endoscope_euler = 2;
  if (this->has_endoscope_euler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endoscope_euler(this), target, stream);
  }

  // .pb.Coord.Vector3 tube_pos = 3;
  if (this->has_tube_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tube_pos(this), target, stream);
  }

  // .pb.Coord.Euler tube_euler = 4;
  if (this->has_tube_euler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tube_euler(this), target, stream);
  }

  // .pb.Offset.Offset offset = 5;
  if (this->has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::offset(this), target, stream);
  }

  // .pb.Coord.Quaternion rot_coord = 6;
  if (this->has_rot_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rot_coord(this), target, stream);
  }

  // .pb.Coord.Vector3 pivot_pos = 7;
  if (this->has_pivot_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pivot_pos(this), target, stream);
  }

  // float ablation_count = 8;
  if (!(this->ablation_count() <= 0 && this->ablation_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_ablation_count(), target);
  }

  // .pb.Haptic.Haptic haptic = 9;
  if (this->has_haptic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::haptic(this), target, stream);
  }

  // float hemostasis_count = 10;
  if (!(this->hemostasis_count() <= 0 && this->hemostasis_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_hemostasis_count(), target);
  }

  // float hemostasis_index = 11;
  if (!(this->hemostasis_index() <= 0 && this->hemostasis_index() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_hemostasis_index(), target);
  }

  // .pb.Tissue.Tissue soft_tissue = 12;
  if (this->has_soft_tissue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::soft_tissue(this), target, stream);
  }

  // float nerve_root_dance = 13;
  if (!(this->nerve_root_dance() <= 0 && this->nerve_root_dance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_nerve_root_dance(), target);
  }

  // .pb.Coord.Vector3 rongeur_pos = 14;
  if (this->has_rongeur_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::rongeur_pos(this), target, stream);
  }

  // .pb.Coord.Vector3 rongeur_rot = 15;
  if (this->has_rongeur_rot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::rongeur_rot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FusionData.FusionData)
  return target;
}

size_t FusionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FusionData.FusionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Coord.Vector3 endoscope_pos = 1;
  if (this->has_endoscope_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endoscope_pos_);
  }

  // .pb.Coord.Euler endoscope_euler = 2;
  if (this->has_endoscope_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endoscope_euler_);
  }

  // .pb.Coord.Vector3 tube_pos = 3;
  if (this->has_tube_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tube_pos_);
  }

  // .pb.Coord.Euler tube_euler = 4;
  if (this->has_tube_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tube_euler_);
  }

  // .pb.Offset.Offset offset = 5;
  if (this->has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // .pb.Coord.Quaternion rot_coord = 6;
  if (this->has_rot_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rot_coord_);
  }

  // .pb.Coord.Vector3 pivot_pos = 7;
  if (this->has_pivot_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pivot_pos_);
  }

  // .pb.Haptic.Haptic haptic = 9;
  if (this->has_haptic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *haptic_);
  }

  // .pb.Tissue.Tissue soft_tissue = 12;
  if (this->has_soft_tissue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soft_tissue_);
  }

  // .pb.Coord.Vector3 rongeur_pos = 14;
  if (this->has_rongeur_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rongeur_pos_);
  }

  // .pb.Coord.Vector3 rongeur_rot = 15;
  if (this->has_rongeur_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rongeur_rot_);
  }

  // float ablation_count = 8;
  if (!(this->ablation_count() <= 0 && this->ablation_count() >= 0)) {
    total_size += 1 + 4;
  }

  // float hemostasis_count = 10;
  if (!(this->hemostasis_count() <= 0 && this->hemostasis_count() >= 0)) {
    total_size += 1 + 4;
  }

  // float hemostasis_index = 11;
  if (!(this->hemostasis_index() <= 0 && this->hemostasis_index() >= 0)) {
    total_size += 1 + 4;
  }

  // float nerve_root_dance = 13;
  if (!(this->nerve_root_dance() <= 0 && this->nerve_root_dance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FusionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FusionData.FusionData)
  GOOGLE_DCHECK_NE(&from, this);
  const FusionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FusionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FusionData.FusionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FusionData.FusionData)
    MergeFrom(*source);
  }
}

void FusionData::MergeFrom(const FusionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FusionData.FusionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_endoscope_pos()) {
    _internal_mutable_endoscope_pos()->::pb::Coord::Vector3::MergeFrom(from._internal_endoscope_pos());
  }
  if (from.has_endoscope_euler()) {
    _internal_mutable_endoscope_euler()->::pb::Coord::Euler::MergeFrom(from._internal_endoscope_euler());
  }
  if (from.has_tube_pos()) {
    _internal_mutable_tube_pos()->::pb::Coord::Vector3::MergeFrom(from._internal_tube_pos());
  }
  if (from.has_tube_euler()) {
    _internal_mutable_tube_euler()->::pb::Coord::Euler::MergeFrom(from._internal_tube_euler());
  }
  if (from.has_offset()) {
    _internal_mutable_offset()->::pb::Offset::Offset::MergeFrom(from._internal_offset());
  }
  if (from.has_rot_coord()) {
    _internal_mutable_rot_coord()->::pb::Coord::Quaternion::MergeFrom(from._internal_rot_coord());
  }
  if (from.has_pivot_pos()) {
    _internal_mutable_pivot_pos()->::pb::Coord::Vector3::MergeFrom(from._internal_pivot_pos());
  }
  if (from.has_haptic()) {
    _internal_mutable_haptic()->::pb::Haptic::Haptic::MergeFrom(from._internal_haptic());
  }
  if (from.has_soft_tissue()) {
    _internal_mutable_soft_tissue()->::pb::Tissue::Tissue::MergeFrom(from._internal_soft_tissue());
  }
  if (from.has_rongeur_pos()) {
    _internal_mutable_rongeur_pos()->::pb::Coord::Vector3::MergeFrom(from._internal_rongeur_pos());
  }
  if (from.has_rongeur_rot()) {
    _internal_mutable_rongeur_rot()->::pb::Coord::Vector3::MergeFrom(from._internal_rongeur_rot());
  }
  if (!(from.ablation_count() <= 0 && from.ablation_count() >= 0)) {
    _internal_set_ablation_count(from._internal_ablation_count());
  }
  if (!(from.hemostasis_count() <= 0 && from.hemostasis_count() >= 0)) {
    _internal_set_hemostasis_count(from._internal_hemostasis_count());
  }
  if (!(from.hemostasis_index() <= 0 && from.hemostasis_index() >= 0)) {
    _internal_set_hemostasis_index(from._internal_hemostasis_index());
  }
  if (!(from.nerve_root_dance() <= 0 && from.nerve_root_dance() >= 0)) {
    _internal_set_nerve_root_dance(from._internal_nerve_root_dance());
  }
}

void FusionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FusionData.FusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionData::CopyFrom(const FusionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FusionData.FusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionData::IsInitialized() const {
  return true;
}

void FusionData::InternalSwap(FusionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(endoscope_pos_, other->endoscope_pos_);
  swap(endoscope_euler_, other->endoscope_euler_);
  swap(tube_pos_, other->tube_pos_);
  swap(tube_euler_, other->tube_euler_);
  swap(offset_, other->offset_);
  swap(rot_coord_, other->rot_coord_);
  swap(pivot_pos_, other->pivot_pos_);
  swap(haptic_, other->haptic_);
  swap(soft_tissue_, other->soft_tissue_);
  swap(rongeur_pos_, other->rongeur_pos_);
  swap(rongeur_rot_, other->rongeur_rot_);
  swap(ablation_count_, other->ablation_count_);
  swap(hemostasis_count_, other->hemostasis_count_);
  swap(hemostasis_index_, other->hemostasis_index_);
  swap(nerve_root_dance_, other->nerve_root_dance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FusionData
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::FusionData::FusionData* Arena::CreateMaybeMessage< ::pb::FusionData::FusionData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::FusionData::FusionData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
