// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: haptic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_haptic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_haptic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_haptic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_haptic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_haptic_2eproto;
namespace pb {
namespace Haptic {
class Haptic;
class HapticDefaultTypeInternal;
extern HapticDefaultTypeInternal _Haptic_default_instance_;
}  // namespace Haptic
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Haptic::Haptic* Arena::CreateMaybeMessage<::pb::Haptic::Haptic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace Haptic {

// ===================================================================

class Haptic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Haptic.Haptic) */ {
 public:
  Haptic();
  virtual ~Haptic();

  Haptic(const Haptic& from);
  Haptic(Haptic&& from) noexcept
    : Haptic() {
    *this = ::std::move(from);
  }

  inline Haptic& operator=(const Haptic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Haptic& operator=(Haptic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Haptic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Haptic* internal_default_instance() {
    return reinterpret_cast<const Haptic*>(
               &_Haptic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Haptic& a, Haptic& b) {
    a.Swap(&b);
  }
  inline void Swap(Haptic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Haptic* New() const final {
    return CreateMaybeMessage<Haptic>(nullptr);
  }

  Haptic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Haptic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Haptic& from);
  void MergeFrom(const Haptic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Haptic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Haptic.Haptic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haptic_2eproto);
    return ::descriptor_table_haptic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHapticStateFieldNumber = 1,
    kHapticOffsetFieldNumber = 2,
    kHapticForceFieldNumber = 3,
  };
  // float haptic_state = 1;
  void clear_haptic_state();
  float haptic_state() const;
  void set_haptic_state(float value);
  private:
  float _internal_haptic_state() const;
  void _internal_set_haptic_state(float value);
  public:

  // float haptic_offset = 2;
  void clear_haptic_offset();
  float haptic_offset() const;
  void set_haptic_offset(float value);
  private:
  float _internal_haptic_offset() const;
  void _internal_set_haptic_offset(float value);
  public:

  // float haptic_force = 3;
  void clear_haptic_force();
  float haptic_force() const;
  void set_haptic_force(float value);
  private:
  float _internal_haptic_force() const;
  void _internal_set_haptic_force(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Haptic.Haptic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float haptic_state_;
  float haptic_offset_;
  float haptic_force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haptic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Haptic

// float haptic_state = 1;
inline void Haptic::clear_haptic_state() {
  haptic_state_ = 0;
}
inline float Haptic::_internal_haptic_state() const {
  return haptic_state_;
}
inline float Haptic::haptic_state() const {
  // @@protoc_insertion_point(field_get:pb.Haptic.Haptic.haptic_state)
  return _internal_haptic_state();
}
inline void Haptic::_internal_set_haptic_state(float value) {
  
  haptic_state_ = value;
}
inline void Haptic::set_haptic_state(float value) {
  _internal_set_haptic_state(value);
  // @@protoc_insertion_point(field_set:pb.Haptic.Haptic.haptic_state)
}

// float haptic_offset = 2;
inline void Haptic::clear_haptic_offset() {
  haptic_offset_ = 0;
}
inline float Haptic::_internal_haptic_offset() const {
  return haptic_offset_;
}
inline float Haptic::haptic_offset() const {
  // @@protoc_insertion_point(field_get:pb.Haptic.Haptic.haptic_offset)
  return _internal_haptic_offset();
}
inline void Haptic::_internal_set_haptic_offset(float value) {
  
  haptic_offset_ = value;
}
inline void Haptic::set_haptic_offset(float value) {
  _internal_set_haptic_offset(value);
  // @@protoc_insertion_point(field_set:pb.Haptic.Haptic.haptic_offset)
}

// float haptic_force = 3;
inline void Haptic::clear_haptic_force() {
  haptic_force_ = 0;
}
inline float Haptic::_internal_haptic_force() const {
  return haptic_force_;
}
inline float Haptic::haptic_force() const {
  // @@protoc_insertion_point(field_get:pb.Haptic.Haptic.haptic_force)
  return _internal_haptic_force();
}
inline void Haptic::_internal_set_haptic_force(float value) {
  
  haptic_force_ = value;
}
inline void Haptic::set_haptic_force(float value) {
  _internal_set_haptic_force(value);
  // @@protoc_insertion_point(field_set:pb.Haptic.Haptic.haptic_force)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Haptic
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_haptic_2eproto
