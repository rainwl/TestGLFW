// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offset_2eproto;
namespace pb {
namespace Offset {
class Offset;
class OffsetDefaultTypeInternal;
extern OffsetDefaultTypeInternal _Offset_default_instance_;
}  // namespace Offset
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Offset::Offset* Arena::CreateMaybeMessage<::pb::Offset::Offset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace Offset {

// ===================================================================

class Offset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Offset.Offset) */ {
 public:
  Offset();
  virtual ~Offset();

  Offset(const Offset& from);
  Offset(Offset&& from) noexcept
    : Offset() {
    *this = ::std::move(from);
  }

  inline Offset& operator=(const Offset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offset& operator=(Offset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Offset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Offset* internal_default_instance() {
    return reinterpret_cast<const Offset*>(
               &_Offset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Offset& a, Offset& b) {
    a.Swap(&b);
  }
  inline void Swap(Offset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Offset* New() const final {
    return CreateMaybeMessage<Offset>(nullptr);
  }

  Offset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Offset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Offset& from);
  void MergeFrom(const Offset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Offset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Offset.Offset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offset_2eproto);
    return ::descriptor_table_offset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndoscopeOffsetFieldNumber = 1,
    kTubeOffsetFieldNumber = 2,
    kInstrumentSwitchFieldNumber = 3,
    kAnimationValueFieldNumber = 4,
    kPivotOffsetFieldNumber = 5,
  };
  // float endoscope_offset = 1;
  void clear_endoscope_offset();
  float endoscope_offset() const;
  void set_endoscope_offset(float value);
  private:
  float _internal_endoscope_offset() const;
  void _internal_set_endoscope_offset(float value);
  public:

  // float tube_offset = 2;
  void clear_tube_offset();
  float tube_offset() const;
  void set_tube_offset(float value);
  private:
  float _internal_tube_offset() const;
  void _internal_set_tube_offset(float value);
  public:

  // float instrument_switch = 3;
  void clear_instrument_switch();
  float instrument_switch() const;
  void set_instrument_switch(float value);
  private:
  float _internal_instrument_switch() const;
  void _internal_set_instrument_switch(float value);
  public:

  // float animation_value = 4;
  void clear_animation_value();
  float animation_value() const;
  void set_animation_value(float value);
  private:
  float _internal_animation_value() const;
  void _internal_set_animation_value(float value);
  public:

  // float pivot_offset = 5;
  void clear_pivot_offset();
  float pivot_offset() const;
  void set_pivot_offset(float value);
  private:
  float _internal_pivot_offset() const;
  void _internal_set_pivot_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Offset.Offset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float endoscope_offset_;
  float tube_offset_;
  float instrument_switch_;
  float animation_value_;
  float pivot_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Offset

// float endoscope_offset = 1;
inline void Offset::clear_endoscope_offset() {
  endoscope_offset_ = 0;
}
inline float Offset::_internal_endoscope_offset() const {
  return endoscope_offset_;
}
inline float Offset::endoscope_offset() const {
  // @@protoc_insertion_point(field_get:pb.Offset.Offset.endoscope_offset)
  return _internal_endoscope_offset();
}
inline void Offset::_internal_set_endoscope_offset(float value) {
  
  endoscope_offset_ = value;
}
inline void Offset::set_endoscope_offset(float value) {
  _internal_set_endoscope_offset(value);
  // @@protoc_insertion_point(field_set:pb.Offset.Offset.endoscope_offset)
}

// float tube_offset = 2;
inline void Offset::clear_tube_offset() {
  tube_offset_ = 0;
}
inline float Offset::_internal_tube_offset() const {
  return tube_offset_;
}
inline float Offset::tube_offset() const {
  // @@protoc_insertion_point(field_get:pb.Offset.Offset.tube_offset)
  return _internal_tube_offset();
}
inline void Offset::_internal_set_tube_offset(float value) {
  
  tube_offset_ = value;
}
inline void Offset::set_tube_offset(float value) {
  _internal_set_tube_offset(value);
  // @@protoc_insertion_point(field_set:pb.Offset.Offset.tube_offset)
}

// float instrument_switch = 3;
inline void Offset::clear_instrument_switch() {
  instrument_switch_ = 0;
}
inline float Offset::_internal_instrument_switch() const {
  return instrument_switch_;
}
inline float Offset::instrument_switch() const {
  // @@protoc_insertion_point(field_get:pb.Offset.Offset.instrument_switch)
  return _internal_instrument_switch();
}
inline void Offset::_internal_set_instrument_switch(float value) {
  
  instrument_switch_ = value;
}
inline void Offset::set_instrument_switch(float value) {
  _internal_set_instrument_switch(value);
  // @@protoc_insertion_point(field_set:pb.Offset.Offset.instrument_switch)
}

// float animation_value = 4;
inline void Offset::clear_animation_value() {
  animation_value_ = 0;
}
inline float Offset::_internal_animation_value() const {
  return animation_value_;
}
inline float Offset::animation_value() const {
  // @@protoc_insertion_point(field_get:pb.Offset.Offset.animation_value)
  return _internal_animation_value();
}
inline void Offset::_internal_set_animation_value(float value) {
  
  animation_value_ = value;
}
inline void Offset::set_animation_value(float value) {
  _internal_set_animation_value(value);
  // @@protoc_insertion_point(field_set:pb.Offset.Offset.animation_value)
}

// float pivot_offset = 5;
inline void Offset::clear_pivot_offset() {
  pivot_offset_ = 0;
}
inline float Offset::_internal_pivot_offset() const {
  return pivot_offset_;
}
inline float Offset::pivot_offset() const {
  // @@protoc_insertion_point(field_get:pb.Offset.Offset.pivot_offset)
  return _internal_pivot_offset();
}
inline void Offset::_internal_set_pivot_offset(float value) {
  
  pivot_offset_ = value;
}
inline void Offset::set_pivot_offset(float value) {
  _internal_set_pivot_offset(value);
  // @@protoc_insertion_point(field_set:pb.Offset.Offset.pivot_offset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Offset
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offset_2eproto
