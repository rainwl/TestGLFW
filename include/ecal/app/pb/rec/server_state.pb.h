// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/rec/server_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecal/app/pb/rec/client_state.pb.h"
#include "ecal/app/pb/rec/server_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto;
namespace eCAL {
namespace pb {
namespace rec_server {
class ClientJobStatus;
class ClientJobStatusDefaultTypeInternal;
extern ClientJobStatusDefaultTypeInternal _ClientJobStatus_default_instance_;
class ClientStatus;
class ClientStatusDefaultTypeInternal;
extern ClientStatusDefaultTypeInternal _ClientStatus_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Measurement_ClientJobStatusesEntry_DoNotUse;
class Measurement_ClientJobStatusesEntry_DoNotUseDefaultTypeInternal;
extern Measurement_ClientJobStatusesEntry_DoNotUseDefaultTypeInternal _Measurement_ClientJobStatusesEntry_DoNotUse_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Status_ClientStatusesEntry_DoNotUse;
class Status_ClientStatusesEntry_DoNotUseDefaultTypeInternal;
extern Status_ClientStatusesEntry_DoNotUseDefaultTypeInternal _Status_ClientStatusesEntry_DoNotUse_default_instance_;
}  // namespace rec_server
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::rec_server::ClientJobStatus* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::ClientJobStatus>(Arena*);
template<> ::eCAL::pb::rec_server::ClientStatus* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::ClientStatus>(Arena*);
template<> ::eCAL::pb::rec_server::Measurement* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::Measurement>(Arena*);
template<> ::eCAL::pb::rec_server::Measurement_ClientJobStatusesEntry_DoNotUse* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::Measurement_ClientJobStatusesEntry_DoNotUse>(Arena*);
template<> ::eCAL::pb::rec_server::Status* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::Status>(Arena*);
template<> ::eCAL::pb::rec_server::Status_ClientStatusesEntry_DoNotUse* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::Status_ClientStatusesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace rec_server {

// ===================================================================

class ClientJobStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.ClientJobStatus) */ {
 public:
  ClientJobStatus();
  virtual ~ClientJobStatus();

  ClientJobStatus(const ClientJobStatus& from);
  ClientJobStatus(ClientJobStatus&& from) noexcept
    : ClientJobStatus() {
    *this = ::std::move(from);
  }

  inline ClientJobStatus& operator=(const ClientJobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientJobStatus& operator=(ClientJobStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientJobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientJobStatus* internal_default_instance() {
    return reinterpret_cast<const ClientJobStatus*>(
               &_ClientJobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientJobStatus& a, ClientJobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientJobStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientJobStatus* New() const final {
    return CreateMaybeMessage<ClientJobStatus>(nullptr);
  }

  ClientJobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientJobStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientJobStatus& from);
  void MergeFrom(const ClientJobStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientJobStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.ClientJobStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastCommandResponseMessageFieldNumber = 4,
    kJobStatusFieldNumber = 2,
    kClientPidFieldNumber = 1,
    kLastCommandResponseOkFieldNumber = 3,
  };
  // string last_command_response_message = 4;
  void clear_last_command_response_message();
  const std::string& last_command_response_message() const;
  void set_last_command_response_message(const std::string& value);
  void set_last_command_response_message(std::string&& value);
  void set_last_command_response_message(const char* value);
  void set_last_command_response_message(const char* value, size_t size);
  std::string* mutable_last_command_response_message();
  std::string* release_last_command_response_message();
  void set_allocated_last_command_response_message(std::string* last_command_response_message);
  private:
  const std::string& _internal_last_command_response_message() const;
  void _internal_set_last_command_response_message(const std::string& value);
  std::string* _internal_mutable_last_command_response_message();
  public:

  // .eCAL.pb.rec_client.State.JobStatus job_status = 2;
  bool has_job_status() const;
  private:
  bool _internal_has_job_status() const;
  public:
  void clear_job_status();
  const ::eCAL::pb::rec_client::State_JobStatus& job_status() const;
  ::eCAL::pb::rec_client::State_JobStatus* release_job_status();
  ::eCAL::pb::rec_client::State_JobStatus* mutable_job_status();
  void set_allocated_job_status(::eCAL::pb::rec_client::State_JobStatus* job_status);
  private:
  const ::eCAL::pb::rec_client::State_JobStatus& _internal_job_status() const;
  ::eCAL::pb::rec_client::State_JobStatus* _internal_mutable_job_status();
  public:

  // int32 client_pid = 1;
  void clear_client_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 client_pid() const;
  void set_client_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_pid() const;
  void _internal_set_client_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool last_command_response_ok = 3;
  void clear_last_command_response_ok();
  bool last_command_response_ok() const;
  void set_last_command_response_ok(bool value);
  private:
  bool _internal_last_command_response_ok() const;
  void _internal_set_last_command_response_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.ClientJobStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_command_response_message_;
  ::eCAL::pb::rec_client::State_JobStatus* job_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_pid_;
  bool last_command_response_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ClientStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.ClientStatus) */ {
 public:
  ClientStatus();
  virtual ~ClientStatus();

  ClientStatus(const ClientStatus& from);
  ClientStatus(ClientStatus&& from) noexcept
    : ClientStatus() {
    *this = ::std::move(from);
  }

  inline ClientStatus& operator=(const ClientStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStatus& operator=(ClientStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatus* internal_default_instance() {
    return reinterpret_cast<const ClientStatus*>(
               &_ClientStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientStatus& a, ClientStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientStatus* New() const final {
    return CreateMaybeMessage<ClientStatus>(nullptr);
  }

  ClientStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStatus& from);
  void MergeFrom(const ClientStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.ClientStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientStatusFieldNumber = 1,
    kServerTimestampOfStatusFieldNumber = 2,
  };
  // .eCAL.pb.rec_client.State client_status = 1;
  bool has_client_status() const;
  private:
  bool _internal_has_client_status() const;
  public:
  void clear_client_status();
  const ::eCAL::pb::rec_client::State& client_status() const;
  ::eCAL::pb::rec_client::State* release_client_status();
  ::eCAL::pb::rec_client::State* mutable_client_status();
  void set_allocated_client_status(::eCAL::pb::rec_client::State* client_status);
  private:
  const ::eCAL::pb::rec_client::State& _internal_client_status() const;
  ::eCAL::pb::rec_client::State* _internal_mutable_client_status();
  public:

  // int64 server_timestamp_of_status = 2;
  void clear_server_timestamp_of_status();
  ::PROTOBUF_NAMESPACE_ID::int64 server_timestamp_of_status() const;
  void set_server_timestamp_of_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_timestamp_of_status() const;
  void _internal_set_server_timestamp_of_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.ClientStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eCAL::pb::rec_client::State* client_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_timestamp_of_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto;
};
// -------------------------------------------------------------------

class Measurement_ClientJobStatusesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Measurement_ClientJobStatusesEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_server::ClientJobStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Measurement_ClientJobStatusesEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_server::ClientJobStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Measurement_ClientJobStatusesEntry_DoNotUse();
  Measurement_ClientJobStatusesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Measurement_ClientJobStatusesEntry_DoNotUse& other);
  static const Measurement_ClientJobStatusesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Measurement_ClientJobStatusesEntry_DoNotUse*>(&_Measurement_ClientJobStatusesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.rec_server.Measurement.ClientJobStatusesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Measurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Measurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }
  inline void Swap(Measurement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const final {
    return CreateMaybeMessage<Measurement>(nullptr);
  }

  Measurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.Measurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClientJobStatusesFieldNumber = 6,
    kLocalNameFieldNumber = 3,
    kLocalMeasPathFieldNumber = 4,
    kUploadConfigFieldNumber = 8,
    kIdFieldNumber = 1,
    kLocalTimestampNsecsFieldNumber = 2,
    kIsDeletedFieldNumber = 5,
    kIsUploadedFieldNumber = 7,
    kCanUploadFieldNumber = 9,
    kCanCommentFieldNumber = 10,
  };
  // map<string, .eCAL.pb.rec_server.ClientJobStatus> client_job_statuses = 6;
  int client_job_statuses_size() const;
  private:
  int _internal_client_job_statuses_size() const;
  public:
  void clear_client_job_statuses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >&
      _internal_client_job_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >*
      _internal_mutable_client_job_statuses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >&
      client_job_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >*
      mutable_client_job_statuses();

  // string local_name = 3;
  void clear_local_name();
  const std::string& local_name() const;
  void set_local_name(const std::string& value);
  void set_local_name(std::string&& value);
  void set_local_name(const char* value);
  void set_local_name(const char* value, size_t size);
  std::string* mutable_local_name();
  std::string* release_local_name();
  void set_allocated_local_name(std::string* local_name);
  private:
  const std::string& _internal_local_name() const;
  void _internal_set_local_name(const std::string& value);
  std::string* _internal_mutable_local_name();
  public:

  // string local_meas_path = 4;
  void clear_local_meas_path();
  const std::string& local_meas_path() const;
  void set_local_meas_path(const std::string& value);
  void set_local_meas_path(std::string&& value);
  void set_local_meas_path(const char* value);
  void set_local_meas_path(const char* value, size_t size);
  std::string* mutable_local_meas_path();
  std::string* release_local_meas_path();
  void set_allocated_local_meas_path(std::string* local_meas_path);
  private:
  const std::string& _internal_local_meas_path() const;
  void _internal_set_local_meas_path(const std::string& value);
  std::string* _internal_mutable_local_meas_path();
  public:

  // .eCAL.pb.rec_server.UploadConfig upload_config = 8;
  bool has_upload_config() const;
  private:
  bool _internal_has_upload_config() const;
  public:
  void clear_upload_config();
  const ::eCAL::pb::rec_server::UploadConfig& upload_config() const;
  ::eCAL::pb::rec_server::UploadConfig* release_upload_config();
  ::eCAL::pb::rec_server::UploadConfig* mutable_upload_config();
  void set_allocated_upload_config(::eCAL::pb::rec_server::UploadConfig* upload_config);
  private:
  const ::eCAL::pb::rec_server::UploadConfig& _internal_upload_config() const;
  ::eCAL::pb::rec_server::UploadConfig* _internal_mutable_upload_config();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 local_timestamp_nsecs = 2;
  void clear_local_timestamp_nsecs();
  ::PROTOBUF_NAMESPACE_ID::int64 local_timestamp_nsecs() const;
  void set_local_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_timestamp_nsecs() const;
  void _internal_set_local_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_deleted = 5;
  void clear_is_deleted();
  bool is_deleted() const;
  void set_is_deleted(bool value);
  private:
  bool _internal_is_deleted() const;
  void _internal_set_is_deleted(bool value);
  public:

  // bool is_uploaded = 7;
  void clear_is_uploaded();
  bool is_uploaded() const;
  void set_is_uploaded(bool value);
  private:
  bool _internal_is_uploaded() const;
  void _internal_set_is_uploaded(bool value);
  public:

  // bool can_upload = 9;
  void clear_can_upload();
  bool can_upload() const;
  void set_can_upload(bool value);
  private:
  bool _internal_can_upload() const;
  void _internal_set_can_upload(bool value);
  public:

  // bool can_comment = 10;
  void clear_can_comment();
  bool can_comment() const;
  void set_can_comment(bool value);
  private:
  bool _internal_can_comment() const;
  void _internal_set_can_comment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.Measurement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Measurement_ClientJobStatusesEntry_DoNotUse,
      std::string, ::eCAL::pb::rec_server::ClientJobStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > client_job_statuses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_meas_path_;
  ::eCAL::pb::rec_server::UploadConfig* upload_config_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_timestamp_nsecs_;
  bool is_deleted_;
  bool is_uploaded_;
  bool can_upload_;
  bool can_comment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto;
};
// -------------------------------------------------------------------

class Status_ClientStatusesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Status_ClientStatusesEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_server::ClientStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Status_ClientStatusesEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_server::ClientStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Status_ClientStatusesEntry_DoNotUse();
  Status_ClientStatusesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Status_ClientStatusesEntry_DoNotUse& other);
  static const Status_ClientStatusesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Status_ClientStatusesEntry_DoNotUse*>(&_Status_ClientStatusesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.rec_server.Status.ClientStatusesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.Status";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementHistoryFieldNumber = 4,
    kClientStatusesFieldNumber = 5,
    kConfigPathFieldNumber = 1,
    kRecordingMeasIdFieldNumber = 3,
    kActivatedFieldNumber = 2,
  };
  // repeated .eCAL.pb.rec_server.Measurement measurement_history = 4;
  int measurement_history_size() const;
  private:
  int _internal_measurement_history_size() const;
  public:
  void clear_measurement_history();
  ::eCAL::pb::rec_server::Measurement* mutable_measurement_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_server::Measurement >*
      mutable_measurement_history();
  private:
  const ::eCAL::pb::rec_server::Measurement& _internal_measurement_history(int index) const;
  ::eCAL::pb::rec_server::Measurement* _internal_add_measurement_history();
  public:
  const ::eCAL::pb::rec_server::Measurement& measurement_history(int index) const;
  ::eCAL::pb::rec_server::Measurement* add_measurement_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_server::Measurement >&
      measurement_history() const;

  // map<string, .eCAL.pb.rec_server.ClientStatus> client_statuses = 5;
  int client_statuses_size() const;
  private:
  int _internal_client_statuses_size() const;
  public:
  void clear_client_statuses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >&
      _internal_client_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >*
      _internal_mutable_client_statuses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >&
      client_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >*
      mutable_client_statuses();

  // string config_path = 1;
  void clear_config_path();
  const std::string& config_path() const;
  void set_config_path(const std::string& value);
  void set_config_path(std::string&& value);
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  std::string* mutable_config_path();
  std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // int64 recording_meas_id = 3;
  void clear_recording_meas_id();
  ::PROTOBUF_NAMESPACE_ID::int64 recording_meas_id() const;
  void set_recording_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_recording_meas_id() const;
  void _internal_set_recording_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool activated = 2;
  void clear_activated();
  bool activated() const;
  void set_activated(bool value);
  private:
  bool _internal_activated() const;
  void _internal_set_activated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_server::Measurement > measurement_history_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Status_ClientStatusesEntry_DoNotUse,
      std::string, ::eCAL::pb::rec_server::ClientStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > client_statuses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 recording_meas_id_;
  bool activated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientJobStatus

// int32 client_pid = 1;
inline void ClientJobStatus::clear_client_pid() {
  client_pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientJobStatus::_internal_client_pid() const {
  return client_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientJobStatus::client_pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ClientJobStatus.client_pid)
  return _internal_client_pid();
}
inline void ClientJobStatus::_internal_set_client_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_pid_ = value;
}
inline void ClientJobStatus::set_client_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.ClientJobStatus.client_pid)
}

// .eCAL.pb.rec_client.State.JobStatus job_status = 2;
inline bool ClientJobStatus::_internal_has_job_status() const {
  return this != internal_default_instance() && job_status_ != nullptr;
}
inline bool ClientJobStatus::has_job_status() const {
  return _internal_has_job_status();
}
inline const ::eCAL::pb::rec_client::State_JobStatus& ClientJobStatus::_internal_job_status() const {
  const ::eCAL::pb::rec_client::State_JobStatus* p = job_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::State_JobStatus*>(
      &::eCAL::pb::rec_client::_State_JobStatus_default_instance_);
}
inline const ::eCAL::pb::rec_client::State_JobStatus& ClientJobStatus::job_status() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ClientJobStatus.job_status)
  return _internal_job_status();
}
inline ::eCAL::pb::rec_client::State_JobStatus* ClientJobStatus::release_job_status() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.ClientJobStatus.job_status)
  
  ::eCAL::pb::rec_client::State_JobStatus* temp = job_status_;
  job_status_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::State_JobStatus* ClientJobStatus::_internal_mutable_job_status() {
  
  if (job_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::State_JobStatus>(GetArenaNoVirtual());
    job_status_ = p;
  }
  return job_status_;
}
inline ::eCAL::pb::rec_client::State_JobStatus* ClientJobStatus::mutable_job_status() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.ClientJobStatus.job_status)
  return _internal_mutable_job_status();
}
inline void ClientJobStatus::set_allocated_job_status(::eCAL::pb::rec_client::State_JobStatus* job_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_status_);
  }
  if (job_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_status, submessage_arena);
    }
    
  } else {
    
  }
  job_status_ = job_status;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.ClientJobStatus.job_status)
}

// bool last_command_response_ok = 3;
inline void ClientJobStatus::clear_last_command_response_ok() {
  last_command_response_ok_ = false;
}
inline bool ClientJobStatus::_internal_last_command_response_ok() const {
  return last_command_response_ok_;
}
inline bool ClientJobStatus::last_command_response_ok() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ClientJobStatus.last_command_response_ok)
  return _internal_last_command_response_ok();
}
inline void ClientJobStatus::_internal_set_last_command_response_ok(bool value) {
  
  last_command_response_ok_ = value;
}
inline void ClientJobStatus::set_last_command_response_ok(bool value) {
  _internal_set_last_command_response_ok(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.ClientJobStatus.last_command_response_ok)
}

// string last_command_response_message = 4;
inline void ClientJobStatus::clear_last_command_response_message() {
  last_command_response_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientJobStatus::last_command_response_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
  return _internal_last_command_response_message();
}
inline void ClientJobStatus::set_last_command_response_message(const std::string& value) {
  _internal_set_last_command_response_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
}
inline std::string* ClientJobStatus::mutable_last_command_response_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
  return _internal_mutable_last_command_response_message();
}
inline const std::string& ClientJobStatus::_internal_last_command_response_message() const {
  return last_command_response_message_.GetNoArena();
}
inline void ClientJobStatus::_internal_set_last_command_response_message(const std::string& value) {
  
  last_command_response_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientJobStatus::set_last_command_response_message(std::string&& value) {
  
  last_command_response_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
}
inline void ClientJobStatus::set_last_command_response_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_command_response_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
}
inline void ClientJobStatus::set_last_command_response_message(const char* value, size_t size) {
  
  last_command_response_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
}
inline std::string* ClientJobStatus::_internal_mutable_last_command_response_message() {
  
  return last_command_response_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientJobStatus::release_last_command_response_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
  
  return last_command_response_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientJobStatus::set_allocated_last_command_response_message(std::string* last_command_response_message) {
  if (last_command_response_message != nullptr) {
    
  } else {
    
  }
  last_command_response_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_command_response_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.ClientJobStatus.last_command_response_message)
}

// -------------------------------------------------------------------

// ClientStatus

// .eCAL.pb.rec_client.State client_status = 1;
inline bool ClientStatus::_internal_has_client_status() const {
  return this != internal_default_instance() && client_status_ != nullptr;
}
inline bool ClientStatus::has_client_status() const {
  return _internal_has_client_status();
}
inline const ::eCAL::pb::rec_client::State& ClientStatus::_internal_client_status() const {
  const ::eCAL::pb::rec_client::State* p = client_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::State*>(
      &::eCAL::pb::rec_client::_State_default_instance_);
}
inline const ::eCAL::pb::rec_client::State& ClientStatus::client_status() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ClientStatus.client_status)
  return _internal_client_status();
}
inline ::eCAL::pb::rec_client::State* ClientStatus::release_client_status() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.ClientStatus.client_status)
  
  ::eCAL::pb::rec_client::State* temp = client_status_;
  client_status_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::State* ClientStatus::_internal_mutable_client_status() {
  
  if (client_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::State>(GetArenaNoVirtual());
    client_status_ = p;
  }
  return client_status_;
}
inline ::eCAL::pb::rec_client::State* ClientStatus::mutable_client_status() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.ClientStatus.client_status)
  return _internal_mutable_client_status();
}
inline void ClientStatus::set_allocated_client_status(::eCAL::pb::rec_client::State* client_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_status_);
  }
  if (client_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_status, submessage_arena);
    }
    
  } else {
    
  }
  client_status_ = client_status;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.ClientStatus.client_status)
}

// int64 server_timestamp_of_status = 2;
inline void ClientStatus::clear_server_timestamp_of_status() {
  server_timestamp_of_status_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStatus::_internal_server_timestamp_of_status() const {
  return server_timestamp_of_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStatus::server_timestamp_of_status() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ClientStatus.server_timestamp_of_status)
  return _internal_server_timestamp_of_status();
}
inline void ClientStatus::_internal_set_server_timestamp_of_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_timestamp_of_status_ = value;
}
inline void ClientStatus::set_server_timestamp_of_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_timestamp_of_status(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.ClientStatus.server_timestamp_of_status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Measurement

// int64 id = 1;
inline void Measurement::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Measurement::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Measurement::id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.id)
  return _internal_id();
}
inline void Measurement::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Measurement::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.id)
}

// int64 local_timestamp_nsecs = 2;
inline void Measurement::clear_local_timestamp_nsecs() {
  local_timestamp_nsecs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Measurement::_internal_local_timestamp_nsecs() const {
  return local_timestamp_nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Measurement::local_timestamp_nsecs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.local_timestamp_nsecs)
  return _internal_local_timestamp_nsecs();
}
inline void Measurement::_internal_set_local_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  local_timestamp_nsecs_ = value;
}
inline void Measurement::set_local_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_timestamp_nsecs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.local_timestamp_nsecs)
}

// string local_name = 3;
inline void Measurement::clear_local_name() {
  local_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measurement::local_name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.local_name)
  return _internal_local_name();
}
inline void Measurement::set_local_name(const std::string& value) {
  _internal_set_local_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.local_name)
}
inline std::string* Measurement::mutable_local_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.Measurement.local_name)
  return _internal_mutable_local_name();
}
inline const std::string& Measurement::_internal_local_name() const {
  return local_name_.GetNoArena();
}
inline void Measurement::_internal_set_local_name(const std::string& value) {
  
  local_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measurement::set_local_name(std::string&& value) {
  
  local_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.Measurement.local_name)
}
inline void Measurement::set_local_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.Measurement.local_name)
}
inline void Measurement::set_local_name(const char* value, size_t size) {
  
  local_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.Measurement.local_name)
}
inline std::string* Measurement::_internal_mutable_local_name() {
  
  return local_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measurement::release_local_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.Measurement.local_name)
  
  return local_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_local_name(std::string* local_name) {
  if (local_name != nullptr) {
    
  } else {
    
  }
  local_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.Measurement.local_name)
}

// string local_meas_path = 4;
inline void Measurement::clear_local_meas_path() {
  local_meas_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measurement::local_meas_path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.local_meas_path)
  return _internal_local_meas_path();
}
inline void Measurement::set_local_meas_path(const std::string& value) {
  _internal_set_local_meas_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.local_meas_path)
}
inline std::string* Measurement::mutable_local_meas_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.Measurement.local_meas_path)
  return _internal_mutable_local_meas_path();
}
inline const std::string& Measurement::_internal_local_meas_path() const {
  return local_meas_path_.GetNoArena();
}
inline void Measurement::_internal_set_local_meas_path(const std::string& value) {
  
  local_meas_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measurement::set_local_meas_path(std::string&& value) {
  
  local_meas_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.Measurement.local_meas_path)
}
inline void Measurement::set_local_meas_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_meas_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.Measurement.local_meas_path)
}
inline void Measurement::set_local_meas_path(const char* value, size_t size) {
  
  local_meas_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.Measurement.local_meas_path)
}
inline std::string* Measurement::_internal_mutable_local_meas_path() {
  
  return local_meas_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measurement::release_local_meas_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.Measurement.local_meas_path)
  
  return local_meas_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_local_meas_path(std::string* local_meas_path) {
  if (local_meas_path != nullptr) {
    
  } else {
    
  }
  local_meas_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_meas_path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.Measurement.local_meas_path)
}

// bool is_deleted = 5;
inline void Measurement::clear_is_deleted() {
  is_deleted_ = false;
}
inline bool Measurement::_internal_is_deleted() const {
  return is_deleted_;
}
inline bool Measurement::is_deleted() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.is_deleted)
  return _internal_is_deleted();
}
inline void Measurement::_internal_set_is_deleted(bool value) {
  
  is_deleted_ = value;
}
inline void Measurement::set_is_deleted(bool value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.is_deleted)
}

// map<string, .eCAL.pb.rec_server.ClientJobStatus> client_job_statuses = 6;
inline int Measurement::_internal_client_job_statuses_size() const {
  return client_job_statuses_.size();
}
inline int Measurement::client_job_statuses_size() const {
  return _internal_client_job_statuses_size();
}
inline void Measurement::clear_client_job_statuses() {
  client_job_statuses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >&
Measurement::_internal_client_job_statuses() const {
  return client_job_statuses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >&
Measurement::client_job_statuses() const {
  // @@protoc_insertion_point(field_map:eCAL.pb.rec_server.Measurement.client_job_statuses)
  return _internal_client_job_statuses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >*
Measurement::_internal_mutable_client_job_statuses() {
  return client_job_statuses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientJobStatus >*
Measurement::mutable_client_job_statuses() {
  // @@protoc_insertion_point(field_mutable_map:eCAL.pb.rec_server.Measurement.client_job_statuses)
  return _internal_mutable_client_job_statuses();
}

// bool is_uploaded = 7;
inline void Measurement::clear_is_uploaded() {
  is_uploaded_ = false;
}
inline bool Measurement::_internal_is_uploaded() const {
  return is_uploaded_;
}
inline bool Measurement::is_uploaded() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.is_uploaded)
  return _internal_is_uploaded();
}
inline void Measurement::_internal_set_is_uploaded(bool value) {
  
  is_uploaded_ = value;
}
inline void Measurement::set_is_uploaded(bool value) {
  _internal_set_is_uploaded(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.is_uploaded)
}

// .eCAL.pb.rec_server.UploadConfig upload_config = 8;
inline bool Measurement::_internal_has_upload_config() const {
  return this != internal_default_instance() && upload_config_ != nullptr;
}
inline bool Measurement::has_upload_config() const {
  return _internal_has_upload_config();
}
inline const ::eCAL::pb::rec_server::UploadConfig& Measurement::_internal_upload_config() const {
  const ::eCAL::pb::rec_server::UploadConfig* p = upload_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_server::UploadConfig*>(
      &::eCAL::pb::rec_server::_UploadConfig_default_instance_);
}
inline const ::eCAL::pb::rec_server::UploadConfig& Measurement::upload_config() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.upload_config)
  return _internal_upload_config();
}
inline ::eCAL::pb::rec_server::UploadConfig* Measurement::release_upload_config() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.Measurement.upload_config)
  
  ::eCAL::pb::rec_server::UploadConfig* temp = upload_config_;
  upload_config_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_server::UploadConfig* Measurement::_internal_mutable_upload_config() {
  
  if (upload_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_server::UploadConfig>(GetArenaNoVirtual());
    upload_config_ = p;
  }
  return upload_config_;
}
inline ::eCAL::pb::rec_server::UploadConfig* Measurement::mutable_upload_config() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.Measurement.upload_config)
  return _internal_mutable_upload_config();
}
inline void Measurement::set_allocated_upload_config(::eCAL::pb::rec_server::UploadConfig* upload_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(upload_config_);
  }
  if (upload_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_config, submessage_arena);
    }
    
  } else {
    
  }
  upload_config_ = upload_config;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.Measurement.upload_config)
}

// bool can_upload = 9;
inline void Measurement::clear_can_upload() {
  can_upload_ = false;
}
inline bool Measurement::_internal_can_upload() const {
  return can_upload_;
}
inline bool Measurement::can_upload() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.can_upload)
  return _internal_can_upload();
}
inline void Measurement::_internal_set_can_upload(bool value) {
  
  can_upload_ = value;
}
inline void Measurement::set_can_upload(bool value) {
  _internal_set_can_upload(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.can_upload)
}

// bool can_comment = 10;
inline void Measurement::clear_can_comment() {
  can_comment_ = false;
}
inline bool Measurement::_internal_can_comment() const {
  return can_comment_;
}
inline bool Measurement::can_comment() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Measurement.can_comment)
  return _internal_can_comment();
}
inline void Measurement::_internal_set_can_comment(bool value) {
  
  can_comment_ = value;
}
inline void Measurement::set_can_comment(bool value) {
  _internal_set_can_comment(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Measurement.can_comment)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Status

// string config_path = 1;
inline void Status::clear_config_path() {
  config_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Status::config_path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Status.config_path)
  return _internal_config_path();
}
inline void Status::set_config_path(const std::string& value) {
  _internal_set_config_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Status.config_path)
}
inline std::string* Status::mutable_config_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.Status.config_path)
  return _internal_mutable_config_path();
}
inline const std::string& Status::_internal_config_path() const {
  return config_path_.GetNoArena();
}
inline void Status::_internal_set_config_path(const std::string& value) {
  
  config_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Status::set_config_path(std::string&& value) {
  
  config_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.Status.config_path)
}
inline void Status::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.Status.config_path)
}
inline void Status::set_config_path(const char* value, size_t size) {
  
  config_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.Status.config_path)
}
inline std::string* Status::_internal_mutable_config_path() {
  
  return config_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Status::release_config_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.Status.config_path)
  
  return config_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.Status.config_path)
}

// bool activated = 2;
inline void Status::clear_activated() {
  activated_ = false;
}
inline bool Status::_internal_activated() const {
  return activated_;
}
inline bool Status::activated() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Status.activated)
  return _internal_activated();
}
inline void Status::_internal_set_activated(bool value) {
  
  activated_ = value;
}
inline void Status::set_activated(bool value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Status.activated)
}

// int64 recording_meas_id = 3;
inline void Status::clear_recording_meas_id() {
  recording_meas_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Status::_internal_recording_meas_id() const {
  return recording_meas_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Status::recording_meas_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Status.recording_meas_id)
  return _internal_recording_meas_id();
}
inline void Status::_internal_set_recording_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  recording_meas_id_ = value;
}
inline void Status::set_recording_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_recording_meas_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.Status.recording_meas_id)
}

// repeated .eCAL.pb.rec_server.Measurement measurement_history = 4;
inline int Status::_internal_measurement_history_size() const {
  return measurement_history_.size();
}
inline int Status::measurement_history_size() const {
  return _internal_measurement_history_size();
}
inline void Status::clear_measurement_history() {
  measurement_history_.Clear();
}
inline ::eCAL::pb::rec_server::Measurement* Status::mutable_measurement_history(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.Status.measurement_history)
  return measurement_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_server::Measurement >*
Status::mutable_measurement_history() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_server.Status.measurement_history)
  return &measurement_history_;
}
inline const ::eCAL::pb::rec_server::Measurement& Status::_internal_measurement_history(int index) const {
  return measurement_history_.Get(index);
}
inline const ::eCAL::pb::rec_server::Measurement& Status::measurement_history(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.Status.measurement_history)
  return _internal_measurement_history(index);
}
inline ::eCAL::pb::rec_server::Measurement* Status::_internal_add_measurement_history() {
  return measurement_history_.Add();
}
inline ::eCAL::pb::rec_server::Measurement* Status::add_measurement_history() {
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.Status.measurement_history)
  return _internal_add_measurement_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_server::Measurement >&
Status::measurement_history() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_server.Status.measurement_history)
  return measurement_history_;
}

// map<string, .eCAL.pb.rec_server.ClientStatus> client_statuses = 5;
inline int Status::_internal_client_statuses_size() const {
  return client_statuses_.size();
}
inline int Status::client_statuses_size() const {
  return _internal_client_statuses_size();
}
inline void Status::clear_client_statuses() {
  client_statuses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >&
Status::_internal_client_statuses() const {
  return client_statuses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >&
Status::client_statuses() const {
  // @@protoc_insertion_point(field_map:eCAL.pb.rec_server.Status.client_statuses)
  return _internal_client_statuses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >*
Status::_internal_mutable_client_statuses() {
  return client_statuses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::ClientStatus >*
Status::mutable_client_statuses() {
  // @@protoc_insertion_point(field_mutable_map:eCAL.pb.rec_server.Status.client_statuses)
  return _internal_mutable_client_statuses();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rec_server
}  // namespace pb
}  // namespace eCAL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fstate_2eproto
