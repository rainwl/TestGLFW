// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/rec/client_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
namespace eCAL {
namespace pb {
namespace rec_client {
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_JobStatus;
class State_JobStatusDefaultTypeInternal;
extern State_JobStatusDefaultTypeInternal _State_JobStatus_default_instance_;
class State_JobStatus_RecAddonStatusesEntry_DoNotUse;
class State_JobStatus_RecAddonStatusesEntry_DoNotUseDefaultTypeInternal;
extern State_JobStatus_RecAddonStatusesEntry_DoNotUseDefaultTypeInternal _State_JobStatus_RecAddonStatusesEntry_DoNotUse_default_instance_;
class State_RecAddonJobStatus;
class State_RecAddonJobStatusDefaultTypeInternal;
extern State_RecAddonJobStatusDefaultTypeInternal _State_RecAddonJobStatus_default_instance_;
class State_RecHdf5Status;
class State_RecHdf5StatusDefaultTypeInternal;
extern State_RecHdf5StatusDefaultTypeInternal _State_RecHdf5Status_default_instance_;
class State_RecorderAddonStatus;
class State_RecorderAddonStatusDefaultTypeInternal;
extern State_RecorderAddonStatusDefaultTypeInternal _State_RecorderAddonStatus_default_instance_;
class State_UploadStatus;
class State_UploadStatusDefaultTypeInternal;
extern State_UploadStatusDefaultTypeInternal _State_UploadStatus_default_instance_;
}  // namespace rec_client
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::rec_client::State* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State>(Arena*);
template<> ::eCAL::pb::rec_client::State_JobStatus* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State_JobStatus>(Arena*);
template<> ::eCAL::pb::rec_client::State_JobStatus_RecAddonStatusesEntry_DoNotUse* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State_JobStatus_RecAddonStatusesEntry_DoNotUse>(Arena*);
template<> ::eCAL::pb::rec_client::State_RecAddonJobStatus* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State_RecAddonJobStatus>(Arena*);
template<> ::eCAL::pb::rec_client::State_RecHdf5Status* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State_RecHdf5Status>(Arena*);
template<> ::eCAL::pb::rec_client::State_RecorderAddonStatus* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State_RecorderAddonStatus>(Arena*);
template<> ::eCAL::pb::rec_client::State_UploadStatus* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::State_UploadStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace rec_client {

enum State_RecAddonJobStatus_State : int {
  State_RecAddonJobStatus_State_NotStarted = 0,
  State_RecAddonJobStatus_State_Recording = 1,
  State_RecAddonJobStatus_State_Flushing = 2,
  State_RecAddonJobStatus_State_FinishedFlushing = 3,
  State_RecAddonJobStatus_State_State_RecAddonJobStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  State_RecAddonJobStatus_State_State_RecAddonJobStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool State_RecAddonJobStatus_State_IsValid(int value);
constexpr State_RecAddonJobStatus_State State_RecAddonJobStatus_State_State_MIN = State_RecAddonJobStatus_State_NotStarted;
constexpr State_RecAddonJobStatus_State State_RecAddonJobStatus_State_State_MAX = State_RecAddonJobStatus_State_FinishedFlushing;
constexpr int State_RecAddonJobStatus_State_State_ARRAYSIZE = State_RecAddonJobStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_RecAddonJobStatus_State_descriptor();
template<typename T>
inline const std::string& State_RecAddonJobStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, State_RecAddonJobStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function State_RecAddonJobStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    State_RecAddonJobStatus_State_descriptor(), enum_t_value);
}
inline bool State_RecAddonJobStatus_State_Parse(
    const std::string& name, State_RecAddonJobStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State_RecAddonJobStatus_State>(
    State_RecAddonJobStatus_State_descriptor(), name, value);
}
enum State_JobState : int {
  State_JobState_NotStarted = 0,
  State_JobState_Recording = 1,
  State_JobState_Flushing = 2,
  State_JobState_FinishedFlushing = 3,
  State_JobState_Uploading = 4,
  State_JobState_FinishedUploading = 5,
  State_JobState_State_JobState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  State_JobState_State_JobState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool State_JobState_IsValid(int value);
constexpr State_JobState State_JobState_JobState_MIN = State_JobState_NotStarted;
constexpr State_JobState State_JobState_JobState_MAX = State_JobState_FinishedUploading;
constexpr int State_JobState_JobState_ARRAYSIZE = State_JobState_JobState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_JobState_descriptor();
template<typename T>
inline const std::string& State_JobState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, State_JobState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function State_JobState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    State_JobState_descriptor(), enum_t_value);
}
inline bool State_JobState_Parse(
    const std::string& name, State_JobState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State_JobState>(
    State_JobState_descriptor(), name, value);
}
// ===================================================================

class State_RecHdf5Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.State.RecHdf5Status) */ {
 public:
  State_RecHdf5Status();
  virtual ~State_RecHdf5Status();

  State_RecHdf5Status(const State_RecHdf5Status& from);
  State_RecHdf5Status(State_RecHdf5Status&& from) noexcept
    : State_RecHdf5Status() {
    *this = ::std::move(from);
  }

  inline State_RecHdf5Status& operator=(const State_RecHdf5Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_RecHdf5Status& operator=(State_RecHdf5Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_RecHdf5Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_RecHdf5Status* internal_default_instance() {
    return reinterpret_cast<const State_RecHdf5Status*>(
               &_State_RecHdf5Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State_RecHdf5Status& a, State_RecHdf5Status& b) {
    a.Swap(&b);
  }
  inline void Swap(State_RecHdf5Status* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_RecHdf5Status* New() const final {
    return CreateMaybeMessage<State_RecHdf5Status>(nullptr);
  }

  State_RecHdf5Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_RecHdf5Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_RecHdf5Status& from);
  void MergeFrom(const State_RecHdf5Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_RecHdf5Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.State.RecHdf5Status";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 5,
    kTotalLengthSecsFieldNumber = 1,
    kTotalFrameCountFieldNumber = 2,
    kUnflushedFrameCountFieldNumber = 3,
    kInfoOkFieldNumber = 4,
  };
  // string info_message = 5;
  void clear_info_message();
  const std::string& info_message() const;
  void set_info_message(const std::string& value);
  void set_info_message(std::string&& value);
  void set_info_message(const char* value);
  void set_info_message(const char* value, size_t size);
  std::string* mutable_info_message();
  std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // double total_length_secs = 1;
  void clear_total_length_secs();
  double total_length_secs() const;
  void set_total_length_secs(double value);
  private:
  double _internal_total_length_secs() const;
  void _internal_set_total_length_secs(double value);
  public:

  // int64 total_frame_count = 2;
  void clear_total_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int64 total_frame_count() const;
  void set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_frame_count() const;
  void _internal_set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unflushed_frame_count = 3;
  void clear_unflushed_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int64 unflushed_frame_count() const;
  void set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unflushed_frame_count() const;
  void _internal_set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool info_ok = 4;
  void clear_info_ok();
  bool info_ok() const;
  void set_info_ok(bool value);
  private:
  bool _internal_info_ok() const;
  void _internal_set_info_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.State.RecHdf5Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  double total_length_secs_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_frame_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 unflushed_frame_count_;
  bool info_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State_RecAddonJobStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.State.RecAddonJobStatus) */ {
 public:
  State_RecAddonJobStatus();
  virtual ~State_RecAddonJobStatus();

  State_RecAddonJobStatus(const State_RecAddonJobStatus& from);
  State_RecAddonJobStatus(State_RecAddonJobStatus&& from) noexcept
    : State_RecAddonJobStatus() {
    *this = ::std::move(from);
  }

  inline State_RecAddonJobStatus& operator=(const State_RecAddonJobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_RecAddonJobStatus& operator=(State_RecAddonJobStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_RecAddonJobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_RecAddonJobStatus* internal_default_instance() {
    return reinterpret_cast<const State_RecAddonJobStatus*>(
               &_State_RecAddonJobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State_RecAddonJobStatus& a, State_RecAddonJobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(State_RecAddonJobStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_RecAddonJobStatus* New() const final {
    return CreateMaybeMessage<State_RecAddonJobStatus>(nullptr);
  }

  State_RecAddonJobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_RecAddonJobStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_RecAddonJobStatus& from);
  void MergeFrom(const State_RecAddonJobStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_RecAddonJobStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.State.RecAddonJobStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef State_RecAddonJobStatus_State State;
  static constexpr State NotStarted =
    State_RecAddonJobStatus_State_NotStarted;
  static constexpr State Recording =
    State_RecAddonJobStatus_State_Recording;
  static constexpr State Flushing =
    State_RecAddonJobStatus_State_Flushing;
  static constexpr State FinishedFlushing =
    State_RecAddonJobStatus_State_FinishedFlushing;
  static inline bool State_IsValid(int value) {
    return State_RecAddonJobStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    State_RecAddonJobStatus_State_State_MIN;
  static constexpr State State_MAX =
    State_RecAddonJobStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    State_RecAddonJobStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return State_RecAddonJobStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return State_RecAddonJobStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return State_RecAddonJobStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 5,
    kTotalFrameCountFieldNumber = 2,
    kStateFieldNumber = 1,
    kInfoOkFieldNumber = 4,
    kUnflushedFrameCountFieldNumber = 3,
  };
  // string info_message = 5;
  void clear_info_message();
  const std::string& info_message() const;
  void set_info_message(const std::string& value);
  void set_info_message(std::string&& value);
  void set_info_message(const char* value);
  void set_info_message(const char* value, size_t size);
  std::string* mutable_info_message();
  std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // int64 total_frame_count = 2;
  void clear_total_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int64 total_frame_count() const;
  void set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_frame_count() const;
  void _internal_set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eCAL.pb.rec_client.State.RecAddonJobStatus.State state = 1;
  void clear_state();
  ::eCAL::pb::rec_client::State_RecAddonJobStatus_State state() const;
  void set_state(::eCAL::pb::rec_client::State_RecAddonJobStatus_State value);
  private:
  ::eCAL::pb::rec_client::State_RecAddonJobStatus_State _internal_state() const;
  void _internal_set_state(::eCAL::pb::rec_client::State_RecAddonJobStatus_State value);
  public:

  // bool info_ok = 4;
  void clear_info_ok();
  bool info_ok() const;
  void set_info_ok(bool value);
  private:
  bool _internal_info_ok() const;
  void _internal_set_info_ok(bool value);
  public:

  // int64 unflushed_frame_count = 3;
  void clear_unflushed_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int64 unflushed_frame_count() const;
  void set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unflushed_frame_count() const;
  void _internal_set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.State.RecAddonJobStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_frame_count_;
  int state_;
  bool info_ok_;
  ::PROTOBUF_NAMESPACE_ID::int64 unflushed_frame_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State_UploadStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.State.UploadStatus) */ {
 public:
  State_UploadStatus();
  virtual ~State_UploadStatus();

  State_UploadStatus(const State_UploadStatus& from);
  State_UploadStatus(State_UploadStatus&& from) noexcept
    : State_UploadStatus() {
    *this = ::std::move(from);
  }

  inline State_UploadStatus& operator=(const State_UploadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_UploadStatus& operator=(State_UploadStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_UploadStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_UploadStatus* internal_default_instance() {
    return reinterpret_cast<const State_UploadStatus*>(
               &_State_UploadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(State_UploadStatus& a, State_UploadStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(State_UploadStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_UploadStatus* New() const final {
    return CreateMaybeMessage<State_UploadStatus>(nullptr);
  }

  State_UploadStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_UploadStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_UploadStatus& from);
  void MergeFrom(const State_UploadStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_UploadStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.State.UploadStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 4,
    kBytesTotalSizeFieldNumber = 1,
    kBytesUploadedFieldNumber = 2,
    kInfoOkFieldNumber = 3,
  };
  // string info_message = 4;
  void clear_info_message();
  const std::string& info_message() const;
  void set_info_message(const std::string& value);
  void set_info_message(std::string&& value);
  void set_info_message(const char* value);
  void set_info_message(const char* value, size_t size);
  std::string* mutable_info_message();
  std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // int64 bytes_total_size = 1;
  void clear_bytes_total_size();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_total_size() const;
  void set_bytes_total_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_total_size() const;
  void _internal_set_bytes_total_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bytes_uploaded = 2;
  void clear_bytes_uploaded();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_uploaded() const;
  void set_bytes_uploaded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_uploaded() const;
  void _internal_set_bytes_uploaded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool info_ok = 3;
  void clear_info_ok();
  bool info_ok() const;
  void set_info_ok(bool value);
  private:
  bool _internal_info_ok() const;
  void _internal_set_info_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.State.UploadStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_total_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_uploaded_;
  bool info_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State_JobStatus_RecAddonStatusesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_JobStatus_RecAddonStatusesEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_JobStatus_RecAddonStatusesEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  State_JobStatus_RecAddonStatusesEntry_DoNotUse();
  State_JobStatus_RecAddonStatusesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const State_JobStatus_RecAddonStatusesEntry_DoNotUse& other);
  static const State_JobStatus_RecAddonStatusesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_JobStatus_RecAddonStatusesEntry_DoNotUse*>(&_State_JobStatus_RecAddonStatusesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.rec_client.State.JobStatus.RecAddonStatusesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class State_JobStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.State.JobStatus) */ {
 public:
  State_JobStatus();
  virtual ~State_JobStatus();

  State_JobStatus(const State_JobStatus& from);
  State_JobStatus(State_JobStatus&& from) noexcept
    : State_JobStatus() {
    *this = ::std::move(from);
  }

  inline State_JobStatus& operator=(const State_JobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_JobStatus& operator=(State_JobStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_JobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_JobStatus* internal_default_instance() {
    return reinterpret_cast<const State_JobStatus*>(
               &_State_JobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(State_JobStatus& a, State_JobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(State_JobStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_JobStatus* New() const final {
    return CreateMaybeMessage<State_JobStatus>(nullptr);
  }

  State_JobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_JobStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_JobStatus& from);
  void MergeFrom(const State_JobStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_JobStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.State.JobStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRecAddonStatusesFieldNumber = 4,
    kRecHdf5StatusFieldNumber = 3,
    kUploadStatusFieldNumber = 5,
    kJobIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kIsDeletedFieldNumber = 6,
  };
  // map<string, .eCAL.pb.rec_client.State.RecAddonJobStatus> rec_addon_statuses = 4;
  int rec_addon_statuses_size() const;
  private:
  int _internal_rec_addon_statuses_size() const;
  public:
  void clear_rec_addon_statuses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >&
      _internal_rec_addon_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >*
      _internal_mutable_rec_addon_statuses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >&
      rec_addon_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >*
      mutable_rec_addon_statuses();

  // .eCAL.pb.rec_client.State.RecHdf5Status rec_hdf5_status = 3;
  bool has_rec_hdf5_status() const;
  private:
  bool _internal_has_rec_hdf5_status() const;
  public:
  void clear_rec_hdf5_status();
  const ::eCAL::pb::rec_client::State_RecHdf5Status& rec_hdf5_status() const;
  ::eCAL::pb::rec_client::State_RecHdf5Status* release_rec_hdf5_status();
  ::eCAL::pb::rec_client::State_RecHdf5Status* mutable_rec_hdf5_status();
  void set_allocated_rec_hdf5_status(::eCAL::pb::rec_client::State_RecHdf5Status* rec_hdf5_status);
  private:
  const ::eCAL::pb::rec_client::State_RecHdf5Status& _internal_rec_hdf5_status() const;
  ::eCAL::pb::rec_client::State_RecHdf5Status* _internal_mutable_rec_hdf5_status();
  public:

  // .eCAL.pb.rec_client.State.UploadStatus upload_status = 5;
  bool has_upload_status() const;
  private:
  bool _internal_has_upload_status() const;
  public:
  void clear_upload_status();
  const ::eCAL::pb::rec_client::State_UploadStatus& upload_status() const;
  ::eCAL::pb::rec_client::State_UploadStatus* release_upload_status();
  ::eCAL::pb::rec_client::State_UploadStatus* mutable_upload_status();
  void set_allocated_upload_status(::eCAL::pb::rec_client::State_UploadStatus* upload_status);
  private:
  const ::eCAL::pb::rec_client::State_UploadStatus& _internal_upload_status() const;
  ::eCAL::pb::rec_client::State_UploadStatus* _internal_mutable_upload_status();
  public:

  // int64 job_id = 1;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::int64 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eCAL.pb.rec_client.State.JobState state = 2;
  void clear_state();
  ::eCAL::pb::rec_client::State_JobState state() const;
  void set_state(::eCAL::pb::rec_client::State_JobState value);
  private:
  ::eCAL::pb::rec_client::State_JobState _internal_state() const;
  void _internal_set_state(::eCAL::pb::rec_client::State_JobState value);
  public:

  // bool is_deleted = 6;
  void clear_is_deleted();
  bool is_deleted() const;
  void set_is_deleted(bool value);
  private:
  bool _internal_is_deleted() const;
  void _internal_set_is_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.State.JobStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      State_JobStatus_RecAddonStatusesEntry_DoNotUse,
      std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rec_addon_statuses_;
  ::eCAL::pb::rec_client::State_RecHdf5Status* rec_hdf5_status_;
  ::eCAL::pb::rec_client::State_UploadStatus* upload_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 job_id_;
  int state_;
  bool is_deleted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State_RecorderAddonStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.State.RecorderAddonStatus) */ {
 public:
  State_RecorderAddonStatus();
  virtual ~State_RecorderAddonStatus();

  State_RecorderAddonStatus(const State_RecorderAddonStatus& from);
  State_RecorderAddonStatus(State_RecorderAddonStatus&& from) noexcept
    : State_RecorderAddonStatus() {
    *this = ::std::move(from);
  }

  inline State_RecorderAddonStatus& operator=(const State_RecorderAddonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_RecorderAddonStatus& operator=(State_RecorderAddonStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_RecorderAddonStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_RecorderAddonStatus* internal_default_instance() {
    return reinterpret_cast<const State_RecorderAddonStatus*>(
               &_State_RecorderAddonStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(State_RecorderAddonStatus& a, State_RecorderAddonStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(State_RecorderAddonStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_RecorderAddonStatus* New() const final {
    return CreateMaybeMessage<State_RecorderAddonStatus>(nullptr);
  }

  State_RecorderAddonStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_RecorderAddonStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_RecorderAddonStatus& from);
  void MergeFrom(const State_RecorderAddonStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_RecorderAddonStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.State.RecorderAddonStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddonExecutablePathFieldNumber = 1,
    kAddonIdFieldNumber = 2,
    kNameFieldNumber = 4,
    kInfoMessageFieldNumber = 7,
    kPreBufferLengthFrameCountFieldNumber = 5,
    kInitializedFieldNumber = 3,
    kInfoOkFieldNumber = 6,
  };
  // string addon_executable_path = 1;
  void clear_addon_executable_path();
  const std::string& addon_executable_path() const;
  void set_addon_executable_path(const std::string& value);
  void set_addon_executable_path(std::string&& value);
  void set_addon_executable_path(const char* value);
  void set_addon_executable_path(const char* value, size_t size);
  std::string* mutable_addon_executable_path();
  std::string* release_addon_executable_path();
  void set_allocated_addon_executable_path(std::string* addon_executable_path);
  private:
  const std::string& _internal_addon_executable_path() const;
  void _internal_set_addon_executable_path(const std::string& value);
  std::string* _internal_mutable_addon_executable_path();
  public:

  // string addon_id = 2;
  void clear_addon_id();
  const std::string& addon_id() const;
  void set_addon_id(const std::string& value);
  void set_addon_id(std::string&& value);
  void set_addon_id(const char* value);
  void set_addon_id(const char* value, size_t size);
  std::string* mutable_addon_id();
  std::string* release_addon_id();
  void set_allocated_addon_id(std::string* addon_id);
  private:
  const std::string& _internal_addon_id() const;
  void _internal_set_addon_id(const std::string& value);
  std::string* _internal_mutable_addon_id();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string info_message = 7;
  void clear_info_message();
  const std::string& info_message() const;
  void set_info_message(const std::string& value);
  void set_info_message(std::string&& value);
  void set_info_message(const char* value);
  void set_info_message(const char* value, size_t size);
  std::string* mutable_info_message();
  std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // int64 pre_buffer_length_frame_count = 5;
  void clear_pre_buffer_length_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int64 pre_buffer_length_frame_count() const;
  void set_pre_buffer_length_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pre_buffer_length_frame_count() const;
  void _internal_set_pre_buffer_length_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool initialized = 3;
  void clear_initialized();
  bool initialized() const;
  void set_initialized(bool value);
  private:
  bool _internal_initialized() const;
  void _internal_set_initialized(bool value);
  public:

  // bool info_ok = 6;
  void clear_info_ok();
  bool info_ok() const;
  void set_info_ok(bool value);
  private:
  bool _internal_info_ok() const;
  void _internal_set_info_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.State.RecorderAddonStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addon_executable_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addon_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 pre_buffer_length_frame_count_;
  bool initialized_;
  bool info_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef State_RecHdf5Status RecHdf5Status;
  typedef State_RecAddonJobStatus RecAddonJobStatus;
  typedef State_UploadStatus UploadStatus;
  typedef State_JobStatus JobStatus;
  typedef State_RecorderAddonStatus RecorderAddonStatus;

  typedef State_JobState JobState;
  static constexpr JobState NotStarted =
    State_JobState_NotStarted;
  static constexpr JobState Recording =
    State_JobState_Recording;
  static constexpr JobState Flushing =
    State_JobState_Flushing;
  static constexpr JobState FinishedFlushing =
    State_JobState_FinishedFlushing;
  static constexpr JobState Uploading =
    State_JobState_Uploading;
  static constexpr JobState FinishedUploading =
    State_JobState_FinishedUploading;
  static inline bool JobState_IsValid(int value) {
    return State_JobState_IsValid(value);
  }
  static constexpr JobState JobState_MIN =
    State_JobState_JobState_MIN;
  static constexpr JobState JobState_MAX =
    State_JobState_JobState_MAX;
  static constexpr int JobState_ARRAYSIZE =
    State_JobState_JobState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JobState_descriptor() {
    return State_JobState_descriptor();
  }
  template<typename T>
  static inline const std::string& JobState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JobState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JobState_Name.");
    return State_JobState_Name(enum_t_value);
  }
  static inline bool JobState_Parse(const std::string& name,
      JobState* value) {
    return State_JobState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribedTopicsFieldNumber = 23,
    kAddonStatusesFieldNumber = 24,
    kJobStatusesFieldNumber = 25,
    kHostnameFieldNumber = 11,
    kInfoMessageFieldNumber = 27,
    kPidFieldNumber = 12,
    kInitializedFieldNumber = 13,
    kInfoOkFieldNumber = 26,
    kPreBufferLengthFramesCountFieldNumber = 20,
    kPreBufferLengthSecsFieldNumber = 21,
    kTimestampNsecsFieldNumber = 28,
  };
  // repeated string subscribed_topics = 23;
  int subscribed_topics_size() const;
  private:
  int _internal_subscribed_topics_size() const;
  public:
  void clear_subscribed_topics();
  const std::string& subscribed_topics(int index) const;
  std::string* mutable_subscribed_topics(int index);
  void set_subscribed_topics(int index, const std::string& value);
  void set_subscribed_topics(int index, std::string&& value);
  void set_subscribed_topics(int index, const char* value);
  void set_subscribed_topics(int index, const char* value, size_t size);
  std::string* add_subscribed_topics();
  void add_subscribed_topics(const std::string& value);
  void add_subscribed_topics(std::string&& value);
  void add_subscribed_topics(const char* value);
  void add_subscribed_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& subscribed_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_subscribed_topics();
  private:
  const std::string& _internal_subscribed_topics(int index) const;
  std::string* _internal_add_subscribed_topics();
  public:

  // repeated .eCAL.pb.rec_client.State.RecorderAddonStatus addon_statuses = 24;
  int addon_statuses_size() const;
  private:
  int _internal_addon_statuses_size() const;
  public:
  void clear_addon_statuses();
  ::eCAL::pb::rec_client::State_RecorderAddonStatus* mutable_addon_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_RecorderAddonStatus >*
      mutable_addon_statuses();
  private:
  const ::eCAL::pb::rec_client::State_RecorderAddonStatus& _internal_addon_statuses(int index) const;
  ::eCAL::pb::rec_client::State_RecorderAddonStatus* _internal_add_addon_statuses();
  public:
  const ::eCAL::pb::rec_client::State_RecorderAddonStatus& addon_statuses(int index) const;
  ::eCAL::pb::rec_client::State_RecorderAddonStatus* add_addon_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_RecorderAddonStatus >&
      addon_statuses() const;

  // repeated .eCAL.pb.rec_client.State.JobStatus job_statuses = 25;
  int job_statuses_size() const;
  private:
  int _internal_job_statuses_size() const;
  public:
  void clear_job_statuses();
  ::eCAL::pb::rec_client::State_JobStatus* mutable_job_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_JobStatus >*
      mutable_job_statuses();
  private:
  const ::eCAL::pb::rec_client::State_JobStatus& _internal_job_statuses(int index) const;
  ::eCAL::pb::rec_client::State_JobStatus* _internal_add_job_statuses();
  public:
  const ::eCAL::pb::rec_client::State_JobStatus& job_statuses(int index) const;
  ::eCAL::pb::rec_client::State_JobStatus* add_job_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_JobStatus >&
      job_statuses() const;

  // string hostname = 11;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string info_message = 27;
  void clear_info_message();
  const std::string& info_message() const;
  void set_info_message(const std::string& value);
  void set_info_message(std::string&& value);
  void set_info_message(const char* value);
  void set_info_message(const char* value, size_t size);
  std::string* mutable_info_message();
  std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // int32 pid = 12;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool initialized = 13;
  void clear_initialized();
  bool initialized() const;
  void set_initialized(bool value);
  private:
  bool _internal_initialized() const;
  void _internal_set_initialized(bool value);
  public:

  // bool info_ok = 26;
  void clear_info_ok();
  bool info_ok() const;
  void set_info_ok(bool value);
  private:
  bool _internal_info_ok() const;
  void _internal_set_info_ok(bool value);
  public:

  // int64 pre_buffer_length_frames_count = 20;
  void clear_pre_buffer_length_frames_count();
  ::PROTOBUF_NAMESPACE_ID::int64 pre_buffer_length_frames_count() const;
  void set_pre_buffer_length_frames_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pre_buffer_length_frames_count() const;
  void _internal_set_pre_buffer_length_frames_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double pre_buffer_length_secs = 21;
  void clear_pre_buffer_length_secs();
  double pre_buffer_length_secs() const;
  void set_pre_buffer_length_secs(double value);
  private:
  double _internal_pre_buffer_length_secs() const;
  void _internal_set_pre_buffer_length_secs(double value);
  public:

  // int64 timestamp_nsecs = 28;
  void clear_timestamp_nsecs();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_nsecs() const;
  void set_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_nsecs() const;
  void _internal_set_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> subscribed_topics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_RecorderAddonStatus > addon_statuses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_JobStatus > job_statuses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  bool initialized_;
  bool info_ok_;
  ::PROTOBUF_NAMESPACE_ID::int64 pre_buffer_length_frames_count_;
  double pre_buffer_length_secs_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_nsecs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State_RecHdf5Status

// double total_length_secs = 1;
inline void State_RecHdf5Status::clear_total_length_secs() {
  total_length_secs_ = 0;
}
inline double State_RecHdf5Status::_internal_total_length_secs() const {
  return total_length_secs_;
}
inline double State_RecHdf5Status::total_length_secs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecHdf5Status.total_length_secs)
  return _internal_total_length_secs();
}
inline void State_RecHdf5Status::_internal_set_total_length_secs(double value) {
  
  total_length_secs_ = value;
}
inline void State_RecHdf5Status::set_total_length_secs(double value) {
  _internal_set_total_length_secs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecHdf5Status.total_length_secs)
}

// int64 total_frame_count = 2;
inline void State_RecHdf5Status::clear_total_frame_count() {
  total_frame_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecHdf5Status::_internal_total_frame_count() const {
  return total_frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecHdf5Status::total_frame_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecHdf5Status.total_frame_count)
  return _internal_total_frame_count();
}
inline void State_RecHdf5Status::_internal_set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_frame_count_ = value;
}
inline void State_RecHdf5Status::set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_frame_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecHdf5Status.total_frame_count)
}

// int64 unflushed_frame_count = 3;
inline void State_RecHdf5Status::clear_unflushed_frame_count() {
  unflushed_frame_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecHdf5Status::_internal_unflushed_frame_count() const {
  return unflushed_frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecHdf5Status::unflushed_frame_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecHdf5Status.unflushed_frame_count)
  return _internal_unflushed_frame_count();
}
inline void State_RecHdf5Status::_internal_set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unflushed_frame_count_ = value;
}
inline void State_RecHdf5Status::set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unflushed_frame_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecHdf5Status.unflushed_frame_count)
}

// bool info_ok = 4;
inline void State_RecHdf5Status::clear_info_ok() {
  info_ok_ = false;
}
inline bool State_RecHdf5Status::_internal_info_ok() const {
  return info_ok_;
}
inline bool State_RecHdf5Status::info_ok() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecHdf5Status.info_ok)
  return _internal_info_ok();
}
inline void State_RecHdf5Status::_internal_set_info_ok(bool value) {
  
  info_ok_ = value;
}
inline void State_RecHdf5Status::set_info_ok(bool value) {
  _internal_set_info_ok(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecHdf5Status.info_ok)
}

// string info_message = 5;
inline void State_RecHdf5Status::clear_info_message() {
  info_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_RecHdf5Status::info_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
  return _internal_info_message();
}
inline void State_RecHdf5Status::set_info_message(const std::string& value) {
  _internal_set_info_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
}
inline std::string* State_RecHdf5Status::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
  return _internal_mutable_info_message();
}
inline const std::string& State_RecHdf5Status::_internal_info_message() const {
  return info_message_.GetNoArena();
}
inline void State_RecHdf5Status::_internal_set_info_message(const std::string& value) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_RecHdf5Status::set_info_message(std::string&& value) {
  
  info_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
}
inline void State_RecHdf5Status::set_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
}
inline void State_RecHdf5Status::set_info_message(const char* value, size_t size) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
}
inline std::string* State_RecHdf5Status::_internal_mutable_info_message() {
  
  return info_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_RecHdf5Status::release_info_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
  
  return info_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_RecHdf5Status::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.RecHdf5Status.info_message)
}

// -------------------------------------------------------------------

// State_RecAddonJobStatus

// .eCAL.pb.rec_client.State.RecAddonJobStatus.State state = 1;
inline void State_RecAddonJobStatus::clear_state() {
  state_ = 0;
}
inline ::eCAL::pb::rec_client::State_RecAddonJobStatus_State State_RecAddonJobStatus::_internal_state() const {
  return static_cast< ::eCAL::pb::rec_client::State_RecAddonJobStatus_State >(state_);
}
inline ::eCAL::pb::rec_client::State_RecAddonJobStatus_State State_RecAddonJobStatus::state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecAddonJobStatus.state)
  return _internal_state();
}
inline void State_RecAddonJobStatus::_internal_set_state(::eCAL::pb::rec_client::State_RecAddonJobStatus_State value) {
  
  state_ = value;
}
inline void State_RecAddonJobStatus::set_state(::eCAL::pb::rec_client::State_RecAddonJobStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecAddonJobStatus.state)
}

// int64 total_frame_count = 2;
inline void State_RecAddonJobStatus::clear_total_frame_count() {
  total_frame_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecAddonJobStatus::_internal_total_frame_count() const {
  return total_frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecAddonJobStatus::total_frame_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecAddonJobStatus.total_frame_count)
  return _internal_total_frame_count();
}
inline void State_RecAddonJobStatus::_internal_set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_frame_count_ = value;
}
inline void State_RecAddonJobStatus::set_total_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_frame_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecAddonJobStatus.total_frame_count)
}

// int64 unflushed_frame_count = 3;
inline void State_RecAddonJobStatus::clear_unflushed_frame_count() {
  unflushed_frame_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecAddonJobStatus::_internal_unflushed_frame_count() const {
  return unflushed_frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecAddonJobStatus::unflushed_frame_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecAddonJobStatus.unflushed_frame_count)
  return _internal_unflushed_frame_count();
}
inline void State_RecAddonJobStatus::_internal_set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unflushed_frame_count_ = value;
}
inline void State_RecAddonJobStatus::set_unflushed_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unflushed_frame_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecAddonJobStatus.unflushed_frame_count)
}

// bool info_ok = 4;
inline void State_RecAddonJobStatus::clear_info_ok() {
  info_ok_ = false;
}
inline bool State_RecAddonJobStatus::_internal_info_ok() const {
  return info_ok_;
}
inline bool State_RecAddonJobStatus::info_ok() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecAddonJobStatus.info_ok)
  return _internal_info_ok();
}
inline void State_RecAddonJobStatus::_internal_set_info_ok(bool value) {
  
  info_ok_ = value;
}
inline void State_RecAddonJobStatus::set_info_ok(bool value) {
  _internal_set_info_ok(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecAddonJobStatus.info_ok)
}

// string info_message = 5;
inline void State_RecAddonJobStatus::clear_info_message() {
  info_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_RecAddonJobStatus::info_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
  return _internal_info_message();
}
inline void State_RecAddonJobStatus::set_info_message(const std::string& value) {
  _internal_set_info_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
}
inline std::string* State_RecAddonJobStatus::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
  return _internal_mutable_info_message();
}
inline const std::string& State_RecAddonJobStatus::_internal_info_message() const {
  return info_message_.GetNoArena();
}
inline void State_RecAddonJobStatus::_internal_set_info_message(const std::string& value) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_RecAddonJobStatus::set_info_message(std::string&& value) {
  
  info_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
}
inline void State_RecAddonJobStatus::set_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
}
inline void State_RecAddonJobStatus::set_info_message(const char* value, size_t size) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
}
inline std::string* State_RecAddonJobStatus::_internal_mutable_info_message() {
  
  return info_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_RecAddonJobStatus::release_info_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
  
  return info_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_RecAddonJobStatus::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.RecAddonJobStatus.info_message)
}

// -------------------------------------------------------------------

// State_UploadStatus

// int64 bytes_total_size = 1;
inline void State_UploadStatus::clear_bytes_total_size() {
  bytes_total_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_UploadStatus::_internal_bytes_total_size() const {
  return bytes_total_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_UploadStatus::bytes_total_size() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.UploadStatus.bytes_total_size)
  return _internal_bytes_total_size();
}
inline void State_UploadStatus::_internal_set_bytes_total_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_total_size_ = value;
}
inline void State_UploadStatus::set_bytes_total_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_total_size(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.UploadStatus.bytes_total_size)
}

// int64 bytes_uploaded = 2;
inline void State_UploadStatus::clear_bytes_uploaded() {
  bytes_uploaded_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_UploadStatus::_internal_bytes_uploaded() const {
  return bytes_uploaded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_UploadStatus::bytes_uploaded() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.UploadStatus.bytes_uploaded)
  return _internal_bytes_uploaded();
}
inline void State_UploadStatus::_internal_set_bytes_uploaded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_uploaded_ = value;
}
inline void State_UploadStatus::set_bytes_uploaded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_uploaded(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.UploadStatus.bytes_uploaded)
}

// bool info_ok = 3;
inline void State_UploadStatus::clear_info_ok() {
  info_ok_ = false;
}
inline bool State_UploadStatus::_internal_info_ok() const {
  return info_ok_;
}
inline bool State_UploadStatus::info_ok() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.UploadStatus.info_ok)
  return _internal_info_ok();
}
inline void State_UploadStatus::_internal_set_info_ok(bool value) {
  
  info_ok_ = value;
}
inline void State_UploadStatus::set_info_ok(bool value) {
  _internal_set_info_ok(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.UploadStatus.info_ok)
}

// string info_message = 4;
inline void State_UploadStatus::clear_info_message() {
  info_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_UploadStatus::info_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.UploadStatus.info_message)
  return _internal_info_message();
}
inline void State_UploadStatus::set_info_message(const std::string& value) {
  _internal_set_info_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.UploadStatus.info_message)
}
inline std::string* State_UploadStatus::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.UploadStatus.info_message)
  return _internal_mutable_info_message();
}
inline const std::string& State_UploadStatus::_internal_info_message() const {
  return info_message_.GetNoArena();
}
inline void State_UploadStatus::_internal_set_info_message(const std::string& value) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_UploadStatus::set_info_message(std::string&& value) {
  
  info_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.UploadStatus.info_message)
}
inline void State_UploadStatus::set_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.UploadStatus.info_message)
}
inline void State_UploadStatus::set_info_message(const char* value, size_t size) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.UploadStatus.info_message)
}
inline std::string* State_UploadStatus::_internal_mutable_info_message() {
  
  return info_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_UploadStatus::release_info_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.UploadStatus.info_message)
  
  return info_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_UploadStatus::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.UploadStatus.info_message)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State_JobStatus

// int64 job_id = 1;
inline void State_JobStatus::clear_job_id() {
  job_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_JobStatus::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_JobStatus::job_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.JobStatus.job_id)
  return _internal_job_id();
}
inline void State_JobStatus::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  job_id_ = value;
}
inline void State_JobStatus::set_job_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.JobStatus.job_id)
}

// .eCAL.pb.rec_client.State.JobState state = 2;
inline void State_JobStatus::clear_state() {
  state_ = 0;
}
inline ::eCAL::pb::rec_client::State_JobState State_JobStatus::_internal_state() const {
  return static_cast< ::eCAL::pb::rec_client::State_JobState >(state_);
}
inline ::eCAL::pb::rec_client::State_JobState State_JobStatus::state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.JobStatus.state)
  return _internal_state();
}
inline void State_JobStatus::_internal_set_state(::eCAL::pb::rec_client::State_JobState value) {
  
  state_ = value;
}
inline void State_JobStatus::set_state(::eCAL::pb::rec_client::State_JobState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.JobStatus.state)
}

// .eCAL.pb.rec_client.State.RecHdf5Status rec_hdf5_status = 3;
inline bool State_JobStatus::_internal_has_rec_hdf5_status() const {
  return this != internal_default_instance() && rec_hdf5_status_ != nullptr;
}
inline bool State_JobStatus::has_rec_hdf5_status() const {
  return _internal_has_rec_hdf5_status();
}
inline void State_JobStatus::clear_rec_hdf5_status() {
  if (GetArenaNoVirtual() == nullptr && rec_hdf5_status_ != nullptr) {
    delete rec_hdf5_status_;
  }
  rec_hdf5_status_ = nullptr;
}
inline const ::eCAL::pb::rec_client::State_RecHdf5Status& State_JobStatus::_internal_rec_hdf5_status() const {
  const ::eCAL::pb::rec_client::State_RecHdf5Status* p = rec_hdf5_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::State_RecHdf5Status*>(
      &::eCAL::pb::rec_client::_State_RecHdf5Status_default_instance_);
}
inline const ::eCAL::pb::rec_client::State_RecHdf5Status& State_JobStatus::rec_hdf5_status() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.JobStatus.rec_hdf5_status)
  return _internal_rec_hdf5_status();
}
inline ::eCAL::pb::rec_client::State_RecHdf5Status* State_JobStatus::release_rec_hdf5_status() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.JobStatus.rec_hdf5_status)
  
  ::eCAL::pb::rec_client::State_RecHdf5Status* temp = rec_hdf5_status_;
  rec_hdf5_status_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::State_RecHdf5Status* State_JobStatus::_internal_mutable_rec_hdf5_status() {
  
  if (rec_hdf5_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::State_RecHdf5Status>(GetArenaNoVirtual());
    rec_hdf5_status_ = p;
  }
  return rec_hdf5_status_;
}
inline ::eCAL::pb::rec_client::State_RecHdf5Status* State_JobStatus::mutable_rec_hdf5_status() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.JobStatus.rec_hdf5_status)
  return _internal_mutable_rec_hdf5_status();
}
inline void State_JobStatus::set_allocated_rec_hdf5_status(::eCAL::pb::rec_client::State_RecHdf5Status* rec_hdf5_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rec_hdf5_status_;
  }
  if (rec_hdf5_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rec_hdf5_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rec_hdf5_status, submessage_arena);
    }
    
  } else {
    
  }
  rec_hdf5_status_ = rec_hdf5_status;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.JobStatus.rec_hdf5_status)
}

// map<string, .eCAL.pb.rec_client.State.RecAddonJobStatus> rec_addon_statuses = 4;
inline int State_JobStatus::_internal_rec_addon_statuses_size() const {
  return rec_addon_statuses_.size();
}
inline int State_JobStatus::rec_addon_statuses_size() const {
  return _internal_rec_addon_statuses_size();
}
inline void State_JobStatus::clear_rec_addon_statuses() {
  rec_addon_statuses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >&
State_JobStatus::_internal_rec_addon_statuses() const {
  return rec_addon_statuses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >&
State_JobStatus::rec_addon_statuses() const {
  // @@protoc_insertion_point(field_map:eCAL.pb.rec_client.State.JobStatus.rec_addon_statuses)
  return _internal_rec_addon_statuses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >*
State_JobStatus::_internal_mutable_rec_addon_statuses() {
  return rec_addon_statuses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_client::State_RecAddonJobStatus >*
State_JobStatus::mutable_rec_addon_statuses() {
  // @@protoc_insertion_point(field_mutable_map:eCAL.pb.rec_client.State.JobStatus.rec_addon_statuses)
  return _internal_mutable_rec_addon_statuses();
}

// .eCAL.pb.rec_client.State.UploadStatus upload_status = 5;
inline bool State_JobStatus::_internal_has_upload_status() const {
  return this != internal_default_instance() && upload_status_ != nullptr;
}
inline bool State_JobStatus::has_upload_status() const {
  return _internal_has_upload_status();
}
inline void State_JobStatus::clear_upload_status() {
  if (GetArenaNoVirtual() == nullptr && upload_status_ != nullptr) {
    delete upload_status_;
  }
  upload_status_ = nullptr;
}
inline const ::eCAL::pb::rec_client::State_UploadStatus& State_JobStatus::_internal_upload_status() const {
  const ::eCAL::pb::rec_client::State_UploadStatus* p = upload_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::State_UploadStatus*>(
      &::eCAL::pb::rec_client::_State_UploadStatus_default_instance_);
}
inline const ::eCAL::pb::rec_client::State_UploadStatus& State_JobStatus::upload_status() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.JobStatus.upload_status)
  return _internal_upload_status();
}
inline ::eCAL::pb::rec_client::State_UploadStatus* State_JobStatus::release_upload_status() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.JobStatus.upload_status)
  
  ::eCAL::pb::rec_client::State_UploadStatus* temp = upload_status_;
  upload_status_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::State_UploadStatus* State_JobStatus::_internal_mutable_upload_status() {
  
  if (upload_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::State_UploadStatus>(GetArenaNoVirtual());
    upload_status_ = p;
  }
  return upload_status_;
}
inline ::eCAL::pb::rec_client::State_UploadStatus* State_JobStatus::mutable_upload_status() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.JobStatus.upload_status)
  return _internal_mutable_upload_status();
}
inline void State_JobStatus::set_allocated_upload_status(::eCAL::pb::rec_client::State_UploadStatus* upload_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upload_status_;
  }
  if (upload_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_status, submessage_arena);
    }
    
  } else {
    
  }
  upload_status_ = upload_status;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.JobStatus.upload_status)
}

// bool is_deleted = 6;
inline void State_JobStatus::clear_is_deleted() {
  is_deleted_ = false;
}
inline bool State_JobStatus::_internal_is_deleted() const {
  return is_deleted_;
}
inline bool State_JobStatus::is_deleted() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.JobStatus.is_deleted)
  return _internal_is_deleted();
}
inline void State_JobStatus::_internal_set_is_deleted(bool value) {
  
  is_deleted_ = value;
}
inline void State_JobStatus::set_is_deleted(bool value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.JobStatus.is_deleted)
}

// -------------------------------------------------------------------

// State_RecorderAddonStatus

// string addon_executable_path = 1;
inline void State_RecorderAddonStatus::clear_addon_executable_path() {
  addon_executable_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_RecorderAddonStatus::addon_executable_path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
  return _internal_addon_executable_path();
}
inline void State_RecorderAddonStatus::set_addon_executable_path(const std::string& value) {
  _internal_set_addon_executable_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
}
inline std::string* State_RecorderAddonStatus::mutable_addon_executable_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
  return _internal_mutable_addon_executable_path();
}
inline const std::string& State_RecorderAddonStatus::_internal_addon_executable_path() const {
  return addon_executable_path_.GetNoArena();
}
inline void State_RecorderAddonStatus::_internal_set_addon_executable_path(const std::string& value) {
  
  addon_executable_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_RecorderAddonStatus::set_addon_executable_path(std::string&& value) {
  
  addon_executable_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
}
inline void State_RecorderAddonStatus::set_addon_executable_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addon_executable_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
}
inline void State_RecorderAddonStatus::set_addon_executable_path(const char* value, size_t size) {
  
  addon_executable_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
}
inline std::string* State_RecorderAddonStatus::_internal_mutable_addon_executable_path() {
  
  return addon_executable_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_RecorderAddonStatus::release_addon_executable_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
  
  return addon_executable_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_RecorderAddonStatus::set_allocated_addon_executable_path(std::string* addon_executable_path) {
  if (addon_executable_path != nullptr) {
    
  } else {
    
  }
  addon_executable_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addon_executable_path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_executable_path)
}

// string addon_id = 2;
inline void State_RecorderAddonStatus::clear_addon_id() {
  addon_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_RecorderAddonStatus::addon_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
  return _internal_addon_id();
}
inline void State_RecorderAddonStatus::set_addon_id(const std::string& value) {
  _internal_set_addon_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
}
inline std::string* State_RecorderAddonStatus::mutable_addon_id() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
  return _internal_mutable_addon_id();
}
inline const std::string& State_RecorderAddonStatus::_internal_addon_id() const {
  return addon_id_.GetNoArena();
}
inline void State_RecorderAddonStatus::_internal_set_addon_id(const std::string& value) {
  
  addon_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_RecorderAddonStatus::set_addon_id(std::string&& value) {
  
  addon_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
}
inline void State_RecorderAddonStatus::set_addon_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addon_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
}
inline void State_RecorderAddonStatus::set_addon_id(const char* value, size_t size) {
  
  addon_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
}
inline std::string* State_RecorderAddonStatus::_internal_mutable_addon_id() {
  
  return addon_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_RecorderAddonStatus::release_addon_id() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
  
  return addon_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_RecorderAddonStatus::set_allocated_addon_id(std::string* addon_id) {
  if (addon_id != nullptr) {
    
  } else {
    
  }
  addon_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addon_id);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.RecorderAddonStatus.addon_id)
}

// bool initialized = 3;
inline void State_RecorderAddonStatus::clear_initialized() {
  initialized_ = false;
}
inline bool State_RecorderAddonStatus::_internal_initialized() const {
  return initialized_;
}
inline bool State_RecorderAddonStatus::initialized() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.initialized)
  return _internal_initialized();
}
inline void State_RecorderAddonStatus::_internal_set_initialized(bool value) {
  
  initialized_ = value;
}
inline void State_RecorderAddonStatus::set_initialized(bool value) {
  _internal_set_initialized(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.initialized)
}

// string name = 4;
inline void State_RecorderAddonStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_RecorderAddonStatus::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
  return _internal_name();
}
inline void State_RecorderAddonStatus::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
}
inline std::string* State_RecorderAddonStatus::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
  return _internal_mutable_name();
}
inline const std::string& State_RecorderAddonStatus::_internal_name() const {
  return name_.GetNoArena();
}
inline void State_RecorderAddonStatus::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_RecorderAddonStatus::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
}
inline void State_RecorderAddonStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
}
inline void State_RecorderAddonStatus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
}
inline std::string* State_RecorderAddonStatus::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_RecorderAddonStatus::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_RecorderAddonStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.RecorderAddonStatus.name)
}

// int64 pre_buffer_length_frame_count = 5;
inline void State_RecorderAddonStatus::clear_pre_buffer_length_frame_count() {
  pre_buffer_length_frame_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecorderAddonStatus::_internal_pre_buffer_length_frame_count() const {
  return pre_buffer_length_frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_RecorderAddonStatus::pre_buffer_length_frame_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.pre_buffer_length_frame_count)
  return _internal_pre_buffer_length_frame_count();
}
inline void State_RecorderAddonStatus::_internal_set_pre_buffer_length_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pre_buffer_length_frame_count_ = value;
}
inline void State_RecorderAddonStatus::set_pre_buffer_length_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pre_buffer_length_frame_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.pre_buffer_length_frame_count)
}

// bool info_ok = 6;
inline void State_RecorderAddonStatus::clear_info_ok() {
  info_ok_ = false;
}
inline bool State_RecorderAddonStatus::_internal_info_ok() const {
  return info_ok_;
}
inline bool State_RecorderAddonStatus::info_ok() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.info_ok)
  return _internal_info_ok();
}
inline void State_RecorderAddonStatus::_internal_set_info_ok(bool value) {
  
  info_ok_ = value;
}
inline void State_RecorderAddonStatus::set_info_ok(bool value) {
  _internal_set_info_ok(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.info_ok)
}

// string info_message = 7;
inline void State_RecorderAddonStatus::clear_info_message() {
  info_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_RecorderAddonStatus::info_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
  return _internal_info_message();
}
inline void State_RecorderAddonStatus::set_info_message(const std::string& value) {
  _internal_set_info_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
}
inline std::string* State_RecorderAddonStatus::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
  return _internal_mutable_info_message();
}
inline const std::string& State_RecorderAddonStatus::_internal_info_message() const {
  return info_message_.GetNoArena();
}
inline void State_RecorderAddonStatus::_internal_set_info_message(const std::string& value) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_RecorderAddonStatus::set_info_message(std::string&& value) {
  
  info_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
}
inline void State_RecorderAddonStatus::set_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
}
inline void State_RecorderAddonStatus::set_info_message(const char* value, size_t size) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
}
inline std::string* State_RecorderAddonStatus::_internal_mutable_info_message() {
  
  return info_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_RecorderAddonStatus::release_info_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
  
  return info_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_RecorderAddonStatus::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.RecorderAddonStatus.info_message)
}

// -------------------------------------------------------------------

// State

// string hostname = 11;
inline void State::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::hostname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.hostname)
  return _internal_hostname();
}
inline void State::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.hostname)
}
inline std::string* State::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& State::_internal_hostname() const {
  return hostname_.GetNoArena();
}
inline void State::_internal_set_hostname(const std::string& value) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_hostname(std::string&& value) {
  
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.hostname)
}
inline void State::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.hostname)
}
inline void State::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.hostname)
}
inline std::string* State::_internal_mutable_hostname() {
  
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_hostname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.hostname)
  
  return hostname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.hostname)
}

// int32 pid = 12;
inline void State::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.pid)
  return _internal_pid();
}
inline void State::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void State::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.pid)
}

// bool initialized = 13;
inline void State::clear_initialized() {
  initialized_ = false;
}
inline bool State::_internal_initialized() const {
  return initialized_;
}
inline bool State::initialized() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.initialized)
  return _internal_initialized();
}
inline void State::_internal_set_initialized(bool value) {
  
  initialized_ = value;
}
inline void State::set_initialized(bool value) {
  _internal_set_initialized(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.initialized)
}

// int64 pre_buffer_length_frames_count = 20;
inline void State::clear_pre_buffer_length_frames_count() {
  pre_buffer_length_frames_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::_internal_pre_buffer_length_frames_count() const {
  return pre_buffer_length_frames_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::pre_buffer_length_frames_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.pre_buffer_length_frames_count)
  return _internal_pre_buffer_length_frames_count();
}
inline void State::_internal_set_pre_buffer_length_frames_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pre_buffer_length_frames_count_ = value;
}
inline void State::set_pre_buffer_length_frames_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pre_buffer_length_frames_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.pre_buffer_length_frames_count)
}

// double pre_buffer_length_secs = 21;
inline void State::clear_pre_buffer_length_secs() {
  pre_buffer_length_secs_ = 0;
}
inline double State::_internal_pre_buffer_length_secs() const {
  return pre_buffer_length_secs_;
}
inline double State::pre_buffer_length_secs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.pre_buffer_length_secs)
  return _internal_pre_buffer_length_secs();
}
inline void State::_internal_set_pre_buffer_length_secs(double value) {
  
  pre_buffer_length_secs_ = value;
}
inline void State::set_pre_buffer_length_secs(double value) {
  _internal_set_pre_buffer_length_secs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.pre_buffer_length_secs)
}

// repeated string subscribed_topics = 23;
inline int State::_internal_subscribed_topics_size() const {
  return subscribed_topics_.size();
}
inline int State::subscribed_topics_size() const {
  return _internal_subscribed_topics_size();
}
inline void State::clear_subscribed_topics() {
  subscribed_topics_.Clear();
}
inline std::string* State::add_subscribed_topics() {
  // @@protoc_insertion_point(field_add_mutable:eCAL.pb.rec_client.State.subscribed_topics)
  return _internal_add_subscribed_topics();
}
inline const std::string& State::_internal_subscribed_topics(int index) const {
  return subscribed_topics_.Get(index);
}
inline const std::string& State::subscribed_topics(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.subscribed_topics)
  return _internal_subscribed_topics(index);
}
inline std::string* State::mutable_subscribed_topics(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.subscribed_topics)
  return subscribed_topics_.Mutable(index);
}
inline void State::set_subscribed_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.subscribed_topics)
  subscribed_topics_.Mutable(index)->assign(value);
}
inline void State::set_subscribed_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.subscribed_topics)
  subscribed_topics_.Mutable(index)->assign(std::move(value));
}
inline void State::set_subscribed_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscribed_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.subscribed_topics)
}
inline void State::set_subscribed_topics(int index, const char* value, size_t size) {
  subscribed_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.subscribed_topics)
}
inline std::string* State::_internal_add_subscribed_topics() {
  return subscribed_topics_.Add();
}
inline void State::add_subscribed_topics(const std::string& value) {
  subscribed_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_client.State.subscribed_topics)
}
inline void State::add_subscribed_topics(std::string&& value) {
  subscribed_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_client.State.subscribed_topics)
}
inline void State::add_subscribed_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscribed_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eCAL.pb.rec_client.State.subscribed_topics)
}
inline void State::add_subscribed_topics(const char* value, size_t size) {
  subscribed_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eCAL.pb.rec_client.State.subscribed_topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
State::subscribed_topics() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_client.State.subscribed_topics)
  return subscribed_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
State::mutable_subscribed_topics() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_client.State.subscribed_topics)
  return &subscribed_topics_;
}

// repeated .eCAL.pb.rec_client.State.RecorderAddonStatus addon_statuses = 24;
inline int State::_internal_addon_statuses_size() const {
  return addon_statuses_.size();
}
inline int State::addon_statuses_size() const {
  return _internal_addon_statuses_size();
}
inline void State::clear_addon_statuses() {
  addon_statuses_.Clear();
}
inline ::eCAL::pb::rec_client::State_RecorderAddonStatus* State::mutable_addon_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.addon_statuses)
  return addon_statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_RecorderAddonStatus >*
State::mutable_addon_statuses() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_client.State.addon_statuses)
  return &addon_statuses_;
}
inline const ::eCAL::pb::rec_client::State_RecorderAddonStatus& State::_internal_addon_statuses(int index) const {
  return addon_statuses_.Get(index);
}
inline const ::eCAL::pb::rec_client::State_RecorderAddonStatus& State::addon_statuses(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.addon_statuses)
  return _internal_addon_statuses(index);
}
inline ::eCAL::pb::rec_client::State_RecorderAddonStatus* State::_internal_add_addon_statuses() {
  return addon_statuses_.Add();
}
inline ::eCAL::pb::rec_client::State_RecorderAddonStatus* State::add_addon_statuses() {
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_client.State.addon_statuses)
  return _internal_add_addon_statuses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_RecorderAddonStatus >&
State::addon_statuses() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_client.State.addon_statuses)
  return addon_statuses_;
}

// repeated .eCAL.pb.rec_client.State.JobStatus job_statuses = 25;
inline int State::_internal_job_statuses_size() const {
  return job_statuses_.size();
}
inline int State::job_statuses_size() const {
  return _internal_job_statuses_size();
}
inline void State::clear_job_statuses() {
  job_statuses_.Clear();
}
inline ::eCAL::pb::rec_client::State_JobStatus* State::mutable_job_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.job_statuses)
  return job_statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_JobStatus >*
State::mutable_job_statuses() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_client.State.job_statuses)
  return &job_statuses_;
}
inline const ::eCAL::pb::rec_client::State_JobStatus& State::_internal_job_statuses(int index) const {
  return job_statuses_.Get(index);
}
inline const ::eCAL::pb::rec_client::State_JobStatus& State::job_statuses(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.job_statuses)
  return _internal_job_statuses(index);
}
inline ::eCAL::pb::rec_client::State_JobStatus* State::_internal_add_job_statuses() {
  return job_statuses_.Add();
}
inline ::eCAL::pb::rec_client::State_JobStatus* State::add_job_statuses() {
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_client.State.job_statuses)
  return _internal_add_job_statuses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::rec_client::State_JobStatus >&
State::job_statuses() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_client.State.job_statuses)
  return job_statuses_;
}

// bool info_ok = 26;
inline void State::clear_info_ok() {
  info_ok_ = false;
}
inline bool State::_internal_info_ok() const {
  return info_ok_;
}
inline bool State::info_ok() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.info_ok)
  return _internal_info_ok();
}
inline void State::_internal_set_info_ok(bool value) {
  
  info_ok_ = value;
}
inline void State::set_info_ok(bool value) {
  _internal_set_info_ok(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.info_ok)
}

// string info_message = 27;
inline void State::clear_info_message() {
  info_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::info_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.info_message)
  return _internal_info_message();
}
inline void State::set_info_message(const std::string& value) {
  _internal_set_info_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.info_message)
}
inline std::string* State::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.State.info_message)
  return _internal_mutable_info_message();
}
inline const std::string& State::_internal_info_message() const {
  return info_message_.GetNoArena();
}
inline void State::_internal_set_info_message(const std::string& value) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_info_message(std::string&& value) {
  
  info_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.State.info_message)
}
inline void State::set_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.State.info_message)
}
inline void State::set_info_message(const char* value, size_t size) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.State.info_message)
}
inline std::string* State::_internal_mutable_info_message() {
  
  return info_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_info_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.State.info_message)
  
  return info_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.State.info_message)
}

// int64 timestamp_nsecs = 28;
inline void State::clear_timestamp_nsecs() {
  timestamp_nsecs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::_internal_timestamp_nsecs() const {
  return timestamp_nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::timestamp_nsecs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.State.timestamp_nsecs)
  return _internal_timestamp_nsecs();
}
inline void State::_internal_set_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_nsecs_ = value;
}
inline void State::set_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_nsecs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.State.timestamp_nsecs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rec_client
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::rec_client::State_RecAddonJobStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_client::State_RecAddonJobStatus_State>() {
  return ::eCAL::pb::rec_client::State_RecAddonJobStatus_State_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::rec_client::State_JobState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_client::State_JobState>() {
  return ::eCAL::pb::rec_client::State_JobState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fclient_5fstate_2eproto
