// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/rec/server_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecal/app/pb/rec/server_state.pb.h"
#include "ecal/app/pb/rec/server_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
namespace eCAL {
namespace pb {
namespace rec_server {
class AddCommentRequest;
class AddCommentRequestDefaultTypeInternal;
extern AddCommentRequestDefaultTypeInternal _AddCommentRequest_default_instance_;
class GenericMeasurementRequest;
class GenericMeasurementRequestDefaultTypeInternal;
extern GenericMeasurementRequestDefaultTypeInternal _GenericMeasurementRequest_default_instance_;
class GenericRequest;
class GenericRequestDefaultTypeInternal;
extern GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
class JobStartedResponse;
class JobStartedResponseDefaultTypeInternal;
extern JobStartedResponseDefaultTypeInternal _JobStartedResponse_default_instance_;
class LoadConfigRequest;
class LoadConfigRequestDefaultTypeInternal;
extern LoadConfigRequestDefaultTypeInternal _LoadConfigRequest_default_instance_;
class ServiceResult;
class ServiceResultDefaultTypeInternal;
extern ServiceResultDefaultTypeInternal _ServiceResult_default_instance_;
}  // namespace rec_server
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::rec_server::AddCommentRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::AddCommentRequest>(Arena*);
template<> ::eCAL::pb::rec_server::GenericMeasurementRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::GenericMeasurementRequest>(Arena*);
template<> ::eCAL::pb::rec_server::GenericRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::GenericRequest>(Arena*);
template<> ::eCAL::pb::rec_server::JobStartedResponse* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::JobStartedResponse>(Arena*);
template<> ::eCAL::pb::rec_server::LoadConfigRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::LoadConfigRequest>(Arena*);
template<> ::eCAL::pb::rec_server::ServiceResult* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::ServiceResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace rec_server {

enum ServiceResult_ErrorCode : int {
  ServiceResult_ErrorCode_no_error = 0,
  ServiceResult_ErrorCode_error_parameters = 1,
  ServiceResult_ErrorCode_error_internal = 2,
  ServiceResult_ErrorCode_ServiceResult_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceResult_ErrorCode_ServiceResult_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceResult_ErrorCode_IsValid(int value);
constexpr ServiceResult_ErrorCode ServiceResult_ErrorCode_ErrorCode_MIN = ServiceResult_ErrorCode_no_error;
constexpr ServiceResult_ErrorCode ServiceResult_ErrorCode_ErrorCode_MAX = ServiceResult_ErrorCode_error_internal;
constexpr int ServiceResult_ErrorCode_ErrorCode_ARRAYSIZE = ServiceResult_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceResult_ErrorCode_descriptor();
template<typename T>
inline const std::string& ServiceResult_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceResult_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceResult_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceResult_ErrorCode_descriptor(), enum_t_value);
}
inline bool ServiceResult_ErrorCode_Parse(
    const std::string& name, ServiceResult_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceResult_ErrorCode>(
    ServiceResult_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class GenericRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.GenericRequest) */ {
 public:
  GenericRequest();
  virtual ~GenericRequest();

  GenericRequest(const GenericRequest& from);
  GenericRequest(GenericRequest&& from) noexcept
    : GenericRequest() {
    *this = ::std::move(from);
  }

  inline GenericRequest& operator=(const GenericRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericRequest& operator=(GenericRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericRequest* internal_default_instance() {
    return reinterpret_cast<const GenericRequest*>(
               &_GenericRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericRequest& a, GenericRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericRequest* New() const final {
    return CreateMaybeMessage<GenericRequest>(nullptr);
  }

  GenericRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericRequest& from);
  void MergeFrom(const GenericRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.GenericRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.GenericRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.LoadConfigRequest) */ {
 public:
  LoadConfigRequest();
  virtual ~LoadConfigRequest();

  LoadConfigRequest(const LoadConfigRequest& from);
  LoadConfigRequest(LoadConfigRequest&& from) noexcept
    : LoadConfigRequest() {
    *this = ::std::move(from);
  }

  inline LoadConfigRequest& operator=(const LoadConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadConfigRequest& operator=(LoadConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadConfigRequest* internal_default_instance() {
    return reinterpret_cast<const LoadConfigRequest*>(
               &_LoadConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadConfigRequest& a, LoadConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadConfigRequest* New() const final {
    return CreateMaybeMessage<LoadConfigRequest>(nullptr);
  }

  LoadConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadConfigRequest& from);
  void MergeFrom(const LoadConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.LoadConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigPathFieldNumber = 1,
  };
  // string config_path = 1;
  void clear_config_path();
  const std::string& config_path() const;
  void set_config_path(const std::string& value);
  void set_config_path(std::string&& value);
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  std::string* mutable_config_path();
  std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.LoadConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenericMeasurementRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.GenericMeasurementRequest) */ {
 public:
  GenericMeasurementRequest();
  virtual ~GenericMeasurementRequest();

  GenericMeasurementRequest(const GenericMeasurementRequest& from);
  GenericMeasurementRequest(GenericMeasurementRequest&& from) noexcept
    : GenericMeasurementRequest() {
    *this = ::std::move(from);
  }

  inline GenericMeasurementRequest& operator=(const GenericMeasurementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericMeasurementRequest& operator=(GenericMeasurementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericMeasurementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericMeasurementRequest* internal_default_instance() {
    return reinterpret_cast<const GenericMeasurementRequest*>(
               &_GenericMeasurementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenericMeasurementRequest& a, GenericMeasurementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericMeasurementRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericMeasurementRequest* New() const final {
    return CreateMaybeMessage<GenericMeasurementRequest>(nullptr);
  }

  GenericMeasurementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericMeasurementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericMeasurementRequest& from);
  void MergeFrom(const GenericMeasurementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericMeasurementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.GenericMeasurementRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasIdFieldNumber = 1,
  };
  // int64 meas_id = 1;
  void clear_meas_id();
  ::PROTOBUF_NAMESPACE_ID::int64 meas_id() const;
  void set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_meas_id() const;
  void _internal_set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.GenericMeasurementRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 meas_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCommentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.AddCommentRequest) */ {
 public:
  AddCommentRequest();
  virtual ~AddCommentRequest();

  AddCommentRequest(const AddCommentRequest& from);
  AddCommentRequest(AddCommentRequest&& from) noexcept
    : AddCommentRequest() {
    *this = ::std::move(from);
  }

  inline AddCommentRequest& operator=(const AddCommentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCommentRequest& operator=(AddCommentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCommentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCommentRequest* internal_default_instance() {
    return reinterpret_cast<const AddCommentRequest*>(
               &_AddCommentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddCommentRequest& a, AddCommentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCommentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCommentRequest* New() const final {
    return CreateMaybeMessage<AddCommentRequest>(nullptr);
  }

  AddCommentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCommentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCommentRequest& from);
  void MergeFrom(const AddCommentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCommentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.AddCommentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kMeasIdFieldNumber = 1,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // int64 meas_id = 1;
  void clear_meas_id();
  ::PROTOBUF_NAMESPACE_ID::int64 meas_id() const;
  void set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_meas_id() const;
  void _internal_set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.AddCommentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int64 meas_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.ServiceResult) */ {
 public:
  ServiceResult();
  virtual ~ServiceResult();

  ServiceResult(const ServiceResult& from);
  ServiceResult(ServiceResult&& from) noexcept
    : ServiceResult() {
    *this = ::std::move(from);
  }

  inline ServiceResult& operator=(const ServiceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceResult& operator=(ServiceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceResult* internal_default_instance() {
    return reinterpret_cast<const ServiceResult*>(
               &_ServiceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServiceResult& a, ServiceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceResult* New() const final {
    return CreateMaybeMessage<ServiceResult>(nullptr);
  }

  ServiceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceResult& from);
  void MergeFrom(const ServiceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.ServiceResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServiceResult_ErrorCode ErrorCode;
  static constexpr ErrorCode no_error =
    ServiceResult_ErrorCode_no_error;
  static constexpr ErrorCode error_parameters =
    ServiceResult_ErrorCode_error_parameters;
  static constexpr ErrorCode error_internal =
    ServiceResult_ErrorCode_error_internal;
  static inline bool ErrorCode_IsValid(int value) {
    return ServiceResult_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    ServiceResult_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    ServiceResult_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    ServiceResult_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return ServiceResult_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return ServiceResult_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(const std::string& name,
      ErrorCode* value) {
    return ServiceResult_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string info_message = 2;
  void clear_info_message();
  const std::string& info_message() const;
  void set_info_message(const std::string& value);
  void set_info_message(std::string&& value);
  void set_info_message(const char* value);
  void set_info_message(const char* value, size_t size);
  std::string* mutable_info_message();
  std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // .eCAL.pb.rec_server.ServiceResult.ErrorCode error_code = 1;
  void clear_error_code();
  ::eCAL::pb::rec_server::ServiceResult_ErrorCode error_code() const;
  void set_error_code(::eCAL::pb::rec_server::ServiceResult_ErrorCode value);
  private:
  ::eCAL::pb::rec_server::ServiceResult_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::eCAL::pb::rec_server::ServiceResult_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.ServiceResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
};
// -------------------------------------------------------------------

class JobStartedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.JobStartedResponse) */ {
 public:
  JobStartedResponse();
  virtual ~JobStartedResponse();

  JobStartedResponse(const JobStartedResponse& from);
  JobStartedResponse(JobStartedResponse&& from) noexcept
    : JobStartedResponse() {
    *this = ::std::move(from);
  }

  inline JobStartedResponse& operator=(const JobStartedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStartedResponse& operator=(JobStartedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStartedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStartedResponse* internal_default_instance() {
    return reinterpret_cast<const JobStartedResponse*>(
               &_JobStartedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JobStartedResponse& a, JobStartedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStartedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStartedResponse* New() const final {
    return CreateMaybeMessage<JobStartedResponse>(nullptr);
  }

  JobStartedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStartedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStartedResponse& from);
  void MergeFrom(const JobStartedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStartedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.JobStartedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceResultFieldNumber = 1,
    kMeasIdFieldNumber = 2,
  };
  // .eCAL.pb.rec_server.ServiceResult service_result = 1;
  bool has_service_result() const;
  private:
  bool _internal_has_service_result() const;
  public:
  void clear_service_result();
  const ::eCAL::pb::rec_server::ServiceResult& service_result() const;
  ::eCAL::pb::rec_server::ServiceResult* release_service_result();
  ::eCAL::pb::rec_server::ServiceResult* mutable_service_result();
  void set_allocated_service_result(::eCAL::pb::rec_server::ServiceResult* service_result);
  private:
  const ::eCAL::pb::rec_server::ServiceResult& _internal_service_result() const;
  ::eCAL::pb::rec_server::ServiceResult* _internal_mutable_service_result();
  public:

  // int64 meas_id = 2;
  void clear_meas_id();
  ::PROTOBUF_NAMESPACE_ID::int64 meas_id() const;
  void set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_meas_id() const;
  void _internal_set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.JobStartedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eCAL::pb::rec_server::ServiceResult* service_result_;
  ::PROTOBUF_NAMESPACE_ID::int64 meas_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto;
};
// ===================================================================

class EcalRecServerService_Stub;

class EcalRecServerService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EcalRecServerService() {};
 public:
  virtual ~EcalRecServerService();

  typedef EcalRecServerService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void LoadConfigFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::LoadConfigRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void Activate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void DeActivate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::JobStartedResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void SaveBuffer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::JobStartedResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UploadMeasurement(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericMeasurementRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void AddComment(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::AddCommentRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteMeasurement(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericMeasurementRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  virtual void GetStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void GetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::RecServerConfig* response,
                       ::google::protobuf::Closure* done);
  virtual void SetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::RecServerConfig* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EcalRecServerService);
};

class EcalRecServerService_Stub : public EcalRecServerService {
 public:
  EcalRecServerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EcalRecServerService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EcalRecServerService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EcalRecServerService ------------------------------------------

  void LoadConfigFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::LoadConfigRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void Activate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void DeActivate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void StartRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::JobStartedResponse* response,
                       ::google::protobuf::Closure* done);
  void StopRecording(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void SaveBuffer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::JobStartedResponse* response,
                       ::google::protobuf::Closure* done);
  void UploadMeasurement(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericMeasurementRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void AddComment(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::AddCommentRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void DeleteMeasurement(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericMeasurementRequest* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
  void GetStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::Status* response,
                       ::google::protobuf::Closure* done);
  void GetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::GenericRequest* request,
                       ::eCAL::pb::rec_server::RecServerConfig* response,
                       ::google::protobuf::Closure* done);
  void SetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_server::RecServerConfig* request,
                       ::eCAL::pb::rec_server::ServiceResult* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EcalRecServerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericRequest

// -------------------------------------------------------------------

// LoadConfigRequest

// string config_path = 1;
inline void LoadConfigRequest::clear_config_path() {
  config_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadConfigRequest::config_path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.LoadConfigRequest.config_path)
  return _internal_config_path();
}
inline void LoadConfigRequest::set_config_path(const std::string& value) {
  _internal_set_config_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.LoadConfigRequest.config_path)
}
inline std::string* LoadConfigRequest::mutable_config_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.LoadConfigRequest.config_path)
  return _internal_mutable_config_path();
}
inline const std::string& LoadConfigRequest::_internal_config_path() const {
  return config_path_.GetNoArena();
}
inline void LoadConfigRequest::_internal_set_config_path(const std::string& value) {
  
  config_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoadConfigRequest::set_config_path(std::string&& value) {
  
  config_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.LoadConfigRequest.config_path)
}
inline void LoadConfigRequest::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.LoadConfigRequest.config_path)
}
inline void LoadConfigRequest::set_config_path(const char* value, size_t size) {
  
  config_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.LoadConfigRequest.config_path)
}
inline std::string* LoadConfigRequest::_internal_mutable_config_path() {
  
  return config_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadConfigRequest::release_config_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.LoadConfigRequest.config_path)
  
  return config_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadConfigRequest::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.LoadConfigRequest.config_path)
}

// -------------------------------------------------------------------

// GenericMeasurementRequest

// int64 meas_id = 1;
inline void GenericMeasurementRequest::clear_meas_id() {
  meas_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericMeasurementRequest::_internal_meas_id() const {
  return meas_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericMeasurementRequest::meas_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.GenericMeasurementRequest.meas_id)
  return _internal_meas_id();
}
inline void GenericMeasurementRequest::_internal_set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  meas_id_ = value;
}
inline void GenericMeasurementRequest::set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_meas_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.GenericMeasurementRequest.meas_id)
}

// -------------------------------------------------------------------

// AddCommentRequest

// int64 meas_id = 1;
inline void AddCommentRequest::clear_meas_id() {
  meas_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddCommentRequest::_internal_meas_id() const {
  return meas_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddCommentRequest::meas_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.AddCommentRequest.meas_id)
  return _internal_meas_id();
}
inline void AddCommentRequest::_internal_set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  meas_id_ = value;
}
inline void AddCommentRequest::set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_meas_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.AddCommentRequest.meas_id)
}

// string comment = 2;
inline void AddCommentRequest::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddCommentRequest::comment() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.AddCommentRequest.comment)
  return _internal_comment();
}
inline void AddCommentRequest::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.AddCommentRequest.comment)
}
inline std::string* AddCommentRequest::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.AddCommentRequest.comment)
  return _internal_mutable_comment();
}
inline const std::string& AddCommentRequest::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void AddCommentRequest::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddCommentRequest::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.AddCommentRequest.comment)
}
inline void AddCommentRequest::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.AddCommentRequest.comment)
}
inline void AddCommentRequest::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.AddCommentRequest.comment)
}
inline std::string* AddCommentRequest::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddCommentRequest::release_comment() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.AddCommentRequest.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddCommentRequest::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.AddCommentRequest.comment)
}

// -------------------------------------------------------------------

// ServiceResult

// .eCAL.pb.rec_server.ServiceResult.ErrorCode error_code = 1;
inline void ServiceResult::clear_error_code() {
  error_code_ = 0;
}
inline ::eCAL::pb::rec_server::ServiceResult_ErrorCode ServiceResult::_internal_error_code() const {
  return static_cast< ::eCAL::pb::rec_server::ServiceResult_ErrorCode >(error_code_);
}
inline ::eCAL::pb::rec_server::ServiceResult_ErrorCode ServiceResult::error_code() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ServiceResult.error_code)
  return _internal_error_code();
}
inline void ServiceResult::_internal_set_error_code(::eCAL::pb::rec_server::ServiceResult_ErrorCode value) {
  
  error_code_ = value;
}
inline void ServiceResult::set_error_code(::eCAL::pb::rec_server::ServiceResult_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.ServiceResult.error_code)
}

// string info_message = 2;
inline void ServiceResult::clear_info_message() {
  info_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceResult::info_message() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.ServiceResult.info_message)
  return _internal_info_message();
}
inline void ServiceResult::set_info_message(const std::string& value) {
  _internal_set_info_message(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.ServiceResult.info_message)
}
inline std::string* ServiceResult::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.ServiceResult.info_message)
  return _internal_mutable_info_message();
}
inline const std::string& ServiceResult::_internal_info_message() const {
  return info_message_.GetNoArena();
}
inline void ServiceResult::_internal_set_info_message(const std::string& value) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceResult::set_info_message(std::string&& value) {
  
  info_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.ServiceResult.info_message)
}
inline void ServiceResult::set_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.ServiceResult.info_message)
}
inline void ServiceResult::set_info_message(const char* value, size_t size) {
  
  info_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.ServiceResult.info_message)
}
inline std::string* ServiceResult::_internal_mutable_info_message() {
  
  return info_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceResult::release_info_message() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.ServiceResult.info_message)
  
  return info_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceResult::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.ServiceResult.info_message)
}

// -------------------------------------------------------------------

// JobStartedResponse

// .eCAL.pb.rec_server.ServiceResult service_result = 1;
inline bool JobStartedResponse::_internal_has_service_result() const {
  return this != internal_default_instance() && service_result_ != nullptr;
}
inline bool JobStartedResponse::has_service_result() const {
  return _internal_has_service_result();
}
inline void JobStartedResponse::clear_service_result() {
  if (GetArenaNoVirtual() == nullptr && service_result_ != nullptr) {
    delete service_result_;
  }
  service_result_ = nullptr;
}
inline const ::eCAL::pb::rec_server::ServiceResult& JobStartedResponse::_internal_service_result() const {
  const ::eCAL::pb::rec_server::ServiceResult* p = service_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_server::ServiceResult*>(
      &::eCAL::pb::rec_server::_ServiceResult_default_instance_);
}
inline const ::eCAL::pb::rec_server::ServiceResult& JobStartedResponse::service_result() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.JobStartedResponse.service_result)
  return _internal_service_result();
}
inline ::eCAL::pb::rec_server::ServiceResult* JobStartedResponse::release_service_result() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.JobStartedResponse.service_result)
  
  ::eCAL::pb::rec_server::ServiceResult* temp = service_result_;
  service_result_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_server::ServiceResult* JobStartedResponse::_internal_mutable_service_result() {
  
  if (service_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_server::ServiceResult>(GetArenaNoVirtual());
    service_result_ = p;
  }
  return service_result_;
}
inline ::eCAL::pb::rec_server::ServiceResult* JobStartedResponse::mutable_service_result() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.JobStartedResponse.service_result)
  return _internal_mutable_service_result();
}
inline void JobStartedResponse::set_allocated_service_result(::eCAL::pb::rec_server::ServiceResult* service_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete service_result_;
  }
  if (service_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_result, submessage_arena);
    }
    
  } else {
    
  }
  service_result_ = service_result;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.JobStartedResponse.service_result)
}

// int64 meas_id = 2;
inline void JobStartedResponse::clear_meas_id() {
  meas_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JobStartedResponse::_internal_meas_id() const {
  return meas_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JobStartedResponse::meas_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.JobStartedResponse.meas_id)
  return _internal_meas_id();
}
inline void JobStartedResponse::_internal_set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  meas_id_ = value;
}
inline void JobStartedResponse::set_meas_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_meas_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.JobStartedResponse.meas_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rec_server
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::rec_server::ServiceResult_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_server::ServiceResult_ErrorCode>() {
  return ::eCAL::pb::rec_server::ServiceResult_ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fservice_2eproto
