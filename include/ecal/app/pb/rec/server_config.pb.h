// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/rec/server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto;
namespace eCAL {
namespace pb {
namespace rec_server {
class RecClientConfig;
class RecClientConfigDefaultTypeInternal;
extern RecClientConfigDefaultTypeInternal _RecClientConfig_default_instance_;
class RecServerConfig;
class RecServerConfigDefaultTypeInternal;
extern RecServerConfigDefaultTypeInternal _RecServerConfig_default_instance_;
class RecServerConfig_EnabledClientsConfigEntry_DoNotUse;
class RecServerConfig_EnabledClientsConfigEntry_DoNotUseDefaultTypeInternal;
extern RecServerConfig_EnabledClientsConfigEntry_DoNotUseDefaultTypeInternal _RecServerConfig_EnabledClientsConfigEntry_DoNotUse_default_instance_;
class UploadConfig;
class UploadConfigDefaultTypeInternal;
extern UploadConfigDefaultTypeInternal _UploadConfig_default_instance_;
}  // namespace rec_server
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::rec_server::RecClientConfig* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::RecClientConfig>(Arena*);
template<> ::eCAL::pb::rec_server::RecServerConfig* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::RecServerConfig>(Arena*);
template<> ::eCAL::pb::rec_server::RecServerConfig_EnabledClientsConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::RecServerConfig_EnabledClientsConfigEntry_DoNotUse>(Arena*);
template<> ::eCAL::pb::rec_server::UploadConfig* Arena::CreateMaybeMessage<::eCAL::pb::rec_server::UploadConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace rec_server {

enum UploadConfig_Type : int {
  UploadConfig_Type_Unknown = 0,
  UploadConfig_Type_InternalFtp = 1,
  UploadConfig_Type_Ftp = 2,
  UploadConfig_Type_UploadConfig_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UploadConfig_Type_UploadConfig_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UploadConfig_Type_IsValid(int value);
constexpr UploadConfig_Type UploadConfig_Type_Type_MIN = UploadConfig_Type_Unknown;
constexpr UploadConfig_Type UploadConfig_Type_Type_MAX = UploadConfig_Type_Ftp;
constexpr int UploadConfig_Type_Type_ARRAYSIZE = UploadConfig_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadConfig_Type_descriptor();
template<typename T>
inline const std::string& UploadConfig_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UploadConfig_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UploadConfig_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UploadConfig_Type_descriptor(), enum_t_value);
}
inline bool UploadConfig_Type_Parse(
    const std::string& name, UploadConfig_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UploadConfig_Type>(
    UploadConfig_Type_descriptor(), name, value);
}
enum RecordMode : int {
  All = 0,
  Whitelist = 1,
  Blacklist = 2,
  RecordMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RecordMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RecordMode_IsValid(int value);
constexpr RecordMode RecordMode_MIN = All;
constexpr RecordMode RecordMode_MAX = Blacklist;
constexpr int RecordMode_ARRAYSIZE = RecordMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordMode_descriptor();
template<typename T>
inline const std::string& RecordMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordMode_descriptor(), enum_t_value);
}
inline bool RecordMode_Parse(
    const std::string& name, RecordMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordMode>(
    RecordMode_descriptor(), name, value);
}
// ===================================================================

class UploadConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.UploadConfig) */ {
 public:
  UploadConfig();
  virtual ~UploadConfig();

  UploadConfig(const UploadConfig& from);
  UploadConfig(UploadConfig&& from) noexcept
    : UploadConfig() {
    *this = ::std::move(from);
  }

  inline UploadConfig& operator=(const UploadConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadConfig& operator=(UploadConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadConfig* internal_default_instance() {
    return reinterpret_cast<const UploadConfig*>(
               &_UploadConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadConfig& a, UploadConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadConfig* New() const final {
    return CreateMaybeMessage<UploadConfig>(nullptr);
  }

  UploadConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadConfig& from);
  void MergeFrom(const UploadConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.UploadConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UploadConfig_Type Type;
  static constexpr Type Unknown =
    UploadConfig_Type_Unknown;
  static constexpr Type InternalFtp =
    UploadConfig_Type_InternalFtp;
  static constexpr Type Ftp =
    UploadConfig_Type_Ftp;
  static inline bool Type_IsValid(int value) {
    return UploadConfig_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    UploadConfig_Type_Type_MIN;
  static constexpr Type Type_MAX =
    UploadConfig_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    UploadConfig_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return UploadConfig_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return UploadConfig_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return UploadConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kUsernameFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kRootPathFieldNumber = 6,
    kTypeFieldNumber = 1,
    kPortFieldNumber = 3,
    kDeleteAfterUploadFieldNumber = 7,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string username = 4;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string root_path = 6;
  void clear_root_path();
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);
  private:
  const std::string& _internal_root_path() const;
  void _internal_set_root_path(const std::string& value);
  std::string* _internal_mutable_root_path();
  public:

  // .eCAL.pb.rec_server.UploadConfig.Type type = 1;
  void clear_type();
  ::eCAL::pb::rec_server::UploadConfig_Type type() const;
  void set_type(::eCAL::pb::rec_server::UploadConfig_Type value);
  private:
  ::eCAL::pb::rec_server::UploadConfig_Type _internal_type() const;
  void _internal_set_type(::eCAL::pb::rec_server::UploadConfig_Type value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool delete_after_upload = 7;
  void clear_delete_after_upload();
  bool delete_after_upload() const;
  void set_delete_after_upload(bool value);
  private:
  bool _internal_delete_after_upload() const;
  void _internal_set_delete_after_upload(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.UploadConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  bool delete_after_upload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RecClientConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.RecClientConfig) */ {
 public:
  RecClientConfig();
  virtual ~RecClientConfig();

  RecClientConfig(const RecClientConfig& from);
  RecClientConfig(RecClientConfig&& from) noexcept
    : RecClientConfig() {
    *this = ::std::move(from);
  }

  inline RecClientConfig& operator=(const RecClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecClientConfig& operator=(RecClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecClientConfig* internal_default_instance() {
    return reinterpret_cast<const RecClientConfig*>(
               &_RecClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecClientConfig& a, RecClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RecClientConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecClientConfig* New() const final {
    return CreateMaybeMessage<RecClientConfig>(nullptr);
  }

  RecClientConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecClientConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecClientConfig& from);
  void MergeFrom(const RecClientConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecClientConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.RecClientConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFilterFieldNumber = 1,
    kEnabledAddonsFieldNumber = 2,
  };
  // repeated string host_filter = 1;
  int host_filter_size() const;
  private:
  int _internal_host_filter_size() const;
  public:
  void clear_host_filter();
  const std::string& host_filter(int index) const;
  std::string* mutable_host_filter(int index);
  void set_host_filter(int index, const std::string& value);
  void set_host_filter(int index, std::string&& value);
  void set_host_filter(int index, const char* value);
  void set_host_filter(int index, const char* value, size_t size);
  std::string* add_host_filter();
  void add_host_filter(const std::string& value);
  void add_host_filter(std::string&& value);
  void add_host_filter(const char* value);
  void add_host_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& host_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_host_filter();
  private:
  const std::string& _internal_host_filter(int index) const;
  std::string* _internal_add_host_filter();
  public:

  // repeated string enabled_addons = 2;
  int enabled_addons_size() const;
  private:
  int _internal_enabled_addons_size() const;
  public:
  void clear_enabled_addons();
  const std::string& enabled_addons(int index) const;
  std::string* mutable_enabled_addons(int index);
  void set_enabled_addons(int index, const std::string& value);
  void set_enabled_addons(int index, std::string&& value);
  void set_enabled_addons(int index, const char* value);
  void set_enabled_addons(int index, const char* value, size_t size);
  std::string* add_enabled_addons();
  void add_enabled_addons(const std::string& value);
  void add_enabled_addons(std::string&& value);
  void add_enabled_addons(const char* value);
  void add_enabled_addons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_addons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_addons();
  private:
  const std::string& _internal_enabled_addons(int index) const;
  std::string* _internal_add_enabled_addons();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.RecClientConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> host_filter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_addons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RecServerConfig_EnabledClientsConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecServerConfig_EnabledClientsConfigEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_server::RecClientConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecServerConfig_EnabledClientsConfigEntry_DoNotUse, 
    std::string, ::eCAL::pb::rec_server::RecClientConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RecServerConfig_EnabledClientsConfigEntry_DoNotUse();
  RecServerConfig_EnabledClientsConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecServerConfig_EnabledClientsConfigEntry_DoNotUse& other);
  static const RecServerConfig_EnabledClientsConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecServerConfig_EnabledClientsConfigEntry_DoNotUse*>(&_RecServerConfig_EnabledClientsConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.rec_server.RecServerConfig.EnabledClientsConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class RecServerConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_server.RecServerConfig) */ {
 public:
  RecServerConfig();
  virtual ~RecServerConfig();

  RecServerConfig(const RecServerConfig& from);
  RecServerConfig(RecServerConfig&& from) noexcept
    : RecServerConfig() {
    *this = ::std::move(from);
  }

  inline RecServerConfig& operator=(const RecServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecServerConfig& operator=(RecServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecServerConfig* internal_default_instance() {
    return reinterpret_cast<const RecServerConfig*>(
               &_RecServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecServerConfig& a, RecServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RecServerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecServerConfig* New() const final {
    return CreateMaybeMessage<RecServerConfig>(nullptr);
  }

  RecServerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecServerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecServerConfig& from);
  void MergeFrom(const RecServerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecServerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_server.RecServerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnabledClientsConfigFieldNumber = 5,
    kListedTopicsFieldNumber = 10,
    kRootDirFieldNumber = 1,
    kMeasNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kUploadConfigFieldNumber = 12,
    kMaxFileSizeMibFieldNumber = 3,
    kPreBufferLengthNsecsFieldNumber = 7,
    kOneFilePerTopicFieldNumber = 11,
    kPreBufferEnabledFieldNumber = 6,
    kBuiltInRecorderEnabledFieldNumber = 8,
    kRecordModeFieldNumber = 9,
  };
  // map<string, .eCAL.pb.rec_server.RecClientConfig> enabled_clients_config = 5;
  int enabled_clients_config_size() const;
  private:
  int _internal_enabled_clients_config_size() const;
  public:
  void clear_enabled_clients_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >&
      _internal_enabled_clients_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >*
      _internal_mutable_enabled_clients_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >&
      enabled_clients_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >*
      mutable_enabled_clients_config();

  // repeated string listed_topics = 10;
  int listed_topics_size() const;
  private:
  int _internal_listed_topics_size() const;
  public:
  void clear_listed_topics();
  const std::string& listed_topics(int index) const;
  std::string* mutable_listed_topics(int index);
  void set_listed_topics(int index, const std::string& value);
  void set_listed_topics(int index, std::string&& value);
  void set_listed_topics(int index, const char* value);
  void set_listed_topics(int index, const char* value, size_t size);
  std::string* add_listed_topics();
  void add_listed_topics(const std::string& value);
  void add_listed_topics(std::string&& value);
  void add_listed_topics(const char* value);
  void add_listed_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& listed_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_listed_topics();
  private:
  const std::string& _internal_listed_topics(int index) const;
  std::string* _internal_add_listed_topics();
  public:

  // string root_dir = 1;
  void clear_root_dir();
  const std::string& root_dir() const;
  void set_root_dir(const std::string& value);
  void set_root_dir(std::string&& value);
  void set_root_dir(const char* value);
  void set_root_dir(const char* value, size_t size);
  std::string* mutable_root_dir();
  std::string* release_root_dir();
  void set_allocated_root_dir(std::string* root_dir);
  private:
  const std::string& _internal_root_dir() const;
  void _internal_set_root_dir(const std::string& value);
  std::string* _internal_mutable_root_dir();
  public:

  // string meas_name = 2;
  void clear_meas_name();
  const std::string& meas_name() const;
  void set_meas_name(const std::string& value);
  void set_meas_name(std::string&& value);
  void set_meas_name(const char* value);
  void set_meas_name(const char* value, size_t size);
  std::string* mutable_meas_name();
  std::string* release_meas_name();
  void set_allocated_meas_name(std::string* meas_name);
  private:
  const std::string& _internal_meas_name() const;
  void _internal_set_meas_name(const std::string& value);
  std::string* _internal_mutable_meas_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .eCAL.pb.rec_server.UploadConfig upload_config = 12;
  bool has_upload_config() const;
  private:
  bool _internal_has_upload_config() const;
  public:
  void clear_upload_config();
  const ::eCAL::pb::rec_server::UploadConfig& upload_config() const;
  ::eCAL::pb::rec_server::UploadConfig* release_upload_config();
  ::eCAL::pb::rec_server::UploadConfig* mutable_upload_config();
  void set_allocated_upload_config(::eCAL::pb::rec_server::UploadConfig* upload_config);
  private:
  const ::eCAL::pb::rec_server::UploadConfig& _internal_upload_config() const;
  ::eCAL::pb::rec_server::UploadConfig* _internal_mutable_upload_config();
  public:

  // int64 max_file_size_mib = 3;
  void clear_max_file_size_mib();
  ::PROTOBUF_NAMESPACE_ID::int64 max_file_size_mib() const;
  void set_max_file_size_mib(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_file_size_mib() const;
  void _internal_set_max_file_size_mib(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pre_buffer_length_nsecs = 7;
  void clear_pre_buffer_length_nsecs();
  ::PROTOBUF_NAMESPACE_ID::int64 pre_buffer_length_nsecs() const;
  void set_pre_buffer_length_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pre_buffer_length_nsecs() const;
  void _internal_set_pre_buffer_length_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool one_file_per_topic = 11;
  void clear_one_file_per_topic();
  bool one_file_per_topic() const;
  void set_one_file_per_topic(bool value);
  private:
  bool _internal_one_file_per_topic() const;
  void _internal_set_one_file_per_topic(bool value);
  public:

  // bool pre_buffer_enabled = 6;
  void clear_pre_buffer_enabled();
  bool pre_buffer_enabled() const;
  void set_pre_buffer_enabled(bool value);
  private:
  bool _internal_pre_buffer_enabled() const;
  void _internal_set_pre_buffer_enabled(bool value);
  public:

  // bool built_in_recorder_enabled = 8;
  void clear_built_in_recorder_enabled();
  bool built_in_recorder_enabled() const;
  void set_built_in_recorder_enabled(bool value);
  private:
  bool _internal_built_in_recorder_enabled() const;
  void _internal_set_built_in_recorder_enabled(bool value);
  public:

  // .eCAL.pb.rec_server.RecordMode record_mode = 9;
  void clear_record_mode();
  ::eCAL::pb::rec_server::RecordMode record_mode() const;
  void set_record_mode(::eCAL::pb::rec_server::RecordMode value);
  private:
  ::eCAL::pb::rec_server::RecordMode _internal_record_mode() const;
  void _internal_set_record_mode(::eCAL::pb::rec_server::RecordMode value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_server.RecServerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecServerConfig_EnabledClientsConfigEntry_DoNotUse,
      std::string, ::eCAL::pb::rec_server::RecClientConfig,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > enabled_clients_config_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> listed_topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meas_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::eCAL::pb::rec_server::UploadConfig* upload_config_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_file_size_mib_;
  ::PROTOBUF_NAMESPACE_ID::int64 pre_buffer_length_nsecs_;
  bool one_file_per_topic_;
  bool pre_buffer_enabled_;
  bool built_in_recorder_enabled_;
  int record_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadConfig

// .eCAL.pb.rec_server.UploadConfig.Type type = 1;
inline void UploadConfig::clear_type() {
  type_ = 0;
}
inline ::eCAL::pb::rec_server::UploadConfig_Type UploadConfig::_internal_type() const {
  return static_cast< ::eCAL::pb::rec_server::UploadConfig_Type >(type_);
}
inline ::eCAL::pb::rec_server::UploadConfig_Type UploadConfig::type() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.type)
  return _internal_type();
}
inline void UploadConfig::_internal_set_type(::eCAL::pb::rec_server::UploadConfig_Type value) {
  
  type_ = value;
}
inline void UploadConfig::set_type(::eCAL::pb::rec_server::UploadConfig_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.type)
}

// string host = 2;
inline void UploadConfig::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadConfig::host() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.host)
  return _internal_host();
}
inline void UploadConfig::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.host)
}
inline std::string* UploadConfig::mutable_host() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.UploadConfig.host)
  return _internal_mutable_host();
}
inline const std::string& UploadConfig::_internal_host() const {
  return host_.GetNoArena();
}
inline void UploadConfig::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadConfig::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.UploadConfig.host)
}
inline void UploadConfig::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.UploadConfig.host)
}
inline void UploadConfig::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.UploadConfig.host)
}
inline std::string* UploadConfig::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadConfig::release_host() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.UploadConfig.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConfig::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.UploadConfig.host)
}

// uint32 port = 3;
inline void UploadConfig::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadConfig::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadConfig::port() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.port)
  return _internal_port();
}
inline void UploadConfig::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void UploadConfig::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.port)
}

// string username = 4;
inline void UploadConfig::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadConfig::username() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.username)
  return _internal_username();
}
inline void UploadConfig::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.username)
}
inline std::string* UploadConfig::mutable_username() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.UploadConfig.username)
  return _internal_mutable_username();
}
inline const std::string& UploadConfig::_internal_username() const {
  return username_.GetNoArena();
}
inline void UploadConfig::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadConfig::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.UploadConfig.username)
}
inline void UploadConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.UploadConfig.username)
}
inline void UploadConfig::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.UploadConfig.username)
}
inline std::string* UploadConfig::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadConfig::release_username() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.UploadConfig.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConfig::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.UploadConfig.username)
}

// string password = 5;
inline void UploadConfig::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadConfig::password() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.password)
  return _internal_password();
}
inline void UploadConfig::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.password)
}
inline std::string* UploadConfig::mutable_password() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.UploadConfig.password)
  return _internal_mutable_password();
}
inline const std::string& UploadConfig::_internal_password() const {
  return password_.GetNoArena();
}
inline void UploadConfig::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadConfig::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.UploadConfig.password)
}
inline void UploadConfig::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.UploadConfig.password)
}
inline void UploadConfig::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.UploadConfig.password)
}
inline std::string* UploadConfig::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadConfig::release_password() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.UploadConfig.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConfig::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.UploadConfig.password)
}

// string root_path = 6;
inline void UploadConfig::clear_root_path() {
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadConfig::root_path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.root_path)
  return _internal_root_path();
}
inline void UploadConfig::set_root_path(const std::string& value) {
  _internal_set_root_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.root_path)
}
inline std::string* UploadConfig::mutable_root_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.UploadConfig.root_path)
  return _internal_mutable_root_path();
}
inline const std::string& UploadConfig::_internal_root_path() const {
  return root_path_.GetNoArena();
}
inline void UploadConfig::_internal_set_root_path(const std::string& value) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadConfig::set_root_path(std::string&& value) {
  
  root_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.UploadConfig.root_path)
}
inline void UploadConfig::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.UploadConfig.root_path)
}
inline void UploadConfig::set_root_path(const char* value, size_t size) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.UploadConfig.root_path)
}
inline std::string* UploadConfig::_internal_mutable_root_path() {
  
  return root_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadConfig::release_root_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.UploadConfig.root_path)
  
  return root_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConfig::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.UploadConfig.root_path)
}

// bool delete_after_upload = 7;
inline void UploadConfig::clear_delete_after_upload() {
  delete_after_upload_ = false;
}
inline bool UploadConfig::_internal_delete_after_upload() const {
  return delete_after_upload_;
}
inline bool UploadConfig::delete_after_upload() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.UploadConfig.delete_after_upload)
  return _internal_delete_after_upload();
}
inline void UploadConfig::_internal_set_delete_after_upload(bool value) {
  
  delete_after_upload_ = value;
}
inline void UploadConfig::set_delete_after_upload(bool value) {
  _internal_set_delete_after_upload(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.UploadConfig.delete_after_upload)
}

// -------------------------------------------------------------------

// RecClientConfig

// repeated string host_filter = 1;
inline int RecClientConfig::_internal_host_filter_size() const {
  return host_filter_.size();
}
inline int RecClientConfig::host_filter_size() const {
  return _internal_host_filter_size();
}
inline void RecClientConfig::clear_host_filter() {
  host_filter_.Clear();
}
inline std::string* RecClientConfig::add_host_filter() {
  // @@protoc_insertion_point(field_add_mutable:eCAL.pb.rec_server.RecClientConfig.host_filter)
  return _internal_add_host_filter();
}
inline const std::string& RecClientConfig::_internal_host_filter(int index) const {
  return host_filter_.Get(index);
}
inline const std::string& RecClientConfig::host_filter(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecClientConfig.host_filter)
  return _internal_host_filter(index);
}
inline std::string* RecClientConfig::mutable_host_filter(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecClientConfig.host_filter)
  return host_filter_.Mutable(index);
}
inline void RecClientConfig::set_host_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecClientConfig.host_filter)
  host_filter_.Mutable(index)->assign(value);
}
inline void RecClientConfig::set_host_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecClientConfig.host_filter)
  host_filter_.Mutable(index)->assign(std::move(value));
}
inline void RecClientConfig::set_host_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.RecClientConfig.host_filter)
}
inline void RecClientConfig::set_host_filter(int index, const char* value, size_t size) {
  host_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.RecClientConfig.host_filter)
}
inline std::string* RecClientConfig::_internal_add_host_filter() {
  return host_filter_.Add();
}
inline void RecClientConfig::add_host_filter(const std::string& value) {
  host_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.RecClientConfig.host_filter)
}
inline void RecClientConfig::add_host_filter(std::string&& value) {
  host_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.RecClientConfig.host_filter)
}
inline void RecClientConfig::add_host_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eCAL.pb.rec_server.RecClientConfig.host_filter)
}
inline void RecClientConfig::add_host_filter(const char* value, size_t size) {
  host_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eCAL.pb.rec_server.RecClientConfig.host_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecClientConfig::host_filter() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_server.RecClientConfig.host_filter)
  return host_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecClientConfig::mutable_host_filter() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_server.RecClientConfig.host_filter)
  return &host_filter_;
}

// repeated string enabled_addons = 2;
inline int RecClientConfig::_internal_enabled_addons_size() const {
  return enabled_addons_.size();
}
inline int RecClientConfig::enabled_addons_size() const {
  return _internal_enabled_addons_size();
}
inline void RecClientConfig::clear_enabled_addons() {
  enabled_addons_.Clear();
}
inline std::string* RecClientConfig::add_enabled_addons() {
  // @@protoc_insertion_point(field_add_mutable:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  return _internal_add_enabled_addons();
}
inline const std::string& RecClientConfig::_internal_enabled_addons(int index) const {
  return enabled_addons_.Get(index);
}
inline const std::string& RecClientConfig::enabled_addons(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  return _internal_enabled_addons(index);
}
inline std::string* RecClientConfig::mutable_enabled_addons(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  return enabled_addons_.Mutable(index);
}
inline void RecClientConfig::set_enabled_addons(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  enabled_addons_.Mutable(index)->assign(value);
}
inline void RecClientConfig::set_enabled_addons(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  enabled_addons_.Mutable(index)->assign(std::move(value));
}
inline void RecClientConfig::set_enabled_addons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_addons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
}
inline void RecClientConfig::set_enabled_addons(int index, const char* value, size_t size) {
  enabled_addons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
}
inline std::string* RecClientConfig::_internal_add_enabled_addons() {
  return enabled_addons_.Add();
}
inline void RecClientConfig::add_enabled_addons(const std::string& value) {
  enabled_addons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
}
inline void RecClientConfig::add_enabled_addons(std::string&& value) {
  enabled_addons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
}
inline void RecClientConfig::add_enabled_addons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_addons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
}
inline void RecClientConfig::add_enabled_addons(const char* value, size_t size) {
  enabled_addons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecClientConfig::enabled_addons() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  return enabled_addons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecClientConfig::mutable_enabled_addons() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_server.RecClientConfig.enabled_addons)
  return &enabled_addons_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecServerConfig

// string root_dir = 1;
inline void RecServerConfig::clear_root_dir() {
  root_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecServerConfig::root_dir() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.root_dir)
  return _internal_root_dir();
}
inline void RecServerConfig::set_root_dir(const std::string& value) {
  _internal_set_root_dir(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.root_dir)
}
inline std::string* RecServerConfig::mutable_root_dir() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecServerConfig.root_dir)
  return _internal_mutable_root_dir();
}
inline const std::string& RecServerConfig::_internal_root_dir() const {
  return root_dir_.GetNoArena();
}
inline void RecServerConfig::_internal_set_root_dir(const std::string& value) {
  
  root_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecServerConfig::set_root_dir(std::string&& value) {
  
  root_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.RecServerConfig.root_dir)
}
inline void RecServerConfig::set_root_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.RecServerConfig.root_dir)
}
inline void RecServerConfig::set_root_dir(const char* value, size_t size) {
  
  root_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.RecServerConfig.root_dir)
}
inline std::string* RecServerConfig::_internal_mutable_root_dir() {
  
  return root_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecServerConfig::release_root_dir() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.RecServerConfig.root_dir)
  
  return root_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecServerConfig::set_allocated_root_dir(std::string* root_dir) {
  if (root_dir != nullptr) {
    
  } else {
    
  }
  root_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_dir);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.RecServerConfig.root_dir)
}

// string meas_name = 2;
inline void RecServerConfig::clear_meas_name() {
  meas_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecServerConfig::meas_name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.meas_name)
  return _internal_meas_name();
}
inline void RecServerConfig::set_meas_name(const std::string& value) {
  _internal_set_meas_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.meas_name)
}
inline std::string* RecServerConfig::mutable_meas_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecServerConfig.meas_name)
  return _internal_mutable_meas_name();
}
inline const std::string& RecServerConfig::_internal_meas_name() const {
  return meas_name_.GetNoArena();
}
inline void RecServerConfig::_internal_set_meas_name(const std::string& value) {
  
  meas_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecServerConfig::set_meas_name(std::string&& value) {
  
  meas_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.RecServerConfig.meas_name)
}
inline void RecServerConfig::set_meas_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  meas_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.RecServerConfig.meas_name)
}
inline void RecServerConfig::set_meas_name(const char* value, size_t size) {
  
  meas_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.RecServerConfig.meas_name)
}
inline std::string* RecServerConfig::_internal_mutable_meas_name() {
  
  return meas_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecServerConfig::release_meas_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.RecServerConfig.meas_name)
  
  return meas_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecServerConfig::set_allocated_meas_name(std::string* meas_name) {
  if (meas_name != nullptr) {
    
  } else {
    
  }
  meas_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meas_name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.RecServerConfig.meas_name)
}

// int64 max_file_size_mib = 3;
inline void RecServerConfig::clear_max_file_size_mib() {
  max_file_size_mib_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecServerConfig::_internal_max_file_size_mib() const {
  return max_file_size_mib_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecServerConfig::max_file_size_mib() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.max_file_size_mib)
  return _internal_max_file_size_mib();
}
inline void RecServerConfig::_internal_set_max_file_size_mib(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_file_size_mib_ = value;
}
inline void RecServerConfig::set_max_file_size_mib(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_file_size_mib(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.max_file_size_mib)
}

// bool one_file_per_topic = 11;
inline void RecServerConfig::clear_one_file_per_topic() {
  one_file_per_topic_ = false;
}
inline bool RecServerConfig::_internal_one_file_per_topic() const {
  return one_file_per_topic_;
}
inline bool RecServerConfig::one_file_per_topic() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.one_file_per_topic)
  return _internal_one_file_per_topic();
}
inline void RecServerConfig::_internal_set_one_file_per_topic(bool value) {
  
  one_file_per_topic_ = value;
}
inline void RecServerConfig::set_one_file_per_topic(bool value) {
  _internal_set_one_file_per_topic(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.one_file_per_topic)
}

// string description = 4;
inline void RecServerConfig::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecServerConfig::description() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.description)
  return _internal_description();
}
inline void RecServerConfig::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.description)
}
inline std::string* RecServerConfig::mutable_description() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecServerConfig.description)
  return _internal_mutable_description();
}
inline const std::string& RecServerConfig::_internal_description() const {
  return description_.GetNoArena();
}
inline void RecServerConfig::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecServerConfig::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_server.RecServerConfig.description)
}
inline void RecServerConfig::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.RecServerConfig.description)
}
inline void RecServerConfig::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.RecServerConfig.description)
}
inline std::string* RecServerConfig::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecServerConfig::release_description() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.RecServerConfig.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecServerConfig::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.RecServerConfig.description)
}

// map<string, .eCAL.pb.rec_server.RecClientConfig> enabled_clients_config = 5;
inline int RecServerConfig::_internal_enabled_clients_config_size() const {
  return enabled_clients_config_.size();
}
inline int RecServerConfig::enabled_clients_config_size() const {
  return _internal_enabled_clients_config_size();
}
inline void RecServerConfig::clear_enabled_clients_config() {
  enabled_clients_config_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >&
RecServerConfig::_internal_enabled_clients_config() const {
  return enabled_clients_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >&
RecServerConfig::enabled_clients_config() const {
  // @@protoc_insertion_point(field_map:eCAL.pb.rec_server.RecServerConfig.enabled_clients_config)
  return _internal_enabled_clients_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >*
RecServerConfig::_internal_mutable_enabled_clients_config() {
  return enabled_clients_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::eCAL::pb::rec_server::RecClientConfig >*
RecServerConfig::mutable_enabled_clients_config() {
  // @@protoc_insertion_point(field_mutable_map:eCAL.pb.rec_server.RecServerConfig.enabled_clients_config)
  return _internal_mutable_enabled_clients_config();
}

// bool pre_buffer_enabled = 6;
inline void RecServerConfig::clear_pre_buffer_enabled() {
  pre_buffer_enabled_ = false;
}
inline bool RecServerConfig::_internal_pre_buffer_enabled() const {
  return pre_buffer_enabled_;
}
inline bool RecServerConfig::pre_buffer_enabled() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.pre_buffer_enabled)
  return _internal_pre_buffer_enabled();
}
inline void RecServerConfig::_internal_set_pre_buffer_enabled(bool value) {
  
  pre_buffer_enabled_ = value;
}
inline void RecServerConfig::set_pre_buffer_enabled(bool value) {
  _internal_set_pre_buffer_enabled(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.pre_buffer_enabled)
}

// int64 pre_buffer_length_nsecs = 7;
inline void RecServerConfig::clear_pre_buffer_length_nsecs() {
  pre_buffer_length_nsecs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecServerConfig::_internal_pre_buffer_length_nsecs() const {
  return pre_buffer_length_nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecServerConfig::pre_buffer_length_nsecs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.pre_buffer_length_nsecs)
  return _internal_pre_buffer_length_nsecs();
}
inline void RecServerConfig::_internal_set_pre_buffer_length_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pre_buffer_length_nsecs_ = value;
}
inline void RecServerConfig::set_pre_buffer_length_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pre_buffer_length_nsecs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.pre_buffer_length_nsecs)
}

// bool built_in_recorder_enabled = 8;
inline void RecServerConfig::clear_built_in_recorder_enabled() {
  built_in_recorder_enabled_ = false;
}
inline bool RecServerConfig::_internal_built_in_recorder_enabled() const {
  return built_in_recorder_enabled_;
}
inline bool RecServerConfig::built_in_recorder_enabled() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.built_in_recorder_enabled)
  return _internal_built_in_recorder_enabled();
}
inline void RecServerConfig::_internal_set_built_in_recorder_enabled(bool value) {
  
  built_in_recorder_enabled_ = value;
}
inline void RecServerConfig::set_built_in_recorder_enabled(bool value) {
  _internal_set_built_in_recorder_enabled(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.built_in_recorder_enabled)
}

// .eCAL.pb.rec_server.RecordMode record_mode = 9;
inline void RecServerConfig::clear_record_mode() {
  record_mode_ = 0;
}
inline ::eCAL::pb::rec_server::RecordMode RecServerConfig::_internal_record_mode() const {
  return static_cast< ::eCAL::pb::rec_server::RecordMode >(record_mode_);
}
inline ::eCAL::pb::rec_server::RecordMode RecServerConfig::record_mode() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.record_mode)
  return _internal_record_mode();
}
inline void RecServerConfig::_internal_set_record_mode(::eCAL::pb::rec_server::RecordMode value) {
  
  record_mode_ = value;
}
inline void RecServerConfig::set_record_mode(::eCAL::pb::rec_server::RecordMode value) {
  _internal_set_record_mode(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.record_mode)
}

// repeated string listed_topics = 10;
inline int RecServerConfig::_internal_listed_topics_size() const {
  return listed_topics_.size();
}
inline int RecServerConfig::listed_topics_size() const {
  return _internal_listed_topics_size();
}
inline void RecServerConfig::clear_listed_topics() {
  listed_topics_.Clear();
}
inline std::string* RecServerConfig::add_listed_topics() {
  // @@protoc_insertion_point(field_add_mutable:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  return _internal_add_listed_topics();
}
inline const std::string& RecServerConfig::_internal_listed_topics(int index) const {
  return listed_topics_.Get(index);
}
inline const std::string& RecServerConfig::listed_topics(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  return _internal_listed_topics(index);
}
inline std::string* RecServerConfig::mutable_listed_topics(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  return listed_topics_.Mutable(index);
}
inline void RecServerConfig::set_listed_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  listed_topics_.Mutable(index)->assign(value);
}
inline void RecServerConfig::set_listed_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  listed_topics_.Mutable(index)->assign(std::move(value));
}
inline void RecServerConfig::set_listed_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listed_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_server.RecServerConfig.listed_topics)
}
inline void RecServerConfig::set_listed_topics(int index, const char* value, size_t size) {
  listed_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_server.RecServerConfig.listed_topics)
}
inline std::string* RecServerConfig::_internal_add_listed_topics() {
  return listed_topics_.Add();
}
inline void RecServerConfig::add_listed_topics(const std::string& value) {
  listed_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.RecServerConfig.listed_topics)
}
inline void RecServerConfig::add_listed_topics(std::string&& value) {
  listed_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eCAL.pb.rec_server.RecServerConfig.listed_topics)
}
inline void RecServerConfig::add_listed_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listed_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eCAL.pb.rec_server.RecServerConfig.listed_topics)
}
inline void RecServerConfig::add_listed_topics(const char* value, size_t size) {
  listed_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eCAL.pb.rec_server.RecServerConfig.listed_topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecServerConfig::listed_topics() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  return listed_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecServerConfig::mutable_listed_topics() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.rec_server.RecServerConfig.listed_topics)
  return &listed_topics_;
}

// .eCAL.pb.rec_server.UploadConfig upload_config = 12;
inline bool RecServerConfig::_internal_has_upload_config() const {
  return this != internal_default_instance() && upload_config_ != nullptr;
}
inline bool RecServerConfig::has_upload_config() const {
  return _internal_has_upload_config();
}
inline void RecServerConfig::clear_upload_config() {
  if (GetArenaNoVirtual() == nullptr && upload_config_ != nullptr) {
    delete upload_config_;
  }
  upload_config_ = nullptr;
}
inline const ::eCAL::pb::rec_server::UploadConfig& RecServerConfig::_internal_upload_config() const {
  const ::eCAL::pb::rec_server::UploadConfig* p = upload_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_server::UploadConfig*>(
      &::eCAL::pb::rec_server::_UploadConfig_default_instance_);
}
inline const ::eCAL::pb::rec_server::UploadConfig& RecServerConfig::upload_config() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_server.RecServerConfig.upload_config)
  return _internal_upload_config();
}
inline ::eCAL::pb::rec_server::UploadConfig* RecServerConfig::release_upload_config() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_server.RecServerConfig.upload_config)
  
  ::eCAL::pb::rec_server::UploadConfig* temp = upload_config_;
  upload_config_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_server::UploadConfig* RecServerConfig::_internal_mutable_upload_config() {
  
  if (upload_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_server::UploadConfig>(GetArenaNoVirtual());
    upload_config_ = p;
  }
  return upload_config_;
}
inline ::eCAL::pb::rec_server::UploadConfig* RecServerConfig::mutable_upload_config() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_server.RecServerConfig.upload_config)
  return _internal_mutable_upload_config();
}
inline void RecServerConfig::set_allocated_upload_config(::eCAL::pb::rec_server::UploadConfig* upload_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upload_config_;
  }
  if (upload_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_config, submessage_arena);
    }
    
  } else {
    
  }
  upload_config_ = upload_config;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_server.RecServerConfig.upload_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rec_server
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::rec_server::UploadConfig_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_server::UploadConfig_Type>() {
  return ::eCAL::pb::rec_server::UploadConfig_Type_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::rec_server::RecordMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_server::RecordMode>() {
  return ::eCAL::pb::rec_server::RecordMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fserver_5fconfig_2eproto
