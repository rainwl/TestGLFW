// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/rec/client_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecal/app/pb/rec/client_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
namespace eCAL {
namespace pb {
namespace rec_client {
class CommandRequest;
class CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class Configuration_ItemsEntry_DoNotUse;
class Configuration_ItemsEntry_DoNotUseDefaultTypeInternal;
extern Configuration_ItemsEntry_DoNotUseDefaultTypeInternal _Configuration_ItemsEntry_DoNotUse_default_instance_;
class GetConfigRequest;
class GetConfigRequestDefaultTypeInternal;
extern GetConfigRequestDefaultTypeInternal _GetConfigRequest_default_instance_;
class GetConfigResponse;
class GetConfigResponseDefaultTypeInternal;
extern GetConfigResponseDefaultTypeInternal _GetConfigResponse_default_instance_;
class GetStateRequest;
class GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetConfigRequest;
class SetConfigRequestDefaultTypeInternal;
extern SetConfigRequestDefaultTypeInternal _SetConfigRequest_default_instance_;
}  // namespace rec_client
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::rec_client::CommandRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::CommandRequest>(Arena*);
template<> ::eCAL::pb::rec_client::Configuration* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::Configuration>(Arena*);
template<> ::eCAL::pb::rec_client::Configuration_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::Configuration_ItemsEntry_DoNotUse>(Arena*);
template<> ::eCAL::pb::rec_client::GetConfigRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::GetConfigRequest>(Arena*);
template<> ::eCAL::pb::rec_client::GetConfigResponse* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::GetConfigResponse>(Arena*);
template<> ::eCAL::pb::rec_client::GetStateRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::GetStateRequest>(Arena*);
template<> ::eCAL::pb::rec_client::Response* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::Response>(Arena*);
template<> ::eCAL::pb::rec_client::SetConfigRequest* Arena::CreateMaybeMessage<::eCAL::pb::rec_client::SetConfigRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace rec_client {

enum CommandRequest_Command : int {
  CommandRequest_Command_none = 0,
  CommandRequest_Command_initialize = 1,
  CommandRequest_Command_de_initialize = 2,
  CommandRequest_Command_start_recording = 3,
  CommandRequest_Command_stop_recording = 4,
  CommandRequest_Command_exit = 5,
  CommandRequest_Command_save_pre_buffer = 8,
  CommandRequest_Command_upload_measurement = 10,
  CommandRequest_Command_add_comment = 11,
  CommandRequest_Command_delete_measurement = 12,
  CommandRequest_Command_CommandRequest_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandRequest_Command_CommandRequest_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandRequest_Command_IsValid(int value);
constexpr CommandRequest_Command CommandRequest_Command_Command_MIN = CommandRequest_Command_none;
constexpr CommandRequest_Command CommandRequest_Command_Command_MAX = CommandRequest_Command_delete_measurement;
constexpr int CommandRequest_Command_Command_ARRAYSIZE = CommandRequest_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandRequest_Command_descriptor();
template<typename T>
inline const std::string& CommandRequest_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandRequest_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandRequest_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandRequest_Command_descriptor(), enum_t_value);
}
inline bool CommandRequest_Command_Parse(
    const std::string& name, CommandRequest_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandRequest_Command>(
    CommandRequest_Command_descriptor(), name, value);
}
enum ServiceResult : int {
  none = 0,
  success = 1,
  failed = 2,
  ServiceResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceResult_IsValid(int value);
constexpr ServiceResult ServiceResult_MIN = none;
constexpr ServiceResult ServiceResult_MAX = failed;
constexpr int ServiceResult_ARRAYSIZE = ServiceResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceResult_descriptor();
template<typename T>
inline const std::string& ServiceResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceResult_descriptor(), enum_t_value);
}
inline bool ServiceResult_Parse(
    const std::string& name, ServiceResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceResult>(
    ServiceResult_descriptor(), name, value);
}
// ===================================================================

class Configuration_ItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Configuration_ItemsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Configuration_ItemsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Configuration_ItemsEntry_DoNotUse();
  Configuration_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Configuration_ItemsEntry_DoNotUse& other);
  static const Configuration_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Configuration_ItemsEntry_DoNotUse*>(&_Configuration_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.rec_client.Configuration.ItemsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.rec_client.Configuration.ItemsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Configuration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.Configuration) */ {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(nullptr);
  }

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.Configuration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // map<string, string> items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.Configuration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Configuration_ItemsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.GetConfigRequest) */ {
 public:
  GetConfigRequest();
  virtual ~GetConfigRequest();

  GetConfigRequest(const GetConfigRequest& from);
  GetConfigRequest(GetConfigRequest&& from) noexcept
    : GetConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRequest& operator=(const GetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRequest& operator=(GetConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRequest*>(
               &_GetConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetConfigRequest& a, GetConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigRequest* New() const final {
    return CreateMaybeMessage<GetConfigRequest>(nullptr);
  }

  GetConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigRequest& from);
  void MergeFrom(const GetConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.GetConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.GetConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConfigResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.GetConfigResponse) */ {
 public:
  GetConfigResponse();
  virtual ~GetConfigResponse();

  GetConfigResponse(const GetConfigResponse& from);
  GetConfigResponse(GetConfigResponse&& from) noexcept
    : GetConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigResponse& operator=(const GetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigResponse& operator=(GetConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigResponse*>(
               &_GetConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetConfigResponse& a, GetConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigResponse* New() const final {
    return CreateMaybeMessage<GetConfigResponse>(nullptr);
  }

  GetConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigResponse& from);
  void MergeFrom(const GetConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.GetConfigResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kConfigFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .eCAL.pb.rec_client.Configuration config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::eCAL::pb::rec_client::Configuration& config() const;
  ::eCAL::pb::rec_client::Configuration* release_config();
  ::eCAL::pb::rec_client::Configuration* mutable_config();
  void set_allocated_config(::eCAL::pb::rec_client::Configuration* config);
  private:
  const ::eCAL::pb::rec_client::Configuration& _internal_config() const;
  ::eCAL::pb::rec_client::Configuration* _internal_mutable_config();
  public:

  // .eCAL.pb.rec_client.ServiceResult result = 2;
  void clear_result();
  ::eCAL::pb::rec_client::ServiceResult result() const;
  void set_result(::eCAL::pb::rec_client::ServiceResult value);
  private:
  ::eCAL::pb::rec_client::ServiceResult _internal_result() const;
  void _internal_set_result(::eCAL::pb::rec_client::ServiceResult value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.GetConfigResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::eCAL::pb::rec_client::Configuration* config_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.SetConfigRequest) */ {
 public:
  SetConfigRequest();
  virtual ~SetConfigRequest();

  SetConfigRequest(const SetConfigRequest& from);
  SetConfigRequest(SetConfigRequest&& from) noexcept
    : SetConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetConfigRequest& operator=(const SetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetConfigRequest& operator=(SetConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetConfigRequest*>(
               &_SetConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetConfigRequest& a, SetConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetConfigRequest* New() const final {
    return CreateMaybeMessage<SetConfigRequest>(nullptr);
  }

  SetConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetConfigRequest& from);
  void MergeFrom(const SetConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.SetConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // .eCAL.pb.rec_client.Configuration config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::eCAL::pb::rec_client::Configuration& config() const;
  ::eCAL::pb::rec_client::Configuration* release_config();
  ::eCAL::pb::rec_client::Configuration* mutable_config();
  void set_allocated_config(::eCAL::pb::rec_client::Configuration* config);
  private:
  const ::eCAL::pb::rec_client::Configuration& _internal_config() const;
  ::eCAL::pb::rec_client::Configuration* _internal_mutable_config();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.SetConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eCAL::pb::rec_client::Configuration* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CommandRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.CommandRequest) */ {
 public:
  CommandRequest();
  virtual ~CommandRequest();

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRequest* New() const final {
    return CreateMaybeMessage<CommandRequest>(nullptr);
  }

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRequest& from);
  void MergeFrom(const CommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.CommandRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommandRequest_Command Command;
  static constexpr Command none =
    CommandRequest_Command_none;
  static constexpr Command initialize =
    CommandRequest_Command_initialize;
  static constexpr Command de_initialize =
    CommandRequest_Command_de_initialize;
  static constexpr Command start_recording =
    CommandRequest_Command_start_recording;
  static constexpr Command stop_recording =
    CommandRequest_Command_stop_recording;
  static constexpr Command exit =
    CommandRequest_Command_exit;
  static constexpr Command save_pre_buffer =
    CommandRequest_Command_save_pre_buffer;
  static constexpr Command upload_measurement =
    CommandRequest_Command_upload_measurement;
  static constexpr Command add_comment =
    CommandRequest_Command_add_comment;
  static constexpr Command delete_measurement =
    CommandRequest_Command_delete_measurement;
  static inline bool Command_IsValid(int value) {
    return CommandRequest_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    CommandRequest_Command_Command_MIN;
  static constexpr Command Command_MAX =
    CommandRequest_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    CommandRequest_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return CommandRequest_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return CommandRequest_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return CommandRequest_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandParamsFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // .eCAL.pb.rec_client.Configuration command_params = 2;
  bool has_command_params() const;
  private:
  bool _internal_has_command_params() const;
  public:
  void clear_command_params();
  const ::eCAL::pb::rec_client::Configuration& command_params() const;
  ::eCAL::pb::rec_client::Configuration* release_command_params();
  ::eCAL::pb::rec_client::Configuration* mutable_command_params();
  void set_allocated_command_params(::eCAL::pb::rec_client::Configuration* command_params);
  private:
  const ::eCAL::pb::rec_client::Configuration& _internal_command_params() const;
  ::eCAL::pb::rec_client::Configuration* _internal_mutable_command_params();
  public:

  // .eCAL.pb.rec_client.CommandRequest.Command command = 1;
  void clear_command();
  ::eCAL::pb::rec_client::CommandRequest_Command command() const;
  void set_command(::eCAL::pb::rec_client::CommandRequest_Command value);
  private:
  ::eCAL::pb::rec_client::CommandRequest_Command _internal_command() const;
  void _internal_set_command(::eCAL::pb::rec_client::CommandRequest_Command value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.CommandRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eCAL::pb::rec_client::Configuration* command_params_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.GetStateRequest) */ {
 public:
  GetStateRequest();
  virtual ~GetStateRequest();

  GetStateRequest(const GetStateRequest& from);
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateRequest* New() const final {
    return CreateMaybeMessage<GetStateRequest>(nullptr);
  }

  GetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateRequest& from);
  void MergeFrom(const GetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.GetStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.GetStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.rec_client.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.rec_client.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .eCAL.pb.rec_client.ServiceResult result = 1;
  void clear_result();
  ::eCAL::pb::rec_client::ServiceResult result() const;
  void set_result(::eCAL::pb::rec_client::ServiceResult value);
  private:
  ::eCAL::pb::rec_client::ServiceResult _internal_result() const;
  void _internal_set_result(::eCAL::pb::rec_client::ServiceResult value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.rec_client.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto;
};
// ===================================================================

class EcalRecClientService_Stub;

class EcalRecClientService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EcalRecClientService() {};
 public:
  virtual ~EcalRecClientService();

  typedef EcalRecClientService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::GetConfigRequest* request,
                       ::eCAL::pb::rec_client::GetConfigResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::SetConfigRequest* request,
                       ::eCAL::pb::rec_client::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetCommand(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::CommandRequest* request,
                       ::eCAL::pb::rec_client::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::GetStateRequest* request,
                       ::eCAL::pb::rec_client::State* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EcalRecClientService);
};

class EcalRecClientService_Stub : public EcalRecClientService {
 public:
  EcalRecClientService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EcalRecClientService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EcalRecClientService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EcalRecClientService ------------------------------------------

  void GetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::GetConfigRequest* request,
                       ::eCAL::pb::rec_client::GetConfigResponse* response,
                       ::google::protobuf::Closure* done);
  void SetConfig(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::SetConfigRequest* request,
                       ::eCAL::pb::rec_client::Response* response,
                       ::google::protobuf::Closure* done);
  void SetCommand(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::CommandRequest* request,
                       ::eCAL::pb::rec_client::Response* response,
                       ::google::protobuf::Closure* done);
  void GetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::rec_client::GetStateRequest* request,
                       ::eCAL::pb::rec_client::State* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EcalRecClientService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Configuration

// map<string, string> items = 1;
inline int Configuration::_internal_items_size() const {
  return items_.size();
}
inline int Configuration::items_size() const {
  return _internal_items_size();
}
inline void Configuration::clear_items() {
  items_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Configuration::_internal_items() const {
  return items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Configuration::items() const {
  // @@protoc_insertion_point(field_map:eCAL.pb.rec_client.Configuration.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Configuration::_internal_mutable_items() {
  return items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Configuration::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:eCAL.pb.rec_client.Configuration.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// GetConfigRequest

// -------------------------------------------------------------------

// GetConfigResponse

// .eCAL.pb.rec_client.Configuration config = 1;
inline bool GetConfigResponse::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool GetConfigResponse::has_config() const {
  return _internal_has_config();
}
inline void GetConfigResponse::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::eCAL::pb::rec_client::Configuration& GetConfigResponse::_internal_config() const {
  const ::eCAL::pb::rec_client::Configuration* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::Configuration*>(
      &::eCAL::pb::rec_client::_Configuration_default_instance_);
}
inline const ::eCAL::pb::rec_client::Configuration& GetConfigResponse::config() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.GetConfigResponse.config)
  return _internal_config();
}
inline ::eCAL::pb::rec_client::Configuration* GetConfigResponse::release_config() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.GetConfigResponse.config)
  
  ::eCAL::pb::rec_client::Configuration* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::Configuration* GetConfigResponse::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::Configuration>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::eCAL::pb::rec_client::Configuration* GetConfigResponse::mutable_config() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.GetConfigResponse.config)
  return _internal_mutable_config();
}
inline void GetConfigResponse::set_allocated_config(::eCAL::pb::rec_client::Configuration* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.GetConfigResponse.config)
}

// .eCAL.pb.rec_client.ServiceResult result = 2;
inline void GetConfigResponse::clear_result() {
  result_ = 0;
}
inline ::eCAL::pb::rec_client::ServiceResult GetConfigResponse::_internal_result() const {
  return static_cast< ::eCAL::pb::rec_client::ServiceResult >(result_);
}
inline ::eCAL::pb::rec_client::ServiceResult GetConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.GetConfigResponse.result)
  return _internal_result();
}
inline void GetConfigResponse::_internal_set_result(::eCAL::pb::rec_client::ServiceResult value) {
  
  result_ = value;
}
inline void GetConfigResponse::set_result(::eCAL::pb::rec_client::ServiceResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.GetConfigResponse.result)
}

// string error = 3;
inline void GetConfigResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConfigResponse::error() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.GetConfigResponse.error)
  return _internal_error();
}
inline void GetConfigResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.GetConfigResponse.error)
}
inline std::string* GetConfigResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.GetConfigResponse.error)
  return _internal_mutable_error();
}
inline const std::string& GetConfigResponse::_internal_error() const {
  return error_.GetNoArena();
}
inline void GetConfigResponse::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConfigResponse::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.GetConfigResponse.error)
}
inline void GetConfigResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.GetConfigResponse.error)
}
inline void GetConfigResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.GetConfigResponse.error)
}
inline std::string* GetConfigResponse::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConfigResponse::release_error() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.GetConfigResponse.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConfigResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.GetConfigResponse.error)
}

// -------------------------------------------------------------------

// SetConfigRequest

// .eCAL.pb.rec_client.Configuration config = 1;
inline bool SetConfigRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SetConfigRequest::has_config() const {
  return _internal_has_config();
}
inline void SetConfigRequest::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::eCAL::pb::rec_client::Configuration& SetConfigRequest::_internal_config() const {
  const ::eCAL::pb::rec_client::Configuration* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::Configuration*>(
      &::eCAL::pb::rec_client::_Configuration_default_instance_);
}
inline const ::eCAL::pb::rec_client::Configuration& SetConfigRequest::config() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.SetConfigRequest.config)
  return _internal_config();
}
inline ::eCAL::pb::rec_client::Configuration* SetConfigRequest::release_config() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.SetConfigRequest.config)
  
  ::eCAL::pb::rec_client::Configuration* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::Configuration* SetConfigRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::Configuration>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::eCAL::pb::rec_client::Configuration* SetConfigRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.SetConfigRequest.config)
  return _internal_mutable_config();
}
inline void SetConfigRequest::set_allocated_config(::eCAL::pb::rec_client::Configuration* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.SetConfigRequest.config)
}

// -------------------------------------------------------------------

// CommandRequest

// .eCAL.pb.rec_client.CommandRequest.Command command = 1;
inline void CommandRequest::clear_command() {
  command_ = 0;
}
inline ::eCAL::pb::rec_client::CommandRequest_Command CommandRequest::_internal_command() const {
  return static_cast< ::eCAL::pb::rec_client::CommandRequest_Command >(command_);
}
inline ::eCAL::pb::rec_client::CommandRequest_Command CommandRequest::command() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.CommandRequest.command)
  return _internal_command();
}
inline void CommandRequest::_internal_set_command(::eCAL::pb::rec_client::CommandRequest_Command value) {
  
  command_ = value;
}
inline void CommandRequest::set_command(::eCAL::pb::rec_client::CommandRequest_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.CommandRequest.command)
}

// .eCAL.pb.rec_client.Configuration command_params = 2;
inline bool CommandRequest::_internal_has_command_params() const {
  return this != internal_default_instance() && command_params_ != nullptr;
}
inline bool CommandRequest::has_command_params() const {
  return _internal_has_command_params();
}
inline void CommandRequest::clear_command_params() {
  if (GetArenaNoVirtual() == nullptr && command_params_ != nullptr) {
    delete command_params_;
  }
  command_params_ = nullptr;
}
inline const ::eCAL::pb::rec_client::Configuration& CommandRequest::_internal_command_params() const {
  const ::eCAL::pb::rec_client::Configuration* p = command_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::rec_client::Configuration*>(
      &::eCAL::pb::rec_client::_Configuration_default_instance_);
}
inline const ::eCAL::pb::rec_client::Configuration& CommandRequest::command_params() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.CommandRequest.command_params)
  return _internal_command_params();
}
inline ::eCAL::pb::rec_client::Configuration* CommandRequest::release_command_params() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.CommandRequest.command_params)
  
  ::eCAL::pb::rec_client::Configuration* temp = command_params_;
  command_params_ = nullptr;
  return temp;
}
inline ::eCAL::pb::rec_client::Configuration* CommandRequest::_internal_mutable_command_params() {
  
  if (command_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::rec_client::Configuration>(GetArenaNoVirtual());
    command_params_ = p;
  }
  return command_params_;
}
inline ::eCAL::pb::rec_client::Configuration* CommandRequest::mutable_command_params() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.CommandRequest.command_params)
  return _internal_mutable_command_params();
}
inline void CommandRequest::set_allocated_command_params(::eCAL::pb::rec_client::Configuration* command_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_params_;
  }
  if (command_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_params, submessage_arena);
    }
    
  } else {
    
  }
  command_params_ = command_params;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.CommandRequest.command_params)
}

// -------------------------------------------------------------------

// GetStateRequest

// -------------------------------------------------------------------

// Response

// .eCAL.pb.rec_client.ServiceResult result = 1;
inline void Response::clear_result() {
  result_ = 0;
}
inline ::eCAL::pb::rec_client::ServiceResult Response::_internal_result() const {
  return static_cast< ::eCAL::pb::rec_client::ServiceResult >(result_);
}
inline ::eCAL::pb::rec_client::ServiceResult Response::result() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.Response.result)
  return _internal_result();
}
inline void Response::_internal_set_result(::eCAL::pb::rec_client::ServiceResult value) {
  
  result_ = value;
}
inline void Response::set_result(::eCAL::pb::rec_client::ServiceResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.Response.result)
}

// string error = 2;
inline void Response::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.rec_client.Response.error)
  return _internal_error();
}
inline void Response::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.rec_client.Response.error)
}
inline std::string* Response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.rec_client.Response.error)
  return _internal_mutable_error();
}
inline const std::string& Response::_internal_error() const {
  return error_.GetNoArena();
}
inline void Response::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.rec_client.Response.error)
}
inline void Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.rec_client.Response.error)
}
inline void Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.rec_client.Response.error)
}
inline std::string* Response::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:eCAL.pb.rec_client.Response.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.rec_client.Response.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rec_client
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::rec_client::CommandRequest_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_client::CommandRequest_Command>() {
  return ::eCAL::pb::rec_client::CommandRequest_Command_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::rec_client::ServiceResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::rec_client::ServiceResult>() {
  return ::eCAL::pb::rec_client::ServiceResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2frec_2fclient_5fservice_2eproto
