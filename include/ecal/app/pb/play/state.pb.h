// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/play/state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fplay_2fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fplay_2fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2fplay_2fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2fplay_2fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto;
namespace eCAL {
namespace pb {
namespace play {
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_MeasurementInfo;
class State_MeasurementInfoDefaultTypeInternal;
extern State_MeasurementInfoDefaultTypeInternal _State_MeasurementInfo_default_instance_;
class State_Settings;
class State_SettingsDefaultTypeInternal;
extern State_SettingsDefaultTypeInternal _State_Settings_default_instance_;
}  // namespace play
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::play::State* Arena::CreateMaybeMessage<::eCAL::pb::play::State>(Arena*);
template<> ::eCAL::pb::play::State_MeasurementInfo* Arena::CreateMaybeMessage<::eCAL::pb::play::State_MeasurementInfo>(Arena*);
template<> ::eCAL::pb::play::State_Settings* Arena::CreateMaybeMessage<::eCAL::pb::play::State_Settings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace play {

// ===================================================================

class State_Settings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.play.State.Settings) */ {
 public:
  State_Settings();
  virtual ~State_Settings();

  State_Settings(const State_Settings& from);
  State_Settings(State_Settings&& from) noexcept
    : State_Settings() {
    *this = ::std::move(from);
  }

  inline State_Settings& operator=(const State_Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_Settings& operator=(State_Settings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_Settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_Settings* internal_default_instance() {
    return reinterpret_cast<const State_Settings*>(
               &_State_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State_Settings& a, State_Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(State_Settings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_Settings* New() const final {
    return CreateMaybeMessage<State_Settings>(nullptr);
  }

  State_Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_Settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_Settings& from);
  void MergeFrom(const State_Settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_Settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.play.State.Settings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaySpeedFieldNumber = 1,
    kLimitIntervalLowerIndexFieldNumber = 6,
    kLimitIntervalUpperIndexFieldNumber = 7,
    kLimitPlaySpeedFieldNumber = 2,
    kRepeatEnabledFieldNumber = 3,
    kFramedroppingAllowedFieldNumber = 4,
    kEnforceDelayAccuracyEnabledFieldNumber = 5,
  };
  // double play_speed = 1;
  void clear_play_speed();
  double play_speed() const;
  void set_play_speed(double value);
  private:
  double _internal_play_speed() const;
  void _internal_set_play_speed(double value);
  public:

  // sint64 limit_interval_lower_index = 6;
  void clear_limit_interval_lower_index();
  ::PROTOBUF_NAMESPACE_ID::int64 limit_interval_lower_index() const;
  void set_limit_interval_lower_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit_interval_lower_index() const;
  void _internal_set_limit_interval_lower_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 limit_interval_upper_index = 7;
  void clear_limit_interval_upper_index();
  ::PROTOBUF_NAMESPACE_ID::int64 limit_interval_upper_index() const;
  void set_limit_interval_upper_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit_interval_upper_index() const;
  void _internal_set_limit_interval_upper_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool limit_play_speed = 2;
  void clear_limit_play_speed();
  bool limit_play_speed() const;
  void set_limit_play_speed(bool value);
  private:
  bool _internal_limit_play_speed() const;
  void _internal_set_limit_play_speed(bool value);
  public:

  // bool repeat_enabled = 3;
  void clear_repeat_enabled();
  bool repeat_enabled() const;
  void set_repeat_enabled(bool value);
  private:
  bool _internal_repeat_enabled() const;
  void _internal_set_repeat_enabled(bool value);
  public:

  // bool framedropping_allowed = 4;
  void clear_framedropping_allowed();
  bool framedropping_allowed() const;
  void set_framedropping_allowed(bool value);
  private:
  bool _internal_framedropping_allowed() const;
  void _internal_set_framedropping_allowed(bool value);
  public:

  // bool enforce_delay_accuracy_enabled = 5;
  void clear_enforce_delay_accuracy_enabled();
  bool enforce_delay_accuracy_enabled() const;
  void set_enforce_delay_accuracy_enabled(bool value);
  private:
  bool _internal_enforce_delay_accuracy_enabled() const;
  void _internal_set_enforce_delay_accuracy_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.play.State.Settings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double play_speed_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_interval_lower_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_interval_upper_index_;
  bool limit_play_speed_;
  bool repeat_enabled_;
  bool framedropping_allowed_;
  bool enforce_delay_accuracy_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fplay_2fstate_2eproto;
};
// -------------------------------------------------------------------

class State_MeasurementInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.play.State.MeasurementInfo) */ {
 public:
  State_MeasurementInfo();
  virtual ~State_MeasurementInfo();

  State_MeasurementInfo(const State_MeasurementInfo& from);
  State_MeasurementInfo(State_MeasurementInfo&& from) noexcept
    : State_MeasurementInfo() {
    *this = ::std::move(from);
  }

  inline State_MeasurementInfo& operator=(const State_MeasurementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_MeasurementInfo& operator=(State_MeasurementInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_MeasurementInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_MeasurementInfo* internal_default_instance() {
    return reinterpret_cast<const State_MeasurementInfo*>(
               &_State_MeasurementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State_MeasurementInfo& a, State_MeasurementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(State_MeasurementInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_MeasurementInfo* New() const final {
    return CreateMaybeMessage<State_MeasurementInfo>(nullptr);
  }

  State_MeasurementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_MeasurementInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_MeasurementInfo& from);
  void MergeFrom(const State_MeasurementInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_MeasurementInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.play.State.MeasurementInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kFrameCountFieldNumber = 2,
    kFirstTimestampNsecsFieldNumber = 3,
    kLastTimestampNsecsFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // sint64 frame_count = 2;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_count() const;
  void _internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 first_timestamp_nsecs = 3;
  void clear_first_timestamp_nsecs();
  ::PROTOBUF_NAMESPACE_ID::int64 first_timestamp_nsecs() const;
  void set_first_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_first_timestamp_nsecs() const;
  void _internal_set_first_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 last_timestamp_nsecs = 4;
  void clear_last_timestamp_nsecs();
  ::PROTOBUF_NAMESPACE_ID::int64 last_timestamp_nsecs() const;
  void set_last_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_timestamp_nsecs() const;
  void _internal_set_last_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.play.State.MeasurementInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_timestamp_nsecs_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_timestamp_nsecs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fplay_2fstate_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.play.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.play.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fplay_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef State_Settings Settings;
  typedef State_MeasurementInfo MeasurementInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 11,
    kMeasurementInfoFieldNumber = 15,
    kSettingsFieldNumber = 16,
    kProcessIdFieldNumber = 12,
    kPlayingFieldNumber = 13,
    kMeasurementLoadedFieldNumber = 14,
    kActualSpeedFieldNumber = 17,
    kCurrentMeasurementIndexFieldNumber = 18,
    kCurrentMeasurementTimestampNsecsFieldNumber = 19,
  };
  // string host_name = 11;
  void clear_host_name();
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // .eCAL.pb.play.State.MeasurementInfo measurement_info = 15;
  bool has_measurement_info() const;
  private:
  bool _internal_has_measurement_info() const;
  public:
  void clear_measurement_info();
  const ::eCAL::pb::play::State_MeasurementInfo& measurement_info() const;
  ::eCAL::pb::play::State_MeasurementInfo* release_measurement_info();
  ::eCAL::pb::play::State_MeasurementInfo* mutable_measurement_info();
  void set_allocated_measurement_info(::eCAL::pb::play::State_MeasurementInfo* measurement_info);
  private:
  const ::eCAL::pb::play::State_MeasurementInfo& _internal_measurement_info() const;
  ::eCAL::pb::play::State_MeasurementInfo* _internal_mutable_measurement_info();
  public:

  // .eCAL.pb.play.State.Settings settings = 16;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::eCAL::pb::play::State_Settings& settings() const;
  ::eCAL::pb::play::State_Settings* release_settings();
  ::eCAL::pb::play::State_Settings* mutable_settings();
  void set_allocated_settings(::eCAL::pb::play::State_Settings* settings);
  private:
  const ::eCAL::pb::play::State_Settings& _internal_settings() const;
  ::eCAL::pb::play::State_Settings* _internal_mutable_settings();
  public:

  // sint32 process_id = 12;
  void clear_process_id();
  ::PROTOBUF_NAMESPACE_ID::int32 process_id() const;
  void set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_process_id() const;
  void _internal_set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool playing = 13;
  void clear_playing();
  bool playing() const;
  void set_playing(bool value);
  private:
  bool _internal_playing() const;
  void _internal_set_playing(bool value);
  public:

  // bool measurement_loaded = 14;
  void clear_measurement_loaded();
  bool measurement_loaded() const;
  void set_measurement_loaded(bool value);
  private:
  bool _internal_measurement_loaded() const;
  void _internal_set_measurement_loaded(bool value);
  public:

  // double actual_speed = 17;
  void clear_actual_speed();
  double actual_speed() const;
  void set_actual_speed(double value);
  private:
  double _internal_actual_speed() const;
  void _internal_set_actual_speed(double value);
  public:

  // sint64 current_measurement_index = 18;
  void clear_current_measurement_index();
  ::PROTOBUF_NAMESPACE_ID::int64 current_measurement_index() const;
  void set_current_measurement_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_measurement_index() const;
  void _internal_set_current_measurement_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 current_measurement_timestamp_nsecs = 19;
  void clear_current_measurement_timestamp_nsecs();
  ::PROTOBUF_NAMESPACE_ID::int64 current_measurement_timestamp_nsecs() const;
  void set_current_measurement_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_measurement_timestamp_nsecs() const;
  void _internal_set_current_measurement_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.play.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::eCAL::pb::play::State_MeasurementInfo* measurement_info_;
  ::eCAL::pb::play::State_Settings* settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_id_;
  bool playing_;
  bool measurement_loaded_;
  double actual_speed_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_measurement_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_measurement_timestamp_nsecs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fplay_2fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State_Settings

// double play_speed = 1;
inline void State_Settings::clear_play_speed() {
  play_speed_ = 0;
}
inline double State_Settings::_internal_play_speed() const {
  return play_speed_;
}
inline double State_Settings::play_speed() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.play_speed)
  return _internal_play_speed();
}
inline void State_Settings::_internal_set_play_speed(double value) {
  
  play_speed_ = value;
}
inline void State_Settings::set_play_speed(double value) {
  _internal_set_play_speed(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.play_speed)
}

// bool limit_play_speed = 2;
inline void State_Settings::clear_limit_play_speed() {
  limit_play_speed_ = false;
}
inline bool State_Settings::_internal_limit_play_speed() const {
  return limit_play_speed_;
}
inline bool State_Settings::limit_play_speed() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.limit_play_speed)
  return _internal_limit_play_speed();
}
inline void State_Settings::_internal_set_limit_play_speed(bool value) {
  
  limit_play_speed_ = value;
}
inline void State_Settings::set_limit_play_speed(bool value) {
  _internal_set_limit_play_speed(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.limit_play_speed)
}

// bool repeat_enabled = 3;
inline void State_Settings::clear_repeat_enabled() {
  repeat_enabled_ = false;
}
inline bool State_Settings::_internal_repeat_enabled() const {
  return repeat_enabled_;
}
inline bool State_Settings::repeat_enabled() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.repeat_enabled)
  return _internal_repeat_enabled();
}
inline void State_Settings::_internal_set_repeat_enabled(bool value) {
  
  repeat_enabled_ = value;
}
inline void State_Settings::set_repeat_enabled(bool value) {
  _internal_set_repeat_enabled(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.repeat_enabled)
}

// bool framedropping_allowed = 4;
inline void State_Settings::clear_framedropping_allowed() {
  framedropping_allowed_ = false;
}
inline bool State_Settings::_internal_framedropping_allowed() const {
  return framedropping_allowed_;
}
inline bool State_Settings::framedropping_allowed() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.framedropping_allowed)
  return _internal_framedropping_allowed();
}
inline void State_Settings::_internal_set_framedropping_allowed(bool value) {
  
  framedropping_allowed_ = value;
}
inline void State_Settings::set_framedropping_allowed(bool value) {
  _internal_set_framedropping_allowed(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.framedropping_allowed)
}

// bool enforce_delay_accuracy_enabled = 5;
inline void State_Settings::clear_enforce_delay_accuracy_enabled() {
  enforce_delay_accuracy_enabled_ = false;
}
inline bool State_Settings::_internal_enforce_delay_accuracy_enabled() const {
  return enforce_delay_accuracy_enabled_;
}
inline bool State_Settings::enforce_delay_accuracy_enabled() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.enforce_delay_accuracy_enabled)
  return _internal_enforce_delay_accuracy_enabled();
}
inline void State_Settings::_internal_set_enforce_delay_accuracy_enabled(bool value) {
  
  enforce_delay_accuracy_enabled_ = value;
}
inline void State_Settings::set_enforce_delay_accuracy_enabled(bool value) {
  _internal_set_enforce_delay_accuracy_enabled(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.enforce_delay_accuracy_enabled)
}

// sint64 limit_interval_lower_index = 6;
inline void State_Settings::clear_limit_interval_lower_index() {
  limit_interval_lower_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_Settings::_internal_limit_interval_lower_index() const {
  return limit_interval_lower_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_Settings::limit_interval_lower_index() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.limit_interval_lower_index)
  return _internal_limit_interval_lower_index();
}
inline void State_Settings::_internal_set_limit_interval_lower_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_interval_lower_index_ = value;
}
inline void State_Settings::set_limit_interval_lower_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit_interval_lower_index(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.limit_interval_lower_index)
}

// sint64 limit_interval_upper_index = 7;
inline void State_Settings::clear_limit_interval_upper_index() {
  limit_interval_upper_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_Settings::_internal_limit_interval_upper_index() const {
  return limit_interval_upper_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_Settings::limit_interval_upper_index() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.Settings.limit_interval_upper_index)
  return _internal_limit_interval_upper_index();
}
inline void State_Settings::_internal_set_limit_interval_upper_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_interval_upper_index_ = value;
}
inline void State_Settings::set_limit_interval_upper_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit_interval_upper_index(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.Settings.limit_interval_upper_index)
}

// -------------------------------------------------------------------

// State_MeasurementInfo

// string path = 1;
inline void State_MeasurementInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_MeasurementInfo::path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.MeasurementInfo.path)
  return _internal_path();
}
inline void State_MeasurementInfo::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.MeasurementInfo.path)
}
inline std::string* State_MeasurementInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.play.State.MeasurementInfo.path)
  return _internal_mutable_path();
}
inline const std::string& State_MeasurementInfo::_internal_path() const {
  return path_.GetNoArena();
}
inline void State_MeasurementInfo::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_MeasurementInfo::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.play.State.MeasurementInfo.path)
}
inline void State_MeasurementInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.play.State.MeasurementInfo.path)
}
inline void State_MeasurementInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.play.State.MeasurementInfo.path)
}
inline std::string* State_MeasurementInfo::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_MeasurementInfo::release_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.play.State.MeasurementInfo.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_MeasurementInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.play.State.MeasurementInfo.path)
}

// sint64 frame_count = 2;
inline void State_MeasurementInfo::clear_frame_count() {
  frame_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_MeasurementInfo::_internal_frame_count() const {
  return frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_MeasurementInfo::frame_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.MeasurementInfo.frame_count)
  return _internal_frame_count();
}
inline void State_MeasurementInfo::_internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_count_ = value;
}
inline void State_MeasurementInfo::set_frame_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.MeasurementInfo.frame_count)
}

// sint64 first_timestamp_nsecs = 3;
inline void State_MeasurementInfo::clear_first_timestamp_nsecs() {
  first_timestamp_nsecs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_MeasurementInfo::_internal_first_timestamp_nsecs() const {
  return first_timestamp_nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_MeasurementInfo::first_timestamp_nsecs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.MeasurementInfo.first_timestamp_nsecs)
  return _internal_first_timestamp_nsecs();
}
inline void State_MeasurementInfo::_internal_set_first_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  first_timestamp_nsecs_ = value;
}
inline void State_MeasurementInfo::set_first_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_first_timestamp_nsecs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.MeasurementInfo.first_timestamp_nsecs)
}

// sint64 last_timestamp_nsecs = 4;
inline void State_MeasurementInfo::clear_last_timestamp_nsecs() {
  last_timestamp_nsecs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_MeasurementInfo::_internal_last_timestamp_nsecs() const {
  return last_timestamp_nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State_MeasurementInfo::last_timestamp_nsecs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.MeasurementInfo.last_timestamp_nsecs)
  return _internal_last_timestamp_nsecs();
}
inline void State_MeasurementInfo::_internal_set_last_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_timestamp_nsecs_ = value;
}
inline void State_MeasurementInfo::set_last_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_timestamp_nsecs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.MeasurementInfo.last_timestamp_nsecs)
}

// -------------------------------------------------------------------

// State

// string host_name = 11;
inline void State::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::host_name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.host_name)
  return _internal_host_name();
}
inline void State::set_host_name(const std::string& value) {
  _internal_set_host_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.host_name)
}
inline std::string* State::mutable_host_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.play.State.host_name)
  return _internal_mutable_host_name();
}
inline const std::string& State::_internal_host_name() const {
  return host_name_.GetNoArena();
}
inline void State::_internal_set_host_name(const std::string& value) {
  
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_host_name(std::string&& value) {
  
  host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.play.State.host_name)
}
inline void State::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.play.State.host_name)
}
inline void State::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.play.State.host_name)
}
inline std::string* State::_internal_mutable_host_name() {
  
  return host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_host_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.play.State.host_name)
  
  return host_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.play.State.host_name)
}

// sint32 process_id = 12;
inline void State::clear_process_id() {
  process_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::_internal_process_id() const {
  return process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::process_id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.process_id)
  return _internal_process_id();
}
inline void State::_internal_set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_id_ = value;
}
inline void State::set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.process_id)
}

// bool playing = 13;
inline void State::clear_playing() {
  playing_ = false;
}
inline bool State::_internal_playing() const {
  return playing_;
}
inline bool State::playing() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.playing)
  return _internal_playing();
}
inline void State::_internal_set_playing(bool value) {
  
  playing_ = value;
}
inline void State::set_playing(bool value) {
  _internal_set_playing(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.playing)
}

// bool measurement_loaded = 14;
inline void State::clear_measurement_loaded() {
  measurement_loaded_ = false;
}
inline bool State::_internal_measurement_loaded() const {
  return measurement_loaded_;
}
inline bool State::measurement_loaded() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.measurement_loaded)
  return _internal_measurement_loaded();
}
inline void State::_internal_set_measurement_loaded(bool value) {
  
  measurement_loaded_ = value;
}
inline void State::set_measurement_loaded(bool value) {
  _internal_set_measurement_loaded(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.measurement_loaded)
}

// .eCAL.pb.play.State.MeasurementInfo measurement_info = 15;
inline bool State::_internal_has_measurement_info() const {
  return this != internal_default_instance() && measurement_info_ != nullptr;
}
inline bool State::has_measurement_info() const {
  return _internal_has_measurement_info();
}
inline void State::clear_measurement_info() {
  if (GetArenaNoVirtual() == nullptr && measurement_info_ != nullptr) {
    delete measurement_info_;
  }
  measurement_info_ = nullptr;
}
inline const ::eCAL::pb::play::State_MeasurementInfo& State::_internal_measurement_info() const {
  const ::eCAL::pb::play::State_MeasurementInfo* p = measurement_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::play::State_MeasurementInfo*>(
      &::eCAL::pb::play::_State_MeasurementInfo_default_instance_);
}
inline const ::eCAL::pb::play::State_MeasurementInfo& State::measurement_info() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.measurement_info)
  return _internal_measurement_info();
}
inline ::eCAL::pb::play::State_MeasurementInfo* State::release_measurement_info() {
  // @@protoc_insertion_point(field_release:eCAL.pb.play.State.measurement_info)
  
  ::eCAL::pb::play::State_MeasurementInfo* temp = measurement_info_;
  measurement_info_ = nullptr;
  return temp;
}
inline ::eCAL::pb::play::State_MeasurementInfo* State::_internal_mutable_measurement_info() {
  
  if (measurement_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::play::State_MeasurementInfo>(GetArenaNoVirtual());
    measurement_info_ = p;
  }
  return measurement_info_;
}
inline ::eCAL::pb::play::State_MeasurementInfo* State::mutable_measurement_info() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.play.State.measurement_info)
  return _internal_mutable_measurement_info();
}
inline void State::set_allocated_measurement_info(::eCAL::pb::play::State_MeasurementInfo* measurement_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete measurement_info_;
  }
  if (measurement_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measurement_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurement_info, submessage_arena);
    }
    
  } else {
    
  }
  measurement_info_ = measurement_info;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.play.State.measurement_info)
}

// .eCAL.pb.play.State.Settings settings = 16;
inline bool State::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool State::has_settings() const {
  return _internal_has_settings();
}
inline void State::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::eCAL::pb::play::State_Settings& State::_internal_settings() const {
  const ::eCAL::pb::play::State_Settings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::play::State_Settings*>(
      &::eCAL::pb::play::_State_Settings_default_instance_);
}
inline const ::eCAL::pb::play::State_Settings& State::settings() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.settings)
  return _internal_settings();
}
inline ::eCAL::pb::play::State_Settings* State::release_settings() {
  // @@protoc_insertion_point(field_release:eCAL.pb.play.State.settings)
  
  ::eCAL::pb::play::State_Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::eCAL::pb::play::State_Settings* State::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::play::State_Settings>(GetArenaNoVirtual());
    settings_ = p;
  }
  return settings_;
}
inline ::eCAL::pb::play::State_Settings* State::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.play.State.settings)
  return _internal_mutable_settings();
}
inline void State::set_allocated_settings(::eCAL::pb::play::State_Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.play.State.settings)
}

// double actual_speed = 17;
inline void State::clear_actual_speed() {
  actual_speed_ = 0;
}
inline double State::_internal_actual_speed() const {
  return actual_speed_;
}
inline double State::actual_speed() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.actual_speed)
  return _internal_actual_speed();
}
inline void State::_internal_set_actual_speed(double value) {
  
  actual_speed_ = value;
}
inline void State::set_actual_speed(double value) {
  _internal_set_actual_speed(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.actual_speed)
}

// sint64 current_measurement_index = 18;
inline void State::clear_current_measurement_index() {
  current_measurement_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::_internal_current_measurement_index() const {
  return current_measurement_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::current_measurement_index() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.current_measurement_index)
  return _internal_current_measurement_index();
}
inline void State::_internal_set_current_measurement_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_measurement_index_ = value;
}
inline void State::set_current_measurement_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_measurement_index(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.current_measurement_index)
}

// sint64 current_measurement_timestamp_nsecs = 19;
inline void State::clear_current_measurement_timestamp_nsecs() {
  current_measurement_timestamp_nsecs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::_internal_current_measurement_timestamp_nsecs() const {
  return current_measurement_timestamp_nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::current_measurement_timestamp_nsecs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.play.State.current_measurement_timestamp_nsecs)
  return _internal_current_measurement_timestamp_nsecs();
}
inline void State::_internal_set_current_measurement_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_measurement_timestamp_nsecs_ = value;
}
inline void State::set_current_measurement_timestamp_nsecs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_measurement_timestamp_nsecs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.play.State.current_measurement_timestamp_nsecs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace play
}  // namespace pb
}  // namespace eCAL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fplay_2fstate_2eproto
