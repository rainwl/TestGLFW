// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/mma/mma.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fmma_2fmma_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fmma_2fmma_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2fmma_2fmma_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
namespace eCAL {
namespace pb {
namespace mma {
class Disk;
class DiskDefaultTypeInternal;
extern DiskDefaultTypeInternal _Disk_default_instance_;
class Memory;
class MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class Network;
class NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
class Process;
class ProcessDefaultTypeInternal;
extern ProcessDefaultTypeInternal _Process_default_instance_;
class ProcessesCPU;
class ProcessesCPUDefaultTypeInternal;
extern ProcessesCPUDefaultTypeInternal _ProcessesCPU_default_instance_;
class ProcessesMemory;
class ProcessesMemoryDefaultTypeInternal;
extern ProcessesMemoryDefaultTypeInternal _ProcessesMemory_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class Temperature;
class TemperatureDefaultTypeInternal;
extern TemperatureDefaultTypeInternal _Temperature_default_instance_;
}  // namespace mma
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::mma::Disk* Arena::CreateMaybeMessage<::eCAL::pb::mma::Disk>(Arena*);
template<> ::eCAL::pb::mma::Memory* Arena::CreateMaybeMessage<::eCAL::pb::mma::Memory>(Arena*);
template<> ::eCAL::pb::mma::Network* Arena::CreateMaybeMessage<::eCAL::pb::mma::Network>(Arena*);
template<> ::eCAL::pb::mma::Process* Arena::CreateMaybeMessage<::eCAL::pb::mma::Process>(Arena*);
template<> ::eCAL::pb::mma::ProcessesCPU* Arena::CreateMaybeMessage<::eCAL::pb::mma::ProcessesCPU>(Arena*);
template<> ::eCAL::pb::mma::ProcessesMemory* Arena::CreateMaybeMessage<::eCAL::pb::mma::ProcessesMemory>(Arena*);
template<> ::eCAL::pb::mma::State* Arena::CreateMaybeMessage<::eCAL::pb::mma::State>(Arena*);
template<> ::eCAL::pb::mma::Temperature* Arena::CreateMaybeMessage<::eCAL::pb::mma::Temperature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace mma {

// ===================================================================

class Disk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.Disk) */ {
 public:
  Disk();
  virtual ~Disk();

  Disk(const Disk& from);
  Disk(Disk&& from) noexcept
    : Disk() {
    *this = ::std::move(from);
  }

  inline Disk& operator=(const Disk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disk& operator=(Disk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Disk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Disk* internal_default_instance() {
    return reinterpret_cast<const Disk*>(
               &_Disk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Disk& a, Disk& b) {
    a.Swap(&b);
  }
  inline void Swap(Disk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Disk* New() const final {
    return CreateMaybeMessage<Disk>(nullptr);
  }

  Disk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Disk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Disk& from);
  void MergeFrom(const Disk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.Disk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReadFieldNumber = 2,
    kWriteFieldNumber = 3,
    kAvailableFieldNumber = 4,
    kCapacityFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double read = 2;
  void clear_read();
  double read() const;
  void set_read(double value);
  private:
  double _internal_read() const;
  void _internal_set_read(double value);
  public:

  // double write = 3;
  void clear_write();
  double write() const;
  void set_write(double value);
  private:
  double _internal_write() const;
  void _internal_set_write(double value);
  public:

  // uint64 available = 4;
  void clear_available();
  ::PROTOBUF_NAMESPACE_ID::uint64 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_available() const;
  void _internal_set_available(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 capacity = 5;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.Disk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double read_;
  double write_;
  ::PROTOBUF_NAMESPACE_ID::uint64 available_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class Network :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.Network) */ {
 public:
  Network();
  virtual ~Network();

  Network(const Network& from);
  Network(Network&& from) noexcept
    : Network() {
    *this = ::std::move(from);
  }

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline Network& operator=(Network&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Network& a, Network& b) {
    a.Swap(&b);
  }
  inline void Swap(Network* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Network* New() const final {
    return CreateMaybeMessage<Network>(nullptr);
  }

  Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Network>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.Network";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpAddressFieldNumber = 4,
    kSendFieldNumber = 2,
    kReceiveFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip_address = 4;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // double send = 2;
  void clear_send();
  double send() const;
  void set_send(double value);
  private:
  double _internal_send() const;
  void _internal_set_send(double value);
  public:

  // double receive = 3;
  void clear_receive();
  double receive() const;
  void set_receive(double value);
  private:
  double _internal_receive() const;
  void _internal_set_receive(double value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.Network)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  double send_;
  double receive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class Memory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.Memory) */ {
 public:
  Memory();
  virtual ~Memory();

  Memory(const Memory& from);
  Memory(Memory&& from) noexcept
    : Memory() {
    *this = ::std::move(from);
  }

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memory& operator=(Memory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Memory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Memory& a, Memory& b) {
    a.Swap(&b);
  }
  inline void Swap(Memory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Memory* New() const final {
    return CreateMaybeMessage<Memory>(nullptr);
  }

  Memory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.Memory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kAvailableFieldNumber = 2,
  };
  // uint64 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 available = 2;
  void clear_available();
  ::PROTOBUF_NAMESPACE_ID::uint64 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_available() const;
  void _internal_set_available(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.Memory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 available_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class Temperature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.Temperature) */ {
 public:
  Temperature();
  virtual ~Temperature();

  Temperature(const Temperature& from);
  Temperature(Temperature&& from) noexcept
    : Temperature() {
    *this = ::std::move(from);
  }

  inline Temperature& operator=(const Temperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Temperature& operator=(Temperature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Temperature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Temperature* internal_default_instance() {
    return reinterpret_cast<const Temperature*>(
               &_Temperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Temperature& a, Temperature& b) {
    a.Swap(&b);
  }
  inline void Swap(Temperature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Temperature* New() const final {
    return CreateMaybeMessage<Temperature>(nullptr);
  }

  Temperature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Temperature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Temperature& from);
  void MergeFrom(const Temperature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Temperature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.Temperature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
  };
  // float cpu = 1;
  void clear_cpu();
  float cpu() const;
  void set_cpu(float value);
  private:
  float _internal_cpu() const;
  void _internal_set_cpu(float value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.Temperature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class ProcessesMemory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.ProcessesMemory) */ {
 public:
  ProcessesMemory();
  virtual ~ProcessesMemory();

  ProcessesMemory(const ProcessesMemory& from);
  ProcessesMemory(ProcessesMemory&& from) noexcept
    : ProcessesMemory() {
    *this = ::std::move(from);
  }

  inline ProcessesMemory& operator=(const ProcessesMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessesMemory& operator=(ProcessesMemory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessesMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessesMemory* internal_default_instance() {
    return reinterpret_cast<const ProcessesMemory*>(
               &_ProcessesMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProcessesMemory& a, ProcessesMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessesMemory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessesMemory* New() const final {
    return CreateMaybeMessage<ProcessesMemory>(nullptr);
  }

  ProcessesMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessesMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessesMemory& from);
  void MergeFrom(const ProcessesMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessesMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.ProcessesMemory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentWorkingSetSizeFieldNumber = 1,
    kPeakWorkingSetSizeFieldNumber = 2,
  };
  // uint64 current_working_set_size = 1;
  void clear_current_working_set_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_working_set_size() const;
  void set_current_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_working_set_size() const;
  void _internal_set_current_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 peak_working_set_size = 2;
  void clear_peak_working_set_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 peak_working_set_size() const;
  void set_peak_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_peak_working_set_size() const;
  void _internal_set_peak_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.ProcessesMemory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_working_set_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 peak_working_set_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class ProcessesCPU :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.ProcessesCPU) */ {
 public:
  ProcessesCPU();
  virtual ~ProcessesCPU();

  ProcessesCPU(const ProcessesCPU& from);
  ProcessesCPU(ProcessesCPU&& from) noexcept
    : ProcessesCPU() {
    *this = ::std::move(from);
  }

  inline ProcessesCPU& operator=(const ProcessesCPU& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessesCPU& operator=(ProcessesCPU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessesCPU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessesCPU* internal_default_instance() {
    return reinterpret_cast<const ProcessesCPU*>(
               &_ProcessesCPU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessesCPU& a, ProcessesCPU& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessesCPU* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessesCPU* New() const final {
    return CreateMaybeMessage<ProcessesCPU>(nullptr);
  }

  ProcessesCPU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessesCPU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessesCPU& from);
  void MergeFrom(const ProcessesCPU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessesCPU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.ProcessesCPU";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuKernelTimeFieldNumber = 1,
    kCpuUserTimeFieldNumber = 2,
    kCpuCreationTimeFieldNumber = 3,
    kCpuLoadFieldNumber = 4,
  };
  // uint64 cpu_kernel_time = 1;
  void clear_cpu_kernel_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_kernel_time() const;
  void set_cpu_kernel_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_kernel_time() const;
  void _internal_set_cpu_kernel_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cpu_user_time = 2;
  void clear_cpu_user_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_user_time() const;
  void set_cpu_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_user_time() const;
  void _internal_set_cpu_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cpu_creation_time = 3;
  void clear_cpu_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_creation_time() const;
  void set_cpu_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cpu_creation_time() const;
  void _internal_set_cpu_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float cpu_load = 4;
  void clear_cpu_load();
  float cpu_load() const;
  void set_cpu_load(float value);
  private:
  float _internal_cpu_load() const;
  void _internal_set_cpu_load(float value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.ProcessesCPU)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_kernel_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_user_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_creation_time_;
  float cpu_load_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class Process :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.Process) */ {
 public:
  Process();
  virtual ~Process();

  Process(const Process& from);
  Process(Process&& from) noexcept
    : Process() {
    *this = ::std::move(from);
  }

  inline Process& operator=(const Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline Process& operator=(Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process* internal_default_instance() {
    return reinterpret_cast<const Process*>(
               &_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Process& a, Process& b) {
    a.Swap(&b);
  }
  inline void Swap(Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Process* New() const final {
    return CreateMaybeMessage<Process>(nullptr);
  }

  Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Process>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Process& from);
  void MergeFrom(const Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommandlineFieldNumber = 3,
    kUserFieldNumber = 7,
    kMemoryFieldNumber = 4,
    kCpuFieldNumber = 5,
    kIdFieldNumber = 2,
    kDebugFlagFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string commandline = 3;
  void clear_commandline();
  const std::string& commandline() const;
  void set_commandline(const std::string& value);
  void set_commandline(std::string&& value);
  void set_commandline(const char* value);
  void set_commandline(const char* value, size_t size);
  std::string* mutable_commandline();
  std::string* release_commandline();
  void set_allocated_commandline(std::string* commandline);
  private:
  const std::string& _internal_commandline() const;
  void _internal_set_commandline(const std::string& value);
  std::string* _internal_mutable_commandline();
  public:

  // string user = 7;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // .eCAL.pb.mma.ProcessesMemory memory = 4;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::eCAL::pb::mma::ProcessesMemory& memory() const;
  ::eCAL::pb::mma::ProcessesMemory* release_memory();
  ::eCAL::pb::mma::ProcessesMemory* mutable_memory();
  void set_allocated_memory(::eCAL::pb::mma::ProcessesMemory* memory);
  private:
  const ::eCAL::pb::mma::ProcessesMemory& _internal_memory() const;
  ::eCAL::pb::mma::ProcessesMemory* _internal_mutable_memory();
  public:

  // .eCAL.pb.mma.ProcessesCPU cpu = 5;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  const ::eCAL::pb::mma::ProcessesCPU& cpu() const;
  ::eCAL::pb::mma::ProcessesCPU* release_cpu();
  ::eCAL::pb::mma::ProcessesCPU* mutable_cpu();
  void set_allocated_cpu(::eCAL::pb::mma::ProcessesCPU* cpu);
  private:
  const ::eCAL::pb::mma::ProcessesCPU& _internal_cpu() const;
  ::eCAL::pb::mma::ProcessesCPU* _internal_mutable_cpu();
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool debug_flag = 6;
  void clear_debug_flag();
  bool debug_flag() const;
  void set_debug_flag(bool value);
  private:
  bool _internal_debug_flag() const;
  void _internal_set_debug_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::eCAL::pb::mma::ProcessesMemory* memory_;
  ::eCAL::pb::mma::ProcessesCPU* cpu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool debug_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.mma.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.mma.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fmma_2fmma_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisksFieldNumber = 3,
    kNetworksFieldNumber = 4,
    kProcessFieldNumber = 6,
    kOperatingSystemFieldNumber = 8,
    kMemoryFieldNumber = 2,
    kTemperatureFieldNumber = 5,
    kCpuLoadFieldNumber = 1,
    kNumberOfCpuCoresFieldNumber = 7,
  };
  // repeated .eCAL.pb.mma.Disk disks = 3;
  int disks_size() const;
  private:
  int _internal_disks_size() const;
  public:
  void clear_disks();
  ::eCAL::pb::mma::Disk* mutable_disks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Disk >*
      mutable_disks();
  private:
  const ::eCAL::pb::mma::Disk& _internal_disks(int index) const;
  ::eCAL::pb::mma::Disk* _internal_add_disks();
  public:
  const ::eCAL::pb::mma::Disk& disks(int index) const;
  ::eCAL::pb::mma::Disk* add_disks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Disk >&
      disks() const;

  // repeated .eCAL.pb.mma.Network networks = 4;
  int networks_size() const;
  private:
  int _internal_networks_size() const;
  public:
  void clear_networks();
  ::eCAL::pb::mma::Network* mutable_networks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Network >*
      mutable_networks();
  private:
  const ::eCAL::pb::mma::Network& _internal_networks(int index) const;
  ::eCAL::pb::mma::Network* _internal_add_networks();
  public:
  const ::eCAL::pb::mma::Network& networks(int index) const;
  ::eCAL::pb::mma::Network* add_networks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Network >&
      networks() const;

  // repeated .eCAL.pb.mma.Process process = 6;
  int process_size() const;
  private:
  int _internal_process_size() const;
  public:
  void clear_process();
  ::eCAL::pb::mma::Process* mutable_process(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Process >*
      mutable_process();
  private:
  const ::eCAL::pb::mma::Process& _internal_process(int index) const;
  ::eCAL::pb::mma::Process* _internal_add_process();
  public:
  const ::eCAL::pb::mma::Process& process(int index) const;
  ::eCAL::pb::mma::Process* add_process();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Process >&
      process() const;

  // string operating_system = 8;
  void clear_operating_system();
  const std::string& operating_system() const;
  void set_operating_system(const std::string& value);
  void set_operating_system(std::string&& value);
  void set_operating_system(const char* value);
  void set_operating_system(const char* value, size_t size);
  std::string* mutable_operating_system();
  std::string* release_operating_system();
  void set_allocated_operating_system(std::string* operating_system);
  private:
  const std::string& _internal_operating_system() const;
  void _internal_set_operating_system(const std::string& value);
  std::string* _internal_mutable_operating_system();
  public:

  // .eCAL.pb.mma.Memory memory = 2;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::eCAL::pb::mma::Memory& memory() const;
  ::eCAL::pb::mma::Memory* release_memory();
  ::eCAL::pb::mma::Memory* mutable_memory();
  void set_allocated_memory(::eCAL::pb::mma::Memory* memory);
  private:
  const ::eCAL::pb::mma::Memory& _internal_memory() const;
  ::eCAL::pb::mma::Memory* _internal_mutable_memory();
  public:

  // .eCAL.pb.mma.Temperature temperature = 5;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const ::eCAL::pb::mma::Temperature& temperature() const;
  ::eCAL::pb::mma::Temperature* release_temperature();
  ::eCAL::pb::mma::Temperature* mutable_temperature();
  void set_allocated_temperature(::eCAL::pb::mma::Temperature* temperature);
  private:
  const ::eCAL::pb::mma::Temperature& _internal_temperature() const;
  ::eCAL::pb::mma::Temperature* _internal_mutable_temperature();
  public:

  // double cpu_load = 1;
  void clear_cpu_load();
  double cpu_load() const;
  void set_cpu_load(double value);
  private:
  double _internal_cpu_load() const;
  void _internal_set_cpu_load(double value);
  public:

  // uint32 number_of_cpu_cores = 7;
  void clear_number_of_cpu_cores();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_cpu_cores() const;
  void set_number_of_cpu_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_cpu_cores() const;
  void _internal_set_number_of_cpu_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.mma.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Disk > disks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Network > networks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Process > process_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operating_system_;
  ::eCAL::pb::mma::Memory* memory_;
  ::eCAL::pb::mma::Temperature* temperature_;
  double cpu_load_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_cpu_cores_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fmma_2fmma_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Disk

// string name = 1;
inline void Disk::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Disk::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Disk.name)
  return _internal_name();
}
inline void Disk::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Disk.name)
}
inline std::string* Disk::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Disk.name)
  return _internal_mutable_name();
}
inline const std::string& Disk::_internal_name() const {
  return name_.GetNoArena();
}
inline void Disk::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Disk::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.Disk.name)
}
inline void Disk::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.Disk.name)
}
inline void Disk::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.Disk.name)
}
inline std::string* Disk::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Disk::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Disk.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Disk::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Disk.name)
}

// double read = 2;
inline void Disk::clear_read() {
  read_ = 0;
}
inline double Disk::_internal_read() const {
  return read_;
}
inline double Disk::read() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Disk.read)
  return _internal_read();
}
inline void Disk::_internal_set_read(double value) {
  
  read_ = value;
}
inline void Disk::set_read(double value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Disk.read)
}

// double write = 3;
inline void Disk::clear_write() {
  write_ = 0;
}
inline double Disk::_internal_write() const {
  return write_;
}
inline double Disk::write() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Disk.write)
  return _internal_write();
}
inline void Disk::_internal_set_write(double value) {
  
  write_ = value;
}
inline void Disk::set_write(double value) {
  _internal_set_write(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Disk.write)
}

// uint64 available = 4;
inline void Disk::clear_available() {
  available_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Disk::_internal_available() const {
  return available_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Disk::available() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Disk.available)
  return _internal_available();
}
inline void Disk::_internal_set_available(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  available_ = value;
}
inline void Disk::set_available(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Disk.available)
}

// uint64 capacity = 5;
inline void Disk::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Disk::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Disk::capacity() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Disk.capacity)
  return _internal_capacity();
}
inline void Disk::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void Disk::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Disk.capacity)
}

// -------------------------------------------------------------------

// Network

// string name = 1;
inline void Network::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Network::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Network.name)
  return _internal_name();
}
inline void Network::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Network.name)
}
inline std::string* Network::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Network.name)
  return _internal_mutable_name();
}
inline const std::string& Network::_internal_name() const {
  return name_.GetNoArena();
}
inline void Network::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Network::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.Network.name)
}
inline void Network::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.Network.name)
}
inline void Network::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.Network.name)
}
inline std::string* Network::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Network::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Network.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Network.name)
}

// double send = 2;
inline void Network::clear_send() {
  send_ = 0;
}
inline double Network::_internal_send() const {
  return send_;
}
inline double Network::send() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Network.send)
  return _internal_send();
}
inline void Network::_internal_set_send(double value) {
  
  send_ = value;
}
inline void Network::set_send(double value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Network.send)
}

// double receive = 3;
inline void Network::clear_receive() {
  receive_ = 0;
}
inline double Network::_internal_receive() const {
  return receive_;
}
inline double Network::receive() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Network.receive)
  return _internal_receive();
}
inline void Network::_internal_set_receive(double value) {
  
  receive_ = value;
}
inline void Network::set_receive(double value) {
  _internal_set_receive(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Network.receive)
}

// string ip_address = 4;
inline void Network::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Network::ip_address() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Network.ip_address)
  return _internal_ip_address();
}
inline void Network::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Network.ip_address)
}
inline std::string* Network::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Network.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& Network::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void Network::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Network::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.Network.ip_address)
}
inline void Network::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.Network.ip_address)
}
inline void Network::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.Network.ip_address)
}
inline std::string* Network::_internal_mutable_ip_address() {
  
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Network::release_ip_address() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Network.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Network.ip_address)
}

// -------------------------------------------------------------------

// Memory

// uint64 total = 1;
inline void Memory::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::total() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Memory.total)
  return _internal_total();
}
inline void Memory::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void Memory::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Memory.total)
}

// uint64 available = 2;
inline void Memory::clear_available() {
  available_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::_internal_available() const {
  return available_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Memory::available() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Memory.available)
  return _internal_available();
}
inline void Memory::_internal_set_available(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  available_ = value;
}
inline void Memory::set_available(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Memory.available)
}

// -------------------------------------------------------------------

// Temperature

// float cpu = 1;
inline void Temperature::clear_cpu() {
  cpu_ = 0;
}
inline float Temperature::_internal_cpu() const {
  return cpu_;
}
inline float Temperature::cpu() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Temperature.cpu)
  return _internal_cpu();
}
inline void Temperature::_internal_set_cpu(float value) {
  
  cpu_ = value;
}
inline void Temperature::set_cpu(float value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Temperature.cpu)
}

// -------------------------------------------------------------------

// ProcessesMemory

// uint64 current_working_set_size = 1;
inline void ProcessesMemory::clear_current_working_set_size() {
  current_working_set_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesMemory::_internal_current_working_set_size() const {
  return current_working_set_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesMemory::current_working_set_size() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.ProcessesMemory.current_working_set_size)
  return _internal_current_working_set_size();
}
inline void ProcessesMemory::_internal_set_current_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_working_set_size_ = value;
}
inline void ProcessesMemory::set_current_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_working_set_size(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.ProcessesMemory.current_working_set_size)
}

// uint64 peak_working_set_size = 2;
inline void ProcessesMemory::clear_peak_working_set_size() {
  peak_working_set_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesMemory::_internal_peak_working_set_size() const {
  return peak_working_set_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesMemory::peak_working_set_size() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.ProcessesMemory.peak_working_set_size)
  return _internal_peak_working_set_size();
}
inline void ProcessesMemory::_internal_set_peak_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  peak_working_set_size_ = value;
}
inline void ProcessesMemory::set_peak_working_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_peak_working_set_size(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.ProcessesMemory.peak_working_set_size)
}

// -------------------------------------------------------------------

// ProcessesCPU

// uint64 cpu_kernel_time = 1;
inline void ProcessesCPU::clear_cpu_kernel_time() {
  cpu_kernel_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesCPU::_internal_cpu_kernel_time() const {
  return cpu_kernel_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesCPU::cpu_kernel_time() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.ProcessesCPU.cpu_kernel_time)
  return _internal_cpu_kernel_time();
}
inline void ProcessesCPU::_internal_set_cpu_kernel_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_kernel_time_ = value;
}
inline void ProcessesCPU::set_cpu_kernel_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_kernel_time(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.ProcessesCPU.cpu_kernel_time)
}

// uint64 cpu_user_time = 2;
inline void ProcessesCPU::clear_cpu_user_time() {
  cpu_user_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesCPU::_internal_cpu_user_time() const {
  return cpu_user_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesCPU::cpu_user_time() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.ProcessesCPU.cpu_user_time)
  return _internal_cpu_user_time();
}
inline void ProcessesCPU::_internal_set_cpu_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_user_time_ = value;
}
inline void ProcessesCPU::set_cpu_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_user_time(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.ProcessesCPU.cpu_user_time)
}

// uint64 cpu_creation_time = 3;
inline void ProcessesCPU::clear_cpu_creation_time() {
  cpu_creation_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesCPU::_internal_cpu_creation_time() const {
  return cpu_creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessesCPU::cpu_creation_time() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.ProcessesCPU.cpu_creation_time)
  return _internal_cpu_creation_time();
}
inline void ProcessesCPU::_internal_set_cpu_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cpu_creation_time_ = value;
}
inline void ProcessesCPU::set_cpu_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cpu_creation_time(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.ProcessesCPU.cpu_creation_time)
}

// float cpu_load = 4;
inline void ProcessesCPU::clear_cpu_load() {
  cpu_load_ = 0;
}
inline float ProcessesCPU::_internal_cpu_load() const {
  return cpu_load_;
}
inline float ProcessesCPU::cpu_load() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.ProcessesCPU.cpu_load)
  return _internal_cpu_load();
}
inline void ProcessesCPU::_internal_set_cpu_load(float value) {
  
  cpu_load_ = value;
}
inline void ProcessesCPU::set_cpu_load(float value) {
  _internal_set_cpu_load(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.ProcessesCPU.cpu_load)
}

// -------------------------------------------------------------------

// Process

// string name = 1;
inline void Process::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.name)
  return _internal_name();
}
inline void Process::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Process.name)
}
inline std::string* Process::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Process.name)
  return _internal_mutable_name();
}
inline const std::string& Process::_internal_name() const {
  return name_.GetNoArena();
}
inline void Process::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.Process.name)
}
inline void Process::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.Process.name)
}
inline void Process::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.Process.name)
}
inline std::string* Process::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Process.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Process.name)
}

// uint32 id = 2;
inline void Process::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Process::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Process::id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.id)
  return _internal_id();
}
inline void Process::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Process::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Process.id)
}

// string commandline = 3;
inline void Process::clear_commandline() {
  commandline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::commandline() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.commandline)
  return _internal_commandline();
}
inline void Process::set_commandline(const std::string& value) {
  _internal_set_commandline(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Process.commandline)
}
inline std::string* Process::mutable_commandline() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Process.commandline)
  return _internal_mutable_commandline();
}
inline const std::string& Process::_internal_commandline() const {
  return commandline_.GetNoArena();
}
inline void Process::_internal_set_commandline(const std::string& value) {
  
  commandline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_commandline(std::string&& value) {
  
  commandline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.Process.commandline)
}
inline void Process::set_commandline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commandline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.Process.commandline)
}
inline void Process::set_commandline(const char* value, size_t size) {
  
  commandline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.Process.commandline)
}
inline std::string* Process::_internal_mutable_commandline() {
  
  return commandline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_commandline() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Process.commandline)
  
  return commandline_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_commandline(std::string* commandline) {
  if (commandline != nullptr) {
    
  } else {
    
  }
  commandline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commandline);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Process.commandline)
}

// .eCAL.pb.mma.ProcessesMemory memory = 4;
inline bool Process::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool Process::has_memory() const {
  return _internal_has_memory();
}
inline void Process::clear_memory() {
  if (GetArenaNoVirtual() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::eCAL::pb::mma::ProcessesMemory& Process::_internal_memory() const {
  const ::eCAL::pb::mma::ProcessesMemory* p = memory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::mma::ProcessesMemory*>(
      &::eCAL::pb::mma::_ProcessesMemory_default_instance_);
}
inline const ::eCAL::pb::mma::ProcessesMemory& Process::memory() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.memory)
  return _internal_memory();
}
inline ::eCAL::pb::mma::ProcessesMemory* Process::release_memory() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Process.memory)
  
  ::eCAL::pb::mma::ProcessesMemory* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::eCAL::pb::mma::ProcessesMemory* Process::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::mma::ProcessesMemory>(GetArenaNoVirtual());
    memory_ = p;
  }
  return memory_;
}
inline ::eCAL::pb::mma::ProcessesMemory* Process::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Process.memory)
  return _internal_mutable_memory();
}
inline void Process::set_allocated_memory(::eCAL::pb::mma::ProcessesMemory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Process.memory)
}

// .eCAL.pb.mma.ProcessesCPU cpu = 5;
inline bool Process::_internal_has_cpu() const {
  return this != internal_default_instance() && cpu_ != nullptr;
}
inline bool Process::has_cpu() const {
  return _internal_has_cpu();
}
inline void Process::clear_cpu() {
  if (GetArenaNoVirtual() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
}
inline const ::eCAL::pb::mma::ProcessesCPU& Process::_internal_cpu() const {
  const ::eCAL::pb::mma::ProcessesCPU* p = cpu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::mma::ProcessesCPU*>(
      &::eCAL::pb::mma::_ProcessesCPU_default_instance_);
}
inline const ::eCAL::pb::mma::ProcessesCPU& Process::cpu() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.cpu)
  return _internal_cpu();
}
inline ::eCAL::pb::mma::ProcessesCPU* Process::release_cpu() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Process.cpu)
  
  ::eCAL::pb::mma::ProcessesCPU* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::eCAL::pb::mma::ProcessesCPU* Process::_internal_mutable_cpu() {
  
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::mma::ProcessesCPU>(GetArenaNoVirtual());
    cpu_ = p;
  }
  return cpu_;
}
inline ::eCAL::pb::mma::ProcessesCPU* Process::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Process.cpu)
  return _internal_mutable_cpu();
}
inline void Process::set_allocated_cpu(::eCAL::pb::mma::ProcessesCPU* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    
  } else {
    
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Process.cpu)
}

// bool debug_flag = 6;
inline void Process::clear_debug_flag() {
  debug_flag_ = false;
}
inline bool Process::_internal_debug_flag() const {
  return debug_flag_;
}
inline bool Process::debug_flag() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.debug_flag)
  return _internal_debug_flag();
}
inline void Process::_internal_set_debug_flag(bool value) {
  
  debug_flag_ = value;
}
inline void Process::set_debug_flag(bool value) {
  _internal_set_debug_flag(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Process.debug_flag)
}

// string user = 7;
inline void Process::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::user() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.Process.user)
  return _internal_user();
}
inline void Process::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.Process.user)
}
inline std::string* Process::mutable_user() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.Process.user)
  return _internal_mutable_user();
}
inline const std::string& Process::_internal_user() const {
  return user_.GetNoArena();
}
inline void Process::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.Process.user)
}
inline void Process::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.Process.user)
}
inline void Process::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.Process.user)
}
inline std::string* Process::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_user() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.Process.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.Process.user)
}

// -------------------------------------------------------------------

// State

// double cpu_load = 1;
inline void State::clear_cpu_load() {
  cpu_load_ = 0;
}
inline double State::_internal_cpu_load() const {
  return cpu_load_;
}
inline double State::cpu_load() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.cpu_load)
  return _internal_cpu_load();
}
inline void State::_internal_set_cpu_load(double value) {
  
  cpu_load_ = value;
}
inline void State::set_cpu_load(double value) {
  _internal_set_cpu_load(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.State.cpu_load)
}

// .eCAL.pb.mma.Memory memory = 2;
inline bool State::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool State::has_memory() const {
  return _internal_has_memory();
}
inline void State::clear_memory() {
  if (GetArenaNoVirtual() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::eCAL::pb::mma::Memory& State::_internal_memory() const {
  const ::eCAL::pb::mma::Memory* p = memory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::mma::Memory*>(
      &::eCAL::pb::mma::_Memory_default_instance_);
}
inline const ::eCAL::pb::mma::Memory& State::memory() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.memory)
  return _internal_memory();
}
inline ::eCAL::pb::mma::Memory* State::release_memory() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.State.memory)
  
  ::eCAL::pb::mma::Memory* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::eCAL::pb::mma::Memory* State::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::mma::Memory>(GetArenaNoVirtual());
    memory_ = p;
  }
  return memory_;
}
inline ::eCAL::pb::mma::Memory* State::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.State.memory)
  return _internal_mutable_memory();
}
inline void State::set_allocated_memory(::eCAL::pb::mma::Memory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.State.memory)
}

// repeated .eCAL.pb.mma.Disk disks = 3;
inline int State::_internal_disks_size() const {
  return disks_.size();
}
inline int State::disks_size() const {
  return _internal_disks_size();
}
inline void State::clear_disks() {
  disks_.Clear();
}
inline ::eCAL::pb::mma::Disk* State::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.State.disks)
  return disks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Disk >*
State::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.mma.State.disks)
  return &disks_;
}
inline const ::eCAL::pb::mma::Disk& State::_internal_disks(int index) const {
  return disks_.Get(index);
}
inline const ::eCAL::pb::mma::Disk& State::disks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.disks)
  return _internal_disks(index);
}
inline ::eCAL::pb::mma::Disk* State::_internal_add_disks() {
  return disks_.Add();
}
inline ::eCAL::pb::mma::Disk* State::add_disks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.mma.State.disks)
  return _internal_add_disks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Disk >&
State::disks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.mma.State.disks)
  return disks_;
}

// repeated .eCAL.pb.mma.Network networks = 4;
inline int State::_internal_networks_size() const {
  return networks_.size();
}
inline int State::networks_size() const {
  return _internal_networks_size();
}
inline void State::clear_networks() {
  networks_.Clear();
}
inline ::eCAL::pb::mma::Network* State::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.State.networks)
  return networks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Network >*
State::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.mma.State.networks)
  return &networks_;
}
inline const ::eCAL::pb::mma::Network& State::_internal_networks(int index) const {
  return networks_.Get(index);
}
inline const ::eCAL::pb::mma::Network& State::networks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.networks)
  return _internal_networks(index);
}
inline ::eCAL::pb::mma::Network* State::_internal_add_networks() {
  return networks_.Add();
}
inline ::eCAL::pb::mma::Network* State::add_networks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.mma.State.networks)
  return _internal_add_networks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Network >&
State::networks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.mma.State.networks)
  return networks_;
}

// .eCAL.pb.mma.Temperature temperature = 5;
inline bool State::_internal_has_temperature() const {
  return this != internal_default_instance() && temperature_ != nullptr;
}
inline bool State::has_temperature() const {
  return _internal_has_temperature();
}
inline void State::clear_temperature() {
  if (GetArenaNoVirtual() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
}
inline const ::eCAL::pb::mma::Temperature& State::_internal_temperature() const {
  const ::eCAL::pb::mma::Temperature* p = temperature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::mma::Temperature*>(
      &::eCAL::pb::mma::_Temperature_default_instance_);
}
inline const ::eCAL::pb::mma::Temperature& State::temperature() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.temperature)
  return _internal_temperature();
}
inline ::eCAL::pb::mma::Temperature* State::release_temperature() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.State.temperature)
  
  ::eCAL::pb::mma::Temperature* temp = temperature_;
  temperature_ = nullptr;
  return temp;
}
inline ::eCAL::pb::mma::Temperature* State::_internal_mutable_temperature() {
  
  if (temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::mma::Temperature>(GetArenaNoVirtual());
    temperature_ = p;
  }
  return temperature_;
}
inline ::eCAL::pb::mma::Temperature* State::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.State.temperature)
  return _internal_mutable_temperature();
}
inline void State::set_allocated_temperature(::eCAL::pb::mma::Temperature* temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete temperature_;
  }
  if (temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.State.temperature)
}

// repeated .eCAL.pb.mma.Process process = 6;
inline int State::_internal_process_size() const {
  return process_.size();
}
inline int State::process_size() const {
  return _internal_process_size();
}
inline void State::clear_process() {
  process_.Clear();
}
inline ::eCAL::pb::mma::Process* State::mutable_process(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.State.process)
  return process_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Process >*
State::mutable_process() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.mma.State.process)
  return &process_;
}
inline const ::eCAL::pb::mma::Process& State::_internal_process(int index) const {
  return process_.Get(index);
}
inline const ::eCAL::pb::mma::Process& State::process(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.process)
  return _internal_process(index);
}
inline ::eCAL::pb::mma::Process* State::_internal_add_process() {
  return process_.Add();
}
inline ::eCAL::pb::mma::Process* State::add_process() {
  // @@protoc_insertion_point(field_add:eCAL.pb.mma.State.process)
  return _internal_add_process();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::mma::Process >&
State::process() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.mma.State.process)
  return process_;
}

// uint32 number_of_cpu_cores = 7;
inline void State::clear_number_of_cpu_cores() {
  number_of_cpu_cores_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_number_of_cpu_cores() const {
  return number_of_cpu_cores_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::number_of_cpu_cores() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.number_of_cpu_cores)
  return _internal_number_of_cpu_cores();
}
inline void State::_internal_set_number_of_cpu_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_of_cpu_cores_ = value;
}
inline void State::set_number_of_cpu_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_cpu_cores(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.State.number_of_cpu_cores)
}

// string operating_system = 8;
inline void State::clear_operating_system() {
  operating_system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::operating_system() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.mma.State.operating_system)
  return _internal_operating_system();
}
inline void State::set_operating_system(const std::string& value) {
  _internal_set_operating_system(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.mma.State.operating_system)
}
inline std::string* State::mutable_operating_system() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.mma.State.operating_system)
  return _internal_mutable_operating_system();
}
inline const std::string& State::_internal_operating_system() const {
  return operating_system_.GetNoArena();
}
inline void State::_internal_set_operating_system(const std::string& value) {
  
  operating_system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_operating_system(std::string&& value) {
  
  operating_system_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.mma.State.operating_system)
}
inline void State::set_operating_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operating_system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.mma.State.operating_system)
}
inline void State::set_operating_system(const char* value, size_t size) {
  
  operating_system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.mma.State.operating_system)
}
inline std::string* State::_internal_mutable_operating_system() {
  
  return operating_system_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_operating_system() {
  // @@protoc_insertion_point(field_release:eCAL.pb.mma.State.operating_system)
  
  return operating_system_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_operating_system(std::string* operating_system) {
  if (operating_system != nullptr) {
    
  } else {
    
  }
  operating_system_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operating_system);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.mma.State.operating_system)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mma
}  // namespace pb
}  // namespace eCAL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fmma_2fmma_2eproto
