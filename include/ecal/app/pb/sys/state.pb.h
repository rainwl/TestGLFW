// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/sys/state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ecal/app/pb/sys/process.pb.h"
#include "ecal/app/pb/sys/client_service.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2fsys_2fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2fsys_2fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto;
namespace eCAL {
namespace pb {
namespace sys {
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_Colour;
class State_ColourDefaultTypeInternal;
extern State_ColourDefaultTypeInternal _State_Colour_default_instance_;
class State_Group;
class State_GroupDefaultTypeInternal;
extern State_GroupDefaultTypeInternal _State_Group_default_instance_;
class State_Task;
class State_TaskDefaultTypeInternal;
extern State_TaskDefaultTypeInternal _State_Task_default_instance_;
}  // namespace sys
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::sys::State* Arena::CreateMaybeMessage<::eCAL::pb::sys::State>(Arena*);
template<> ::eCAL::pb::sys::State_Colour* Arena::CreateMaybeMessage<::eCAL::pb::sys::State_Colour>(Arena*);
template<> ::eCAL::pb::sys::State_Group* Arena::CreateMaybeMessage<::eCAL::pb::sys::State_Group>(Arena*);
template<> ::eCAL::pb::sys::State_Task* Arena::CreateMaybeMessage<::eCAL::pb::sys::State_Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace sys {

// ===================================================================

class State_Colour :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.State.Colour) */ {
 public:
  State_Colour();
  virtual ~State_Colour();

  State_Colour(const State_Colour& from);
  State_Colour(State_Colour&& from) noexcept
    : State_Colour() {
    *this = ::std::move(from);
  }

  inline State_Colour& operator=(const State_Colour& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_Colour& operator=(State_Colour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_Colour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_Colour* internal_default_instance() {
    return reinterpret_cast<const State_Colour*>(
               &_State_Colour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State_Colour& a, State_Colour& b) {
    a.Swap(&b);
  }
  inline void Swap(State_Colour* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_Colour* New() const final {
    return CreateMaybeMessage<State_Colour>(nullptr);
  }

  State_Colour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_Colour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_Colour& from);
  void MergeFrom(const State_Colour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_Colour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.State.Colour";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.State.Colour)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fstate_2eproto;
};
// -------------------------------------------------------------------

class State_Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.State.Task) */ {
 public:
  State_Task();
  virtual ~State_Task();

  State_Task(const State_Task& from);
  State_Task(State_Task&& from) noexcept
    : State_Task() {
    *this = ::std::move(from);
  }

  inline State_Task& operator=(const State_Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_Task& operator=(State_Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_Task* internal_default_instance() {
    return reinterpret_cast<const State_Task*>(
               &_State_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State_Task& a, State_Task& b) {
    a.Swap(&b);
  }
  inline void Swap(State_Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_Task* New() const final {
    return CreateMaybeMessage<State_Task>(nullptr);
  }

  State_Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_Task& from);
  void MergeFrom(const State_Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.State.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidsFieldNumber = 5,
    kNameFieldNumber = 2,
    kTargetHostFieldNumber = 3,
    kPathFieldNumber = 8,
    kWorkingDirFieldNumber = 9,
    kCommandLineFieldNumber = 10,
    kCurrentHostFieldNumber = 15,
    kStateFieldNumber = 4,
    kRestartBySeverityFieldNumber = 14,
    kIdFieldNumber = 1,
    kLaunchOrderFieldNumber = 6,
    kWaitingTimeSecsFieldNumber = 12,
    kWindowModeFieldNumber = 11,
    kMonitoringEnabledFieldNumber = 13,
  };
  // repeated int32 pids = 5;
  int pids_size() const;
  private:
  int _internal_pids_size() const;
  public:
  void clear_pids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pids() const;
  void _internal_add_pids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pids(int index) const;
  void set_pids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pids();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string target_host = 3;
  void clear_target_host();
  const std::string& target_host() const;
  void set_target_host(const std::string& value);
  void set_target_host(std::string&& value);
  void set_target_host(const char* value);
  void set_target_host(const char* value, size_t size);
  std::string* mutable_target_host();
  std::string* release_target_host();
  void set_allocated_target_host(std::string* target_host);
  private:
  const std::string& _internal_target_host() const;
  void _internal_set_target_host(const std::string& value);
  std::string* _internal_mutable_target_host();
  public:

  // string path = 8;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string working_dir = 9;
  void clear_working_dir();
  const std::string& working_dir() const;
  void set_working_dir(const std::string& value);
  void set_working_dir(std::string&& value);
  void set_working_dir(const char* value);
  void set_working_dir(const char* value, size_t size);
  std::string* mutable_working_dir();
  std::string* release_working_dir();
  void set_allocated_working_dir(std::string* working_dir);
  private:
  const std::string& _internal_working_dir() const;
  void _internal_set_working_dir(const std::string& value);
  std::string* _internal_mutable_working_dir();
  public:

  // string command_line = 10;
  void clear_command_line();
  const std::string& command_line() const;
  void set_command_line(const std::string& value);
  void set_command_line(std::string&& value);
  void set_command_line(const char* value);
  void set_command_line(const char* value, size_t size);
  std::string* mutable_command_line();
  std::string* release_command_line();
  void set_allocated_command_line(std::string* command_line);
  private:
  const std::string& _internal_command_line() const;
  void _internal_set_command_line(const std::string& value);
  std::string* _internal_mutable_command_line();
  public:

  // string current_host = 15;
  void clear_current_host();
  const std::string& current_host() const;
  void set_current_host(const std::string& value);
  void set_current_host(std::string&& value);
  void set_current_host(const char* value);
  void set_current_host(const char* value, size_t size);
  std::string* mutable_current_host();
  std::string* release_current_host();
  void set_allocated_current_host(std::string* current_host);
  private:
  const std::string& _internal_current_host() const;
  void _internal_set_current_host(const std::string& value);
  std::string* _internal_mutable_current_host();
  public:

  // .eCAL.pb.sys.ProcessState state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::eCAL::pb::sys::ProcessState& state() const;
  ::eCAL::pb::sys::ProcessState* release_state();
  ::eCAL::pb::sys::ProcessState* mutable_state();
  void set_allocated_state(::eCAL::pb::sys::ProcessState* state);
  private:
  const ::eCAL::pb::sys::ProcessState& _internal_state() const;
  ::eCAL::pb::sys::ProcessState* _internal_mutable_state();
  public:

  // .eCAL.pb.sys.ProcessState restart_by_severity = 14;
  bool has_restart_by_severity() const;
  private:
  bool _internal_has_restart_by_severity() const;
  public:
  void clear_restart_by_severity();
  const ::eCAL::pb::sys::ProcessState& restart_by_severity() const;
  ::eCAL::pb::sys::ProcessState* release_restart_by_severity();
  ::eCAL::pb::sys::ProcessState* mutable_restart_by_severity();
  void set_allocated_restart_by_severity(::eCAL::pb::sys::ProcessState* restart_by_severity);
  private:
  const ::eCAL::pb::sys::ProcessState& _internal_restart_by_severity() const;
  ::eCAL::pb::sys::ProcessState* _internal_mutable_restart_by_severity();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 launch_order = 6;
  void clear_launch_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 launch_order() const;
  void set_launch_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launch_order() const;
  void _internal_set_launch_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double waiting_time_secs = 12;
  void clear_waiting_time_secs();
  double waiting_time_secs() const;
  void set_waiting_time_secs(double value);
  private:
  double _internal_waiting_time_secs() const;
  void _internal_set_waiting_time_secs(double value);
  public:

  // .eCAL.pb.sys_client.WindowMode window_mode = 11;
  void clear_window_mode();
  ::eCAL::pb::sys_client::WindowMode window_mode() const;
  void set_window_mode(::eCAL::pb::sys_client::WindowMode value);
  private:
  ::eCAL::pb::sys_client::WindowMode _internal_window_mode() const;
  void _internal_set_window_mode(::eCAL::pb::sys_client::WindowMode value);
  public:

  // bool monitoring_enabled = 13;
  void clear_monitoring_enabled();
  bool monitoring_enabled() const;
  void set_monitoring_enabled(bool value);
  private:
  bool _internal_monitoring_enabled() const;
  void _internal_set_monitoring_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.State.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pids_;
  mutable std::atomic<int> _pids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_host_;
  ::eCAL::pb::sys::ProcessState* state_;
  ::eCAL::pb::sys::ProcessState* restart_by_severity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launch_order_;
  double waiting_time_secs_;
  int window_mode_;
  bool monitoring_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fstate_2eproto;
};
// -------------------------------------------------------------------

class State_Group :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.State.Group) */ {
 public:
  State_Group();
  virtual ~State_Group();

  State_Group(const State_Group& from);
  State_Group(State_Group&& from) noexcept
    : State_Group() {
    *this = ::std::move(from);
  }

  inline State_Group& operator=(const State_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline State_Group& operator=(State_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State_Group* internal_default_instance() {
    return reinterpret_cast<const State_Group*>(
               &_State_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(State_Group& a, State_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(State_Group* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State_Group* New() const final {
    return CreateMaybeMessage<State_Group>(nullptr);
  }

  State_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State_Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State_Group& from);
  void MergeFrom(const State_Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State_Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.State.Group";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 3,
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kColourFieldNumber = 4,
  };
  // repeated .eCAL.pb.sys.State.Task tasks = 3;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::eCAL::pb::sys::State_Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >*
      mutable_tasks();
  private:
  const ::eCAL::pb::sys::State_Task& _internal_tasks(int index) const;
  ::eCAL::pb::sys::State_Task* _internal_add_tasks();
  public:
  const ::eCAL::pb::sys::State_Task& tasks(int index) const;
  ::eCAL::pb::sys::State_Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >&
      tasks() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .eCAL.pb.sys.State.Colour colour = 4;
  bool has_colour() const;
  private:
  bool _internal_has_colour() const;
  public:
  void clear_colour();
  const ::eCAL::pb::sys::State_Colour& colour() const;
  ::eCAL::pb::sys::State_Colour* release_colour();
  ::eCAL::pb::sys::State_Colour* mutable_colour();
  void set_allocated_colour(::eCAL::pb::sys::State_Colour* colour);
  private:
  const ::eCAL::pb::sys::State_Colour& _internal_colour() const;
  ::eCAL::pb::sys::State_Colour* _internal_mutable_colour();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.State.Group)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::eCAL::pb::sys::State_Colour* colour_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fstate_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef State_Colour Colour;
  typedef State_Task Task;
  typedef State_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
    kGroupsFieldNumber = 2,
    kHostFieldNumber = 3,
  };
  // repeated .eCAL.pb.sys.State.Task tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::eCAL::pb::sys::State_Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >*
      mutable_tasks();
  private:
  const ::eCAL::pb::sys::State_Task& _internal_tasks(int index) const;
  ::eCAL::pb::sys::State_Task* _internal_add_tasks();
  public:
  const ::eCAL::pb::sys::State_Task& tasks(int index) const;
  ::eCAL::pb::sys::State_Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >&
      tasks() const;

  // repeated .eCAL.pb.sys.State.Group groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::eCAL::pb::sys::State_Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Group >*
      mutable_groups();
  private:
  const ::eCAL::pb::sys::State_Group& _internal_groups(int index) const;
  ::eCAL::pb::sys::State_Group* _internal_add_groups();
  public:
  const ::eCAL::pb::sys::State_Group& groups(int index) const;
  ::eCAL::pb::sys::State_Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Group >&
      groups() const;

  // string host = 3;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Group > groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State_Colour

// uint32 r = 1;
inline void State_Colour::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Colour::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Colour::r() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Colour.r)
  return _internal_r();
}
inline void State_Colour::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void State_Colour::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Colour.r)
}

// uint32 g = 2;
inline void State_Colour::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Colour::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Colour::g() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Colour.g)
  return _internal_g();
}
inline void State_Colour::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void State_Colour::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Colour.g)
}

// uint32 b = 3;
inline void State_Colour::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Colour::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Colour::b() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Colour.b)
  return _internal_b();
}
inline void State_Colour::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void State_Colour::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Colour.b)
}

// -------------------------------------------------------------------

// State_Task

// uint32 id = 1;
inline void State_Task::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Task::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Task::id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.id)
  return _internal_id();
}
inline void State_Task::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void State_Task::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.id)
}

// string name = 2;
inline void State_Task::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Task::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.name)
  return _internal_name();
}
inline void State_Task::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.name)
}
inline std::string* State_Task::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.name)
  return _internal_mutable_name();
}
inline const std::string& State_Task::_internal_name() const {
  return name_.GetNoArena();
}
inline void State_Task::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Task::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Task.name)
}
inline void State_Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Task.name)
}
inline void State_Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Task.name)
}
inline std::string* State_Task::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Task::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.name)
}

// string target_host = 3;
inline void State_Task::clear_target_host() {
  target_host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Task::target_host() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.target_host)
  return _internal_target_host();
}
inline void State_Task::set_target_host(const std::string& value) {
  _internal_set_target_host(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.target_host)
}
inline std::string* State_Task::mutable_target_host() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.target_host)
  return _internal_mutable_target_host();
}
inline const std::string& State_Task::_internal_target_host() const {
  return target_host_.GetNoArena();
}
inline void State_Task::_internal_set_target_host(const std::string& value) {
  
  target_host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Task::set_target_host(std::string&& value) {
  
  target_host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Task.target_host)
}
inline void State_Task::set_target_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Task.target_host)
}
inline void State_Task::set_target_host(const char* value, size_t size) {
  
  target_host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Task.target_host)
}
inline std::string* State_Task::_internal_mutable_target_host() {
  
  return target_host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Task::release_target_host() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.target_host)
  
  return target_host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Task::set_allocated_target_host(std::string* target_host) {
  if (target_host != nullptr) {
    
  } else {
    
  }
  target_host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_host);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.target_host)
}

// .eCAL.pb.sys.ProcessState state = 4;
inline bool State_Task::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool State_Task::has_state() const {
  return _internal_has_state();
}
inline const ::eCAL::pb::sys::ProcessState& State_Task::_internal_state() const {
  const ::eCAL::pb::sys::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::sys::ProcessState*>(
      &::eCAL::pb::sys::_ProcessState_default_instance_);
}
inline const ::eCAL::pb::sys::ProcessState& State_Task::state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.state)
  return _internal_state();
}
inline ::eCAL::pb::sys::ProcessState* State_Task::release_state() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.state)
  
  ::eCAL::pb::sys::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::eCAL::pb::sys::ProcessState* State_Task::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::sys::ProcessState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::eCAL::pb::sys::ProcessState* State_Task::mutable_state() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.state)
  return _internal_mutable_state();
}
inline void State_Task::set_allocated_state(::eCAL::pb::sys::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.state)
}

// repeated int32 pids = 5;
inline int State_Task::_internal_pids_size() const {
  return pids_.size();
}
inline int State_Task::pids_size() const {
  return _internal_pids_size();
}
inline void State_Task::clear_pids() {
  pids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State_Task::_internal_pids(int index) const {
  return pids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State_Task::pids(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.pids)
  return _internal_pids(index);
}
inline void State_Task::set_pids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pids_.Set(index, value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.pids)
}
inline void State_Task::_internal_add_pids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pids_.Add(value);
}
inline void State_Task::add_pids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pids(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.State.Task.pids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
State_Task::_internal_pids() const {
  return pids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
State_Task::pids() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys.State.Task.pids)
  return _internal_pids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
State_Task::_internal_mutable_pids() {
  return &pids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
State_Task::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys.State.Task.pids)
  return _internal_mutable_pids();
}

// uint32 launch_order = 6;
inline void State_Task::clear_launch_order() {
  launch_order_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Task::_internal_launch_order() const {
  return launch_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State_Task::launch_order() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.launch_order)
  return _internal_launch_order();
}
inline void State_Task::_internal_set_launch_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  launch_order_ = value;
}
inline void State_Task::set_launch_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launch_order(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.launch_order)
}

// string path = 8;
inline void State_Task::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Task::path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.path)
  return _internal_path();
}
inline void State_Task::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.path)
}
inline std::string* State_Task::mutable_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.path)
  return _internal_mutable_path();
}
inline const std::string& State_Task::_internal_path() const {
  return path_.GetNoArena();
}
inline void State_Task::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Task::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Task.path)
}
inline void State_Task::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Task.path)
}
inline void State_Task::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Task.path)
}
inline std::string* State_Task::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Task::release_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Task::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.path)
}

// string working_dir = 9;
inline void State_Task::clear_working_dir() {
  working_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Task::working_dir() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.working_dir)
  return _internal_working_dir();
}
inline void State_Task::set_working_dir(const std::string& value) {
  _internal_set_working_dir(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.working_dir)
}
inline std::string* State_Task::mutable_working_dir() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.working_dir)
  return _internal_mutable_working_dir();
}
inline const std::string& State_Task::_internal_working_dir() const {
  return working_dir_.GetNoArena();
}
inline void State_Task::_internal_set_working_dir(const std::string& value) {
  
  working_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Task::set_working_dir(std::string&& value) {
  
  working_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Task.working_dir)
}
inline void State_Task::set_working_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  working_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Task.working_dir)
}
inline void State_Task::set_working_dir(const char* value, size_t size) {
  
  working_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Task.working_dir)
}
inline std::string* State_Task::_internal_mutable_working_dir() {
  
  return working_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Task::release_working_dir() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.working_dir)
  
  return working_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Task::set_allocated_working_dir(std::string* working_dir) {
  if (working_dir != nullptr) {
    
  } else {
    
  }
  working_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_dir);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.working_dir)
}

// string command_line = 10;
inline void State_Task::clear_command_line() {
  command_line_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Task::command_line() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.command_line)
  return _internal_command_line();
}
inline void State_Task::set_command_line(const std::string& value) {
  _internal_set_command_line(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.command_line)
}
inline std::string* State_Task::mutable_command_line() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.command_line)
  return _internal_mutable_command_line();
}
inline const std::string& State_Task::_internal_command_line() const {
  return command_line_.GetNoArena();
}
inline void State_Task::_internal_set_command_line(const std::string& value) {
  
  command_line_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Task::set_command_line(std::string&& value) {
  
  command_line_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Task.command_line)
}
inline void State_Task::set_command_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_line_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Task.command_line)
}
inline void State_Task::set_command_line(const char* value, size_t size) {
  
  command_line_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Task.command_line)
}
inline std::string* State_Task::_internal_mutable_command_line() {
  
  return command_line_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Task::release_command_line() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.command_line)
  
  return command_line_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Task::set_allocated_command_line(std::string* command_line) {
  if (command_line != nullptr) {
    
  } else {
    
  }
  command_line_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_line);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.command_line)
}

// .eCAL.pb.sys_client.WindowMode window_mode = 11;
inline void State_Task::clear_window_mode() {
  window_mode_ = 0;
}
inline ::eCAL::pb::sys_client::WindowMode State_Task::_internal_window_mode() const {
  return static_cast< ::eCAL::pb::sys_client::WindowMode >(window_mode_);
}
inline ::eCAL::pb::sys_client::WindowMode State_Task::window_mode() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.window_mode)
  return _internal_window_mode();
}
inline void State_Task::_internal_set_window_mode(::eCAL::pb::sys_client::WindowMode value) {
  
  window_mode_ = value;
}
inline void State_Task::set_window_mode(::eCAL::pb::sys_client::WindowMode value) {
  _internal_set_window_mode(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.window_mode)
}

// double waiting_time_secs = 12;
inline void State_Task::clear_waiting_time_secs() {
  waiting_time_secs_ = 0;
}
inline double State_Task::_internal_waiting_time_secs() const {
  return waiting_time_secs_;
}
inline double State_Task::waiting_time_secs() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.waiting_time_secs)
  return _internal_waiting_time_secs();
}
inline void State_Task::_internal_set_waiting_time_secs(double value) {
  
  waiting_time_secs_ = value;
}
inline void State_Task::set_waiting_time_secs(double value) {
  _internal_set_waiting_time_secs(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.waiting_time_secs)
}

// bool monitoring_enabled = 13;
inline void State_Task::clear_monitoring_enabled() {
  monitoring_enabled_ = false;
}
inline bool State_Task::_internal_monitoring_enabled() const {
  return monitoring_enabled_;
}
inline bool State_Task::monitoring_enabled() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.monitoring_enabled)
  return _internal_monitoring_enabled();
}
inline void State_Task::_internal_set_monitoring_enabled(bool value) {
  
  monitoring_enabled_ = value;
}
inline void State_Task::set_monitoring_enabled(bool value) {
  _internal_set_monitoring_enabled(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.monitoring_enabled)
}

// .eCAL.pb.sys.ProcessState restart_by_severity = 14;
inline bool State_Task::_internal_has_restart_by_severity() const {
  return this != internal_default_instance() && restart_by_severity_ != nullptr;
}
inline bool State_Task::has_restart_by_severity() const {
  return _internal_has_restart_by_severity();
}
inline const ::eCAL::pb::sys::ProcessState& State_Task::_internal_restart_by_severity() const {
  const ::eCAL::pb::sys::ProcessState* p = restart_by_severity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::sys::ProcessState*>(
      &::eCAL::pb::sys::_ProcessState_default_instance_);
}
inline const ::eCAL::pb::sys::ProcessState& State_Task::restart_by_severity() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.restart_by_severity)
  return _internal_restart_by_severity();
}
inline ::eCAL::pb::sys::ProcessState* State_Task::release_restart_by_severity() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.restart_by_severity)
  
  ::eCAL::pb::sys::ProcessState* temp = restart_by_severity_;
  restart_by_severity_ = nullptr;
  return temp;
}
inline ::eCAL::pb::sys::ProcessState* State_Task::_internal_mutable_restart_by_severity() {
  
  if (restart_by_severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::sys::ProcessState>(GetArenaNoVirtual());
    restart_by_severity_ = p;
  }
  return restart_by_severity_;
}
inline ::eCAL::pb::sys::ProcessState* State_Task::mutable_restart_by_severity() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.restart_by_severity)
  return _internal_mutable_restart_by_severity();
}
inline void State_Task::set_allocated_restart_by_severity(::eCAL::pb::sys::ProcessState* restart_by_severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_by_severity_);
  }
  if (restart_by_severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      restart_by_severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_by_severity, submessage_arena);
    }
    
  } else {
    
  }
  restart_by_severity_ = restart_by_severity;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.restart_by_severity)
}

// string current_host = 15;
inline void State_Task::clear_current_host() {
  current_host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Task::current_host() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Task.current_host)
  return _internal_current_host();
}
inline void State_Task::set_current_host(const std::string& value) {
  _internal_set_current_host(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Task.current_host)
}
inline std::string* State_Task::mutable_current_host() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Task.current_host)
  return _internal_mutable_current_host();
}
inline const std::string& State_Task::_internal_current_host() const {
  return current_host_.GetNoArena();
}
inline void State_Task::_internal_set_current_host(const std::string& value) {
  
  current_host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Task::set_current_host(std::string&& value) {
  
  current_host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Task.current_host)
}
inline void State_Task::set_current_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Task.current_host)
}
inline void State_Task::set_current_host(const char* value, size_t size) {
  
  current_host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Task.current_host)
}
inline std::string* State_Task::_internal_mutable_current_host() {
  
  return current_host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Task::release_current_host() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Task.current_host)
  
  return current_host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Task::set_allocated_current_host(std::string* current_host) {
  if (current_host != nullptr) {
    
  } else {
    
  }
  current_host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_host);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Task.current_host)
}

// -------------------------------------------------------------------

// State_Group

// string name = 1;
inline void State_Group::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Group::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Group.name)
  return _internal_name();
}
inline void State_Group::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Group.name)
}
inline std::string* State_Group::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Group.name)
  return _internal_mutable_name();
}
inline const std::string& State_Group::_internal_name() const {
  return name_.GetNoArena();
}
inline void State_Group::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Group::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Group.name)
}
inline void State_Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Group.name)
}
inline void State_Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Group.name)
}
inline std::string* State_Group::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Group::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Group.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Group.name)
}

// string state = 2;
inline void State_Group::clear_state() {
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State_Group::state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Group.state)
  return _internal_state();
}
inline void State_Group::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.Group.state)
}
inline std::string* State_Group::mutable_state() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Group.state)
  return _internal_mutable_state();
}
inline const std::string& State_Group::_internal_state() const {
  return state_.GetNoArena();
}
inline void State_Group::_internal_set_state(const std::string& value) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State_Group::set_state(std::string&& value) {
  
  state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.Group.state)
}
inline void State_Group::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.Group.state)
}
inline void State_Group::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.Group.state)
}
inline std::string* State_Group::_internal_mutable_state() {
  
  return state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State_Group::release_state() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Group.state)
  
  return state_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State_Group::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Group.state)
}

// repeated .eCAL.pb.sys.State.Task tasks = 3;
inline int State_Group::_internal_tasks_size() const {
  return tasks_.size();
}
inline int State_Group::tasks_size() const {
  return _internal_tasks_size();
}
inline void State_Group::clear_tasks() {
  tasks_.Clear();
}
inline ::eCAL::pb::sys::State_Task* State_Group::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Group.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >*
State_Group::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys.State.Group.tasks)
  return &tasks_;
}
inline const ::eCAL::pb::sys::State_Task& State_Group::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::eCAL::pb::sys::State_Task& State_Group::tasks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Group.tasks)
  return _internal_tasks(index);
}
inline ::eCAL::pb::sys::State_Task* State_Group::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::eCAL::pb::sys::State_Task* State_Group::add_tasks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.State.Group.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >&
State_Group::tasks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys.State.Group.tasks)
  return tasks_;
}

// .eCAL.pb.sys.State.Colour colour = 4;
inline bool State_Group::_internal_has_colour() const {
  return this != internal_default_instance() && colour_ != nullptr;
}
inline bool State_Group::has_colour() const {
  return _internal_has_colour();
}
inline void State_Group::clear_colour() {
  if (GetArenaNoVirtual() == nullptr && colour_ != nullptr) {
    delete colour_;
  }
  colour_ = nullptr;
}
inline const ::eCAL::pb::sys::State_Colour& State_Group::_internal_colour() const {
  const ::eCAL::pb::sys::State_Colour* p = colour_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::sys::State_Colour*>(
      &::eCAL::pb::sys::_State_Colour_default_instance_);
}
inline const ::eCAL::pb::sys::State_Colour& State_Group::colour() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.Group.colour)
  return _internal_colour();
}
inline ::eCAL::pb::sys::State_Colour* State_Group::release_colour() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.Group.colour)
  
  ::eCAL::pb::sys::State_Colour* temp = colour_;
  colour_ = nullptr;
  return temp;
}
inline ::eCAL::pb::sys::State_Colour* State_Group::_internal_mutable_colour() {
  
  if (colour_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::sys::State_Colour>(GetArenaNoVirtual());
    colour_ = p;
  }
  return colour_;
}
inline ::eCAL::pb::sys::State_Colour* State_Group::mutable_colour() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.Group.colour)
  return _internal_mutable_colour();
}
inline void State_Group::set_allocated_colour(::eCAL::pb::sys::State_Colour* colour) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete colour_;
  }
  if (colour) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      colour = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colour, submessage_arena);
    }
    
  } else {
    
  }
  colour_ = colour;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.Group.colour)
}

// -------------------------------------------------------------------

// State

// repeated .eCAL.pb.sys.State.Task tasks = 1;
inline int State::_internal_tasks_size() const {
  return tasks_.size();
}
inline int State::tasks_size() const {
  return _internal_tasks_size();
}
inline void State::clear_tasks() {
  tasks_.Clear();
}
inline ::eCAL::pb::sys::State_Task* State::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >*
State::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys.State.tasks)
  return &tasks_;
}
inline const ::eCAL::pb::sys::State_Task& State::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::eCAL::pb::sys::State_Task& State::tasks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.tasks)
  return _internal_tasks(index);
}
inline ::eCAL::pb::sys::State_Task* State::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::eCAL::pb::sys::State_Task* State::add_tasks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.State.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Task >&
State::tasks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys.State.tasks)
  return tasks_;
}

// repeated .eCAL.pb.sys.State.Group groups = 2;
inline int State::_internal_groups_size() const {
  return groups_.size();
}
inline int State::groups_size() const {
  return _internal_groups_size();
}
inline void State::clear_groups() {
  groups_.Clear();
}
inline ::eCAL::pb::sys::State_Group* State::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Group >*
State::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys.State.groups)
  return &groups_;
}
inline const ::eCAL::pb::sys::State_Group& State::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::eCAL::pb::sys::State_Group& State::groups(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.groups)
  return _internal_groups(index);
}
inline ::eCAL::pb::sys::State_Group* State::_internal_add_groups() {
  return groups_.Add();
}
inline ::eCAL::pb::sys::State_Group* State::add_groups() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.State.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys::State_Group >&
State::groups() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys.State.groups)
  return groups_;
}

// string host = 3;
inline void State::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::host() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.State.host)
  return _internal_host();
}
inline void State::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.State.host)
}
inline std::string* State::mutable_host() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.State.host)
  return _internal_mutable_host();
}
inline const std::string& State::_internal_host() const {
  return host_.GetNoArena();
}
inline void State::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.State.host)
}
inline void State::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.State.host)
}
inline void State::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.State.host)
}
inline std::string* State::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_host() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.State.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.State.host)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sys
}  // namespace pb
}  // namespace eCAL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fstate_2eproto
