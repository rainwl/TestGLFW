// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/sys/client_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
namespace eCAL {
namespace pb {
namespace sys_client {
class MatchTaskResponse;
class MatchTaskResponseDefaultTypeInternal;
extern MatchTaskResponseDefaultTypeInternal _MatchTaskResponse_default_instance_;
class PidList;
class PidListDefaultTypeInternal;
extern PidListDefaultTypeInternal _PidList_default_instance_;
class Runner;
class RunnerDefaultTypeInternal;
extern RunnerDefaultTypeInternal _Runner_default_instance_;
class SingleTaskResponse;
class SingleTaskResponseDefaultTypeInternal;
extern SingleTaskResponseDefaultTypeInternal _SingleTaskResponse_default_instance_;
class StartTaskParameters;
class StartTaskParametersDefaultTypeInternal;
extern StartTaskParametersDefaultTypeInternal _StartTaskParameters_default_instance_;
class StartTaskRequest;
class StartTaskRequestDefaultTypeInternal;
extern StartTaskRequestDefaultTypeInternal _StartTaskRequest_default_instance_;
class StopTaskParameters;
class StopTaskParametersDefaultTypeInternal;
extern StopTaskParametersDefaultTypeInternal _StopTaskParameters_default_instance_;
class StopTaskRequest;
class StopTaskRequestDefaultTypeInternal;
extern StopTaskRequestDefaultTypeInternal _StopTaskRequest_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskList;
class TaskListDefaultTypeInternal;
extern TaskListDefaultTypeInternal _TaskList_default_instance_;
class TaskResponse;
class TaskResponseDefaultTypeInternal;
extern TaskResponseDefaultTypeInternal _TaskResponse_default_instance_;
}  // namespace sys_client
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::sys_client::MatchTaskResponse* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::MatchTaskResponse>(Arena*);
template<> ::eCAL::pb::sys_client::PidList* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::PidList>(Arena*);
template<> ::eCAL::pb::sys_client::Runner* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::Runner>(Arena*);
template<> ::eCAL::pb::sys_client::SingleTaskResponse* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::SingleTaskResponse>(Arena*);
template<> ::eCAL::pb::sys_client::StartTaskParameters* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::StartTaskParameters>(Arena*);
template<> ::eCAL::pb::sys_client::StartTaskRequest* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::StartTaskRequest>(Arena*);
template<> ::eCAL::pb::sys_client::StopTaskParameters* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::StopTaskParameters>(Arena*);
template<> ::eCAL::pb::sys_client::StopTaskRequest* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::StopTaskRequest>(Arena*);
template<> ::eCAL::pb::sys_client::Task* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::Task>(Arena*);
template<> ::eCAL::pb::sys_client::TaskList* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::TaskList>(Arena*);
template<> ::eCAL::pb::sys_client::TaskResponse* Arena::CreateMaybeMessage<::eCAL::pb::sys_client::TaskResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace sys_client {

enum WindowMode : int {
  normal = 0,
  hidden = 1,
  minimized = 2,
  maximized = 3,
  WindowMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WindowMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WindowMode_IsValid(int value);
constexpr WindowMode WindowMode_MIN = normal;
constexpr WindowMode WindowMode_MAX = maximized;
constexpr int WindowMode_ARRAYSIZE = WindowMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowMode_descriptor();
template<typename T>
inline const std::string& WindowMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WindowMode_descriptor(), enum_t_value);
}
inline bool WindowMode_Parse(
    const std::string& name, WindowMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WindowMode>(
    WindowMode_descriptor(), name, value);
}
enum eServiceResult : int {
  none = 0,
  success = 1,
  failed = 2,
  eServiceResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eServiceResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eServiceResult_IsValid(int value);
constexpr eServiceResult eServiceResult_MIN = none;
constexpr eServiceResult eServiceResult_MAX = failed;
constexpr int eServiceResult_ARRAYSIZE = eServiceResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eServiceResult_descriptor();
template<typename T>
inline const std::string& eServiceResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eServiceResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eServiceResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eServiceResult_descriptor(), enum_t_value);
}
inline bool eServiceResult_Parse(
    const std::string& name, eServiceResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eServiceResult>(
    eServiceResult_descriptor(), name, value);
}
// ===================================================================

class Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kArgumentsFieldNumber = 2,
    kWorkingDirFieldNumber = 3,
    kRunnerFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string arguments = 2;
  void clear_arguments();
  const std::string& arguments() const;
  void set_arguments(const std::string& value);
  void set_arguments(std::string&& value);
  void set_arguments(const char* value);
  void set_arguments(const char* value, size_t size);
  std::string* mutable_arguments();
  std::string* release_arguments();
  void set_allocated_arguments(std::string* arguments);
  private:
  const std::string& _internal_arguments() const;
  void _internal_set_arguments(const std::string& value);
  std::string* _internal_mutable_arguments();
  public:

  // string working_dir = 3;
  void clear_working_dir();
  const std::string& working_dir() const;
  void set_working_dir(const std::string& value);
  void set_working_dir(std::string&& value);
  void set_working_dir(const char* value);
  void set_working_dir(const char* value, size_t size);
  std::string* mutable_working_dir();
  std::string* release_working_dir();
  void set_allocated_working_dir(std::string* working_dir);
  private:
  const std::string& _internal_working_dir() const;
  void _internal_set_working_dir(const std::string& value);
  std::string* _internal_mutable_working_dir();
  public:

  // .eCAL.pb.sys_client.Runner runner = 4;
  bool has_runner() const;
  private:
  bool _internal_has_runner() const;
  public:
  void clear_runner();
  const ::eCAL::pb::sys_client::Runner& runner() const;
  ::eCAL::pb::sys_client::Runner* release_runner();
  ::eCAL::pb::sys_client::Runner* mutable_runner();
  void set_allocated_runner(::eCAL::pb::sys_client::Runner* runner);
  private:
  const ::eCAL::pb::sys_client::Runner& _internal_runner() const;
  ::eCAL::pb::sys_client::Runner* _internal_mutable_runner();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_dir_;
  ::eCAL::pb::sys_client::Runner* runner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Runner :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.Runner) */ {
 public:
  Runner();
  virtual ~Runner();

  Runner(const Runner& from);
  Runner(Runner&& from) noexcept
    : Runner() {
    *this = ::std::move(from);
  }

  inline Runner& operator=(const Runner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Runner& operator=(Runner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Runner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Runner* internal_default_instance() {
    return reinterpret_cast<const Runner*>(
               &_Runner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Runner& a, Runner& b) {
    a.Swap(&b);
  }
  inline void Swap(Runner* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Runner* New() const final {
    return CreateMaybeMessage<Runner>(nullptr);
  }

  Runner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Runner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Runner& from);
  void MergeFrom(const Runner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Runner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.Runner";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kArgumentsFieldNumber = 2,
    kDefaultTaskDirFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string arguments = 2;
  void clear_arguments();
  const std::string& arguments() const;
  void set_arguments(const std::string& value);
  void set_arguments(std::string&& value);
  void set_arguments(const char* value);
  void set_arguments(const char* value, size_t size);
  std::string* mutable_arguments();
  std::string* release_arguments();
  void set_allocated_arguments(std::string* arguments);
  private:
  const std::string& _internal_arguments() const;
  void _internal_set_arguments(const std::string& value);
  std::string* _internal_mutable_arguments();
  public:

  // string default_task_dir = 3;
  void clear_default_task_dir();
  const std::string& default_task_dir() const;
  void set_default_task_dir(const std::string& value);
  void set_default_task_dir(std::string&& value);
  void set_default_task_dir(const char* value);
  void set_default_task_dir(const char* value, size_t size);
  std::string* mutable_default_task_dir();
  std::string* release_default_task_dir();
  void set_allocated_default_task_dir(std::string* default_task_dir);
  private:
  const std::string& _internal_default_task_dir() const;
  void _internal_set_default_task_dir(const std::string& value);
  std::string* _internal_mutable_default_task_dir();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.Runner)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_task_dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartTaskParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.StartTaskParameters) */ {
 public:
  StartTaskParameters();
  virtual ~StartTaskParameters();

  StartTaskParameters(const StartTaskParameters& from);
  StartTaskParameters(StartTaskParameters&& from) noexcept
    : StartTaskParameters() {
    *this = ::std::move(from);
  }

  inline StartTaskParameters& operator=(const StartTaskParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTaskParameters& operator=(StartTaskParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTaskParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTaskParameters* internal_default_instance() {
    return reinterpret_cast<const StartTaskParameters*>(
               &_StartTaskParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartTaskParameters& a, StartTaskParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTaskParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTaskParameters* New() const final {
    return CreateMaybeMessage<StartTaskParameters>(nullptr);
  }

  StartTaskParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTaskParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTaskParameters& from);
  void MergeFrom(const StartTaskParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTaskParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.StartTaskParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kWindowModeFieldNumber = 2,
    kCreateConsoleFieldNumber = 3,
  };
  // .eCAL.pb.sys_client.Task task = 1;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::eCAL::pb::sys_client::Task& task() const;
  ::eCAL::pb::sys_client::Task* release_task();
  ::eCAL::pb::sys_client::Task* mutable_task();
  void set_allocated_task(::eCAL::pb::sys_client::Task* task);
  private:
  const ::eCAL::pb::sys_client::Task& _internal_task() const;
  ::eCAL::pb::sys_client::Task* _internal_mutable_task();
  public:

  // .eCAL.pb.sys_client.WindowMode window_mode = 2;
  void clear_window_mode();
  ::eCAL::pb::sys_client::WindowMode window_mode() const;
  void set_window_mode(::eCAL::pb::sys_client::WindowMode value);
  private:
  ::eCAL::pb::sys_client::WindowMode _internal_window_mode() const;
  void _internal_set_window_mode(::eCAL::pb::sys_client::WindowMode value);
  public:

  // bool create_console = 3;
  void clear_create_console();
  bool create_console() const;
  void set_create_console(bool value);
  private:
  bool _internal_create_console() const;
  void _internal_set_create_console(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.StartTaskParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eCAL::pb::sys_client::Task* task_;
  int window_mode_;
  bool create_console_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StopTaskParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.StopTaskParameters) */ {
 public:
  StopTaskParameters();
  virtual ~StopTaskParameters();

  StopTaskParameters(const StopTaskParameters& from);
  StopTaskParameters(StopTaskParameters&& from) noexcept
    : StopTaskParameters() {
    *this = ::std::move(from);
  }

  inline StopTaskParameters& operator=(const StopTaskParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTaskParameters& operator=(StopTaskParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTaskParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopTaskParameters* internal_default_instance() {
    return reinterpret_cast<const StopTaskParameters*>(
               &_StopTaskParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopTaskParameters& a, StopTaskParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTaskParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTaskParameters* New() const final {
    return CreateMaybeMessage<StopTaskParameters>(nullptr);
  }

  StopTaskParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTaskParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTaskParameters& from);
  void MergeFrom(const StopTaskParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTaskParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.StopTaskParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kPidFieldNumber = 1,
    kEcalShutdownFieldNumber = 3,
  };
  // .eCAL.pb.sys_client.Task task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::eCAL::pb::sys_client::Task& task() const;
  ::eCAL::pb::sys_client::Task* release_task();
  ::eCAL::pb::sys_client::Task* mutable_task();
  void set_allocated_task(::eCAL::pb::sys_client::Task* task);
  private:
  const ::eCAL::pb::sys_client::Task& _internal_task() const;
  ::eCAL::pb::sys_client::Task* _internal_mutable_task();
  public:

  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool ecal_shutdown = 3;
  void clear_ecal_shutdown();
  bool ecal_shutdown() const;
  void set_ecal_shutdown(bool value);
  private:
  bool _internal_ecal_shutdown() const;
  void _internal_set_ecal_shutdown(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.StopTaskParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eCAL::pb::sys_client::Task* task_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  bool ecal_shutdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartTaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.StartTaskRequest) */ {
 public:
  StartTaskRequest();
  virtual ~StartTaskRequest();

  StartTaskRequest(const StartTaskRequest& from);
  StartTaskRequest(StartTaskRequest&& from) noexcept
    : StartTaskRequest() {
    *this = ::std::move(from);
  }

  inline StartTaskRequest& operator=(const StartTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTaskRequest& operator=(StartTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTaskRequest* internal_default_instance() {
    return reinterpret_cast<const StartTaskRequest*>(
               &_StartTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartTaskRequest& a, StartTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTaskRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTaskRequest* New() const final {
    return CreateMaybeMessage<StartTaskRequest>(nullptr);
  }

  StartTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTaskRequest& from);
  void MergeFrom(const StartTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.StartTaskRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
  };
  // repeated .eCAL.pb.sys_client.StartTaskParameters tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::eCAL::pb::sys_client::StartTaskParameters* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StartTaskParameters >*
      mutable_tasks();
  private:
  const ::eCAL::pb::sys_client::StartTaskParameters& _internal_tasks(int index) const;
  ::eCAL::pb::sys_client::StartTaskParameters* _internal_add_tasks();
  public:
  const ::eCAL::pb::sys_client::StartTaskParameters& tasks(int index) const;
  ::eCAL::pb::sys_client::StartTaskParameters* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StartTaskParameters >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.StartTaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StartTaskParameters > tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StopTaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.StopTaskRequest) */ {
 public:
  StopTaskRequest();
  virtual ~StopTaskRequest();

  StopTaskRequest(const StopTaskRequest& from);
  StopTaskRequest(StopTaskRequest&& from) noexcept
    : StopTaskRequest() {
    *this = ::std::move(from);
  }

  inline StopTaskRequest& operator=(const StopTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTaskRequest& operator=(StopTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopTaskRequest* internal_default_instance() {
    return reinterpret_cast<const StopTaskRequest*>(
               &_StopTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopTaskRequest& a, StopTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTaskRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTaskRequest* New() const final {
    return CreateMaybeMessage<StopTaskRequest>(nullptr);
  }

  StopTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTaskRequest& from);
  void MergeFrom(const StopTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.StopTaskRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
  };
  // repeated .eCAL.pb.sys_client.StopTaskParameters tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::eCAL::pb::sys_client::StopTaskParameters* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StopTaskParameters >*
      mutable_tasks();
  private:
  const ::eCAL::pb::sys_client::StopTaskParameters& _internal_tasks(int index) const;
  ::eCAL::pb::sys_client::StopTaskParameters* _internal_add_tasks();
  public:
  const ::eCAL::pb::sys_client::StopTaskParameters& tasks(int index) const;
  ::eCAL::pb::sys_client::StopTaskParameters* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StopTaskParameters >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.StopTaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StopTaskParameters > tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.TaskList) */ {
 public:
  TaskList();
  virtual ~TaskList();

  TaskList(const TaskList& from);
  TaskList(TaskList&& from) noexcept
    : TaskList() {
    *this = ::std::move(from);
  }

  inline TaskList& operator=(const TaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskList& operator=(TaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskList* internal_default_instance() {
    return reinterpret_cast<const TaskList*>(
               &_TaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskList& a, TaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskList* New() const final {
    return CreateMaybeMessage<TaskList>(nullptr);
  }

  TaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskList& from);
  void MergeFrom(const TaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.TaskList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
  };
  // repeated .eCAL.pb.sys_client.Task tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::eCAL::pb::sys_client::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::Task >*
      mutable_tasks();
  private:
  const ::eCAL::pb::sys_client::Task& _internal_tasks(int index) const;
  ::eCAL::pb::sys_client::Task* _internal_add_tasks();
  public:
  const ::eCAL::pb::sys_client::Task& tasks(int index) const;
  ::eCAL::pb::sys_client::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::Task >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.TaskList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::Task > tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleTaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.SingleTaskResponse) */ {
 public:
  SingleTaskResponse();
  virtual ~SingleTaskResponse();

  SingleTaskResponse(const SingleTaskResponse& from);
  SingleTaskResponse(SingleTaskResponse&& from) noexcept
    : SingleTaskResponse() {
    *this = ::std::move(from);
  }

  inline SingleTaskResponse& operator=(const SingleTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTaskResponse& operator=(SingleTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTaskResponse* internal_default_instance() {
    return reinterpret_cast<const SingleTaskResponse*>(
               &_SingleTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SingleTaskResponse& a, SingleTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTaskResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleTaskResponse* New() const final {
    return CreateMaybeMessage<SingleTaskResponse>(nullptr);
  }

  SingleTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleTaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleTaskResponse& from);
  void MergeFrom(const SingleTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.SingleTaskResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kResultFieldNumber = 1,
    kPidFieldNumber = 3,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .eCAL.pb.sys_client.eServiceResult result = 1;
  void clear_result();
  ::eCAL::pb::sys_client::eServiceResult result() const;
  void set_result(::eCAL::pb::sys_client::eServiceResult value);
  private:
  ::eCAL::pb::sys_client::eServiceResult _internal_result() const;
  void _internal_set_result(::eCAL::pb::sys_client::eServiceResult value);
  public:

  // int32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.SingleTaskResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.TaskResponse) */ {
 public:
  TaskResponse();
  virtual ~TaskResponse();

  TaskResponse(const TaskResponse& from);
  TaskResponse(TaskResponse&& from) noexcept
    : TaskResponse() {
    *this = ::std::move(from);
  }

  inline TaskResponse& operator=(const TaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResponse& operator=(TaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResponse* internal_default_instance() {
    return reinterpret_cast<const TaskResponse*>(
               &_TaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TaskResponse& a, TaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskResponse* New() const final {
    return CreateMaybeMessage<TaskResponse>(nullptr);
  }

  TaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskResponse& from);
  void MergeFrom(const TaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.TaskResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .eCAL.pb.sys_client.SingleTaskResponse responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::eCAL::pb::sys_client::SingleTaskResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::SingleTaskResponse >*
      mutable_responses();
  private:
  const ::eCAL::pb::sys_client::SingleTaskResponse& _internal_responses(int index) const;
  ::eCAL::pb::sys_client::SingleTaskResponse* _internal_add_responses();
  public:
  const ::eCAL::pb::sys_client::SingleTaskResponse& responses(int index) const;
  ::eCAL::pb::sys_client::SingleTaskResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::SingleTaskResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.TaskResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::SingleTaskResponse > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PidList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.PidList) */ {
 public:
  PidList();
  virtual ~PidList();

  PidList(const PidList& from);
  PidList(PidList&& from) noexcept
    : PidList() {
    *this = ::std::move(from);
  }

  inline PidList& operator=(const PidList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PidList& operator=(PidList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PidList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PidList* internal_default_instance() {
    return reinterpret_cast<const PidList*>(
               &_PidList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PidList& a, PidList& b) {
    a.Swap(&b);
  }
  inline void Swap(PidList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PidList* New() const final {
    return CreateMaybeMessage<PidList>(nullptr);
  }

  PidList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PidList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PidList& from);
  void MergeFrom(const PidList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PidList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.PidList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidsFieldNumber = 1,
  };
  // repeated int32 pids = 1;
  int pids_size() const;
  private:
  int _internal_pids_size() const;
  public:
  void clear_pids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pids() const;
  void _internal_add_pids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pids(int index) const;
  void set_pids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pids();

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.PidList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pids_;
  mutable std::atomic<int> _pids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchTaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys_client.MatchTaskResponse) */ {
 public:
  MatchTaskResponse();
  virtual ~MatchTaskResponse();

  MatchTaskResponse(const MatchTaskResponse& from);
  MatchTaskResponse(MatchTaskResponse&& from) noexcept
    : MatchTaskResponse() {
    *this = ::std::move(from);
  }

  inline MatchTaskResponse& operator=(const MatchTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchTaskResponse& operator=(MatchTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchTaskResponse* internal_default_instance() {
    return reinterpret_cast<const MatchTaskResponse*>(
               &_MatchTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MatchTaskResponse& a, MatchTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchTaskResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchTaskResponse* New() const final {
    return CreateMaybeMessage<MatchTaskResponse>(nullptr);
  }

  MatchTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchTaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchTaskResponse& from);
  void MergeFrom(const MatchTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys_client.MatchTaskResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidListsFieldNumber = 1,
  };
  // repeated .eCAL.pb.sys_client.PidList pid_lists = 1;
  int pid_lists_size() const;
  private:
  int _internal_pid_lists_size() const;
  public:
  void clear_pid_lists();
  ::eCAL::pb::sys_client::PidList* mutable_pid_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::PidList >*
      mutable_pid_lists();
  private:
  const ::eCAL::pb::sys_client::PidList& _internal_pid_lists(int index) const;
  ::eCAL::pb::sys_client::PidList* _internal_add_pid_lists();
  public:
  const ::eCAL::pb::sys_client::PidList& pid_lists(int index) const;
  ::eCAL::pb::sys_client::PidList* add_pid_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::PidList >&
      pid_lists() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys_client.MatchTaskResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::PidList > pid_lists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto;
};
// ===================================================================

class EcalSysClientService_Stub;

class EcalSysClientService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EcalSysClientService() {};
 public:
  virtual ~EcalSysClientService();

  typedef EcalSysClientService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void StartTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys_client::StartTaskRequest* request,
                       ::eCAL::pb::sys_client::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StopTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys_client::StopTaskRequest* request,
                       ::eCAL::pb::sys_client::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void MatchTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys_client::TaskList* request,
                       ::eCAL::pb::sys_client::MatchTaskResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EcalSysClientService);
};

class EcalSysClientService_Stub : public EcalSysClientService {
 public:
  EcalSysClientService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EcalSysClientService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EcalSysClientService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EcalSysClientService ------------------------------------------

  void StartTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys_client::StartTaskRequest* request,
                       ::eCAL::pb::sys_client::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  void StopTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys_client::StopTaskRequest* request,
                       ::eCAL::pb::sys_client::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  void MatchTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys_client::TaskList* request,
                       ::eCAL::pb::sys_client::MatchTaskResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EcalSysClientService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// string path = 1;
inline void Task::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Task.path)
  return _internal_path();
}
inline void Task::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.Task.path)
}
inline std::string* Task::mutable_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Task.path)
  return _internal_mutable_path();
}
inline const std::string& Task::_internal_path() const {
  return path_.GetNoArena();
}
inline void Task::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.Task.path)
}
inline void Task::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.Task.path)
}
inline void Task::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.Task.path)
}
inline std::string* Task::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Task.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Task.path)
}

// string arguments = 2;
inline void Task::clear_arguments() {
  arguments_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::arguments() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Task.arguments)
  return _internal_arguments();
}
inline void Task::set_arguments(const std::string& value) {
  _internal_set_arguments(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.Task.arguments)
}
inline std::string* Task::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Task.arguments)
  return _internal_mutable_arguments();
}
inline const std::string& Task::_internal_arguments() const {
  return arguments_.GetNoArena();
}
inline void Task::_internal_set_arguments(const std::string& value) {
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_arguments(std::string&& value) {
  
  arguments_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.Task.arguments)
}
inline void Task::set_arguments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.Task.arguments)
}
inline void Task::set_arguments(const char* value, size_t size) {
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.Task.arguments)
}
inline std::string* Task::_internal_mutable_arguments() {
  
  return arguments_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_arguments() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Task.arguments)
  
  return arguments_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_arguments(std::string* arguments) {
  if (arguments != nullptr) {
    
  } else {
    
  }
  arguments_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arguments);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Task.arguments)
}

// string working_dir = 3;
inline void Task::clear_working_dir() {
  working_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::working_dir() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Task.working_dir)
  return _internal_working_dir();
}
inline void Task::set_working_dir(const std::string& value) {
  _internal_set_working_dir(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.Task.working_dir)
}
inline std::string* Task::mutable_working_dir() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Task.working_dir)
  return _internal_mutable_working_dir();
}
inline const std::string& Task::_internal_working_dir() const {
  return working_dir_.GetNoArena();
}
inline void Task::_internal_set_working_dir(const std::string& value) {
  
  working_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_working_dir(std::string&& value) {
  
  working_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.Task.working_dir)
}
inline void Task::set_working_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  working_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.Task.working_dir)
}
inline void Task::set_working_dir(const char* value, size_t size) {
  
  working_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.Task.working_dir)
}
inline std::string* Task::_internal_mutable_working_dir() {
  
  return working_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_working_dir() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Task.working_dir)
  
  return working_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_working_dir(std::string* working_dir) {
  if (working_dir != nullptr) {
    
  } else {
    
  }
  working_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_dir);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Task.working_dir)
}

// .eCAL.pb.sys_client.Runner runner = 4;
inline bool Task::_internal_has_runner() const {
  return this != internal_default_instance() && runner_ != nullptr;
}
inline bool Task::has_runner() const {
  return _internal_has_runner();
}
inline void Task::clear_runner() {
  if (GetArenaNoVirtual() == nullptr && runner_ != nullptr) {
    delete runner_;
  }
  runner_ = nullptr;
}
inline const ::eCAL::pb::sys_client::Runner& Task::_internal_runner() const {
  const ::eCAL::pb::sys_client::Runner* p = runner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::sys_client::Runner*>(
      &::eCAL::pb::sys_client::_Runner_default_instance_);
}
inline const ::eCAL::pb::sys_client::Runner& Task::runner() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Task.runner)
  return _internal_runner();
}
inline ::eCAL::pb::sys_client::Runner* Task::release_runner() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Task.runner)
  
  ::eCAL::pb::sys_client::Runner* temp = runner_;
  runner_ = nullptr;
  return temp;
}
inline ::eCAL::pb::sys_client::Runner* Task::_internal_mutable_runner() {
  
  if (runner_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::sys_client::Runner>(GetArenaNoVirtual());
    runner_ = p;
  }
  return runner_;
}
inline ::eCAL::pb::sys_client::Runner* Task::mutable_runner() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Task.runner)
  return _internal_mutable_runner();
}
inline void Task::set_allocated_runner(::eCAL::pb::sys_client::Runner* runner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete runner_;
  }
  if (runner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      runner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runner, submessage_arena);
    }
    
  } else {
    
  }
  runner_ = runner;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Task.runner)
}

// -------------------------------------------------------------------

// Runner

// string path = 1;
inline void Runner::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Runner::path() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Runner.path)
  return _internal_path();
}
inline void Runner::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.Runner.path)
}
inline std::string* Runner::mutable_path() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Runner.path)
  return _internal_mutable_path();
}
inline const std::string& Runner::_internal_path() const {
  return path_.GetNoArena();
}
inline void Runner::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Runner::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.Runner.path)
}
inline void Runner::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.Runner.path)
}
inline void Runner::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.Runner.path)
}
inline std::string* Runner::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Runner::release_path() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Runner.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Runner::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Runner.path)
}

// string arguments = 2;
inline void Runner::clear_arguments() {
  arguments_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Runner::arguments() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Runner.arguments)
  return _internal_arguments();
}
inline void Runner::set_arguments(const std::string& value) {
  _internal_set_arguments(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.Runner.arguments)
}
inline std::string* Runner::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Runner.arguments)
  return _internal_mutable_arguments();
}
inline const std::string& Runner::_internal_arguments() const {
  return arguments_.GetNoArena();
}
inline void Runner::_internal_set_arguments(const std::string& value) {
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Runner::set_arguments(std::string&& value) {
  
  arguments_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.Runner.arguments)
}
inline void Runner::set_arguments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.Runner.arguments)
}
inline void Runner::set_arguments(const char* value, size_t size) {
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.Runner.arguments)
}
inline std::string* Runner::_internal_mutable_arguments() {
  
  return arguments_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Runner::release_arguments() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Runner.arguments)
  
  return arguments_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Runner::set_allocated_arguments(std::string* arguments) {
  if (arguments != nullptr) {
    
  } else {
    
  }
  arguments_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arguments);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Runner.arguments)
}

// string default_task_dir = 3;
inline void Runner::clear_default_task_dir() {
  default_task_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Runner::default_task_dir() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.Runner.default_task_dir)
  return _internal_default_task_dir();
}
inline void Runner::set_default_task_dir(const std::string& value) {
  _internal_set_default_task_dir(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.Runner.default_task_dir)
}
inline std::string* Runner::mutable_default_task_dir() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.Runner.default_task_dir)
  return _internal_mutable_default_task_dir();
}
inline const std::string& Runner::_internal_default_task_dir() const {
  return default_task_dir_.GetNoArena();
}
inline void Runner::_internal_set_default_task_dir(const std::string& value) {
  
  default_task_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Runner::set_default_task_dir(std::string&& value) {
  
  default_task_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.Runner.default_task_dir)
}
inline void Runner::set_default_task_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_task_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.Runner.default_task_dir)
}
inline void Runner::set_default_task_dir(const char* value, size_t size) {
  
  default_task_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.Runner.default_task_dir)
}
inline std::string* Runner::_internal_mutable_default_task_dir() {
  
  return default_task_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Runner::release_default_task_dir() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.Runner.default_task_dir)
  
  return default_task_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Runner::set_allocated_default_task_dir(std::string* default_task_dir) {
  if (default_task_dir != nullptr) {
    
  } else {
    
  }
  default_task_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_task_dir);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.Runner.default_task_dir)
}

// -------------------------------------------------------------------

// StartTaskParameters

// .eCAL.pb.sys_client.Task task = 1;
inline bool StartTaskParameters::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool StartTaskParameters::has_task() const {
  return _internal_has_task();
}
inline void StartTaskParameters::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::eCAL::pb::sys_client::Task& StartTaskParameters::_internal_task() const {
  const ::eCAL::pb::sys_client::Task* p = task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::sys_client::Task*>(
      &::eCAL::pb::sys_client::_Task_default_instance_);
}
inline const ::eCAL::pb::sys_client::Task& StartTaskParameters::task() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StartTaskParameters.task)
  return _internal_task();
}
inline ::eCAL::pb::sys_client::Task* StartTaskParameters::release_task() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.StartTaskParameters.task)
  
  ::eCAL::pb::sys_client::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::eCAL::pb::sys_client::Task* StartTaskParameters::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::sys_client::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  return task_;
}
inline ::eCAL::pb::sys_client::Task* StartTaskParameters::mutable_task() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.StartTaskParameters.task)
  return _internal_mutable_task();
}
inline void StartTaskParameters::set_allocated_task(::eCAL::pb::sys_client::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.StartTaskParameters.task)
}

// .eCAL.pb.sys_client.WindowMode window_mode = 2;
inline void StartTaskParameters::clear_window_mode() {
  window_mode_ = 0;
}
inline ::eCAL::pb::sys_client::WindowMode StartTaskParameters::_internal_window_mode() const {
  return static_cast< ::eCAL::pb::sys_client::WindowMode >(window_mode_);
}
inline ::eCAL::pb::sys_client::WindowMode StartTaskParameters::window_mode() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StartTaskParameters.window_mode)
  return _internal_window_mode();
}
inline void StartTaskParameters::_internal_set_window_mode(::eCAL::pb::sys_client::WindowMode value) {
  
  window_mode_ = value;
}
inline void StartTaskParameters::set_window_mode(::eCAL::pb::sys_client::WindowMode value) {
  _internal_set_window_mode(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.StartTaskParameters.window_mode)
}

// bool create_console = 3;
inline void StartTaskParameters::clear_create_console() {
  create_console_ = false;
}
inline bool StartTaskParameters::_internal_create_console() const {
  return create_console_;
}
inline bool StartTaskParameters::create_console() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StartTaskParameters.create_console)
  return _internal_create_console();
}
inline void StartTaskParameters::_internal_set_create_console(bool value) {
  
  create_console_ = value;
}
inline void StartTaskParameters::set_create_console(bool value) {
  _internal_set_create_console(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.StartTaskParameters.create_console)
}

// -------------------------------------------------------------------

// StopTaskParameters

// int32 pid = 1;
inline void StopTaskParameters::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopTaskParameters::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopTaskParameters::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StopTaskParameters.pid)
  return _internal_pid();
}
inline void StopTaskParameters::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void StopTaskParameters::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.StopTaskParameters.pid)
}

// .eCAL.pb.sys_client.Task task = 2;
inline bool StopTaskParameters::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool StopTaskParameters::has_task() const {
  return _internal_has_task();
}
inline void StopTaskParameters::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::eCAL::pb::sys_client::Task& StopTaskParameters::_internal_task() const {
  const ::eCAL::pb::sys_client::Task* p = task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::sys_client::Task*>(
      &::eCAL::pb::sys_client::_Task_default_instance_);
}
inline const ::eCAL::pb::sys_client::Task& StopTaskParameters::task() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StopTaskParameters.task)
  return _internal_task();
}
inline ::eCAL::pb::sys_client::Task* StopTaskParameters::release_task() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.StopTaskParameters.task)
  
  ::eCAL::pb::sys_client::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::eCAL::pb::sys_client::Task* StopTaskParameters::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::sys_client::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  return task_;
}
inline ::eCAL::pb::sys_client::Task* StopTaskParameters::mutable_task() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.StopTaskParameters.task)
  return _internal_mutable_task();
}
inline void StopTaskParameters::set_allocated_task(::eCAL::pb::sys_client::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.StopTaskParameters.task)
}

// bool ecal_shutdown = 3;
inline void StopTaskParameters::clear_ecal_shutdown() {
  ecal_shutdown_ = false;
}
inline bool StopTaskParameters::_internal_ecal_shutdown() const {
  return ecal_shutdown_;
}
inline bool StopTaskParameters::ecal_shutdown() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StopTaskParameters.ecal_shutdown)
  return _internal_ecal_shutdown();
}
inline void StopTaskParameters::_internal_set_ecal_shutdown(bool value) {
  
  ecal_shutdown_ = value;
}
inline void StopTaskParameters::set_ecal_shutdown(bool value) {
  _internal_set_ecal_shutdown(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.StopTaskParameters.ecal_shutdown)
}

// -------------------------------------------------------------------

// StartTaskRequest

// repeated .eCAL.pb.sys_client.StartTaskParameters tasks = 1;
inline int StartTaskRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int StartTaskRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline void StartTaskRequest::clear_tasks() {
  tasks_.Clear();
}
inline ::eCAL::pb::sys_client::StartTaskParameters* StartTaskRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.StartTaskRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StartTaskParameters >*
StartTaskRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys_client.StartTaskRequest.tasks)
  return &tasks_;
}
inline const ::eCAL::pb::sys_client::StartTaskParameters& StartTaskRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::eCAL::pb::sys_client::StartTaskParameters& StartTaskRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StartTaskRequest.tasks)
  return _internal_tasks(index);
}
inline ::eCAL::pb::sys_client::StartTaskParameters* StartTaskRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::eCAL::pb::sys_client::StartTaskParameters* StartTaskRequest::add_tasks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys_client.StartTaskRequest.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StartTaskParameters >&
StartTaskRequest::tasks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys_client.StartTaskRequest.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// StopTaskRequest

// repeated .eCAL.pb.sys_client.StopTaskParameters tasks = 1;
inline int StopTaskRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int StopTaskRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline void StopTaskRequest::clear_tasks() {
  tasks_.Clear();
}
inline ::eCAL::pb::sys_client::StopTaskParameters* StopTaskRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.StopTaskRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StopTaskParameters >*
StopTaskRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys_client.StopTaskRequest.tasks)
  return &tasks_;
}
inline const ::eCAL::pb::sys_client::StopTaskParameters& StopTaskRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::eCAL::pb::sys_client::StopTaskParameters& StopTaskRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.StopTaskRequest.tasks)
  return _internal_tasks(index);
}
inline ::eCAL::pb::sys_client::StopTaskParameters* StopTaskRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::eCAL::pb::sys_client::StopTaskParameters* StopTaskRequest::add_tasks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys_client.StopTaskRequest.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::StopTaskParameters >&
StopTaskRequest::tasks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys_client.StopTaskRequest.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// TaskList

// repeated .eCAL.pb.sys_client.Task tasks = 1;
inline int TaskList::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TaskList::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskList::clear_tasks() {
  tasks_.Clear();
}
inline ::eCAL::pb::sys_client::Task* TaskList::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.TaskList.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::Task >*
TaskList::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys_client.TaskList.tasks)
  return &tasks_;
}
inline const ::eCAL::pb::sys_client::Task& TaskList::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::eCAL::pb::sys_client::Task& TaskList::tasks(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.TaskList.tasks)
  return _internal_tasks(index);
}
inline ::eCAL::pb::sys_client::Task* TaskList::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::eCAL::pb::sys_client::Task* TaskList::add_tasks() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys_client.TaskList.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::Task >&
TaskList::tasks() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys_client.TaskList.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// SingleTaskResponse

// .eCAL.pb.sys_client.eServiceResult result = 1;
inline void SingleTaskResponse::clear_result() {
  result_ = 0;
}
inline ::eCAL::pb::sys_client::eServiceResult SingleTaskResponse::_internal_result() const {
  return static_cast< ::eCAL::pb::sys_client::eServiceResult >(result_);
}
inline ::eCAL::pb::sys_client::eServiceResult SingleTaskResponse::result() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.SingleTaskResponse.result)
  return _internal_result();
}
inline void SingleTaskResponse::_internal_set_result(::eCAL::pb::sys_client::eServiceResult value) {
  
  result_ = value;
}
inline void SingleTaskResponse::set_result(::eCAL::pb::sys_client::eServiceResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.SingleTaskResponse.result)
}

// string error = 2;
inline void SingleTaskResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleTaskResponse::error() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.SingleTaskResponse.error)
  return _internal_error();
}
inline void SingleTaskResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.SingleTaskResponse.error)
}
inline std::string* SingleTaskResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.SingleTaskResponse.error)
  return _internal_mutable_error();
}
inline const std::string& SingleTaskResponse::_internal_error() const {
  return error_.GetNoArena();
}
inline void SingleTaskResponse::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleTaskResponse::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys_client.SingleTaskResponse.error)
}
inline void SingleTaskResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys_client.SingleTaskResponse.error)
}
inline void SingleTaskResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys_client.SingleTaskResponse.error)
}
inline std::string* SingleTaskResponse::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleTaskResponse::release_error() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys_client.SingleTaskResponse.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleTaskResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys_client.SingleTaskResponse.error)
}

// int32 pid = 3;
inline void SingleTaskResponse::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleTaskResponse::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleTaskResponse::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.SingleTaskResponse.pid)
  return _internal_pid();
}
inline void SingleTaskResponse::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void SingleTaskResponse::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.SingleTaskResponse.pid)
}

// -------------------------------------------------------------------

// TaskResponse

// repeated .eCAL.pb.sys_client.SingleTaskResponse responses = 1;
inline int TaskResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int TaskResponse::responses_size() const {
  return _internal_responses_size();
}
inline void TaskResponse::clear_responses() {
  responses_.Clear();
}
inline ::eCAL::pb::sys_client::SingleTaskResponse* TaskResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.TaskResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::SingleTaskResponse >*
TaskResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys_client.TaskResponse.responses)
  return &responses_;
}
inline const ::eCAL::pb::sys_client::SingleTaskResponse& TaskResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::eCAL::pb::sys_client::SingleTaskResponse& TaskResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.TaskResponse.responses)
  return _internal_responses(index);
}
inline ::eCAL::pb::sys_client::SingleTaskResponse* TaskResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::eCAL::pb::sys_client::SingleTaskResponse* TaskResponse::add_responses() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys_client.TaskResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::SingleTaskResponse >&
TaskResponse::responses() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys_client.TaskResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// PidList

// repeated int32 pids = 1;
inline int PidList::_internal_pids_size() const {
  return pids_.size();
}
inline int PidList::pids_size() const {
  return _internal_pids_size();
}
inline void PidList::clear_pids() {
  pids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PidList::_internal_pids(int index) const {
  return pids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PidList::pids(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.PidList.pids)
  return _internal_pids(index);
}
inline void PidList::set_pids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pids_.Set(index, value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys_client.PidList.pids)
}
inline void PidList::_internal_add_pids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pids_.Add(value);
}
inline void PidList::add_pids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pids(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.sys_client.PidList.pids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PidList::_internal_pids() const {
  return pids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PidList::pids() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys_client.PidList.pids)
  return _internal_pids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PidList::_internal_mutable_pids() {
  return &pids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PidList::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys_client.PidList.pids)
  return _internal_mutable_pids();
}

// -------------------------------------------------------------------

// MatchTaskResponse

// repeated .eCAL.pb.sys_client.PidList pid_lists = 1;
inline int MatchTaskResponse::_internal_pid_lists_size() const {
  return pid_lists_.size();
}
inline int MatchTaskResponse::pid_lists_size() const {
  return _internal_pid_lists_size();
}
inline void MatchTaskResponse::clear_pid_lists() {
  pid_lists_.Clear();
}
inline ::eCAL::pb::sys_client::PidList* MatchTaskResponse::mutable_pid_lists(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys_client.MatchTaskResponse.pid_lists)
  return pid_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::PidList >*
MatchTaskResponse::mutable_pid_lists() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys_client.MatchTaskResponse.pid_lists)
  return &pid_lists_;
}
inline const ::eCAL::pb::sys_client::PidList& MatchTaskResponse::_internal_pid_lists(int index) const {
  return pid_lists_.Get(index);
}
inline const ::eCAL::pb::sys_client::PidList& MatchTaskResponse::pid_lists(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys_client.MatchTaskResponse.pid_lists)
  return _internal_pid_lists(index);
}
inline ::eCAL::pb::sys_client::PidList* MatchTaskResponse::_internal_add_pid_lists() {
  return pid_lists_.Add();
}
inline ::eCAL::pb::sys_client::PidList* MatchTaskResponse::add_pid_lists() {
  // @@protoc_insertion_point(field_add:eCAL.pb.sys_client.MatchTaskResponse.pid_lists)
  return _internal_add_pid_lists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::sys_client::PidList >&
MatchTaskResponse::pid_lists() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys_client.MatchTaskResponse.pid_lists)
  return pid_lists_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sys_client
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::sys_client::WindowMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::sys_client::WindowMode>() {
  return ::eCAL::pb::sys_client::WindowMode_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::sys_client::eServiceResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::sys_client::eServiceResult>() {
  return ::eCAL::pb::sys_client::eServiceResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fclient_5fservice_2eproto
