// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/sys/process.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto;
namespace eCAL {
namespace pb {
namespace sys {
class ProcessState;
class ProcessStateDefaultTypeInternal;
extern ProcessStateDefaultTypeInternal _ProcessState_default_instance_;
}  // namespace sys
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::sys::ProcessState* Arena::CreateMaybeMessage<::eCAL::pb::sys::ProcessState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace sys {

enum eProcessSeverity : int {
  proc_sev_unknown = 0,
  proc_sev_healthy = 1,
  proc_sev_warning = 2,
  proc_sev_critical = 3,
  proc_sev_failed = 4,
  eProcessSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eProcessSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eProcessSeverity_IsValid(int value);
constexpr eProcessSeverity eProcessSeverity_MIN = proc_sev_unknown;
constexpr eProcessSeverity eProcessSeverity_MAX = proc_sev_failed;
constexpr int eProcessSeverity_ARRAYSIZE = eProcessSeverity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eProcessSeverity_descriptor();
template<typename T>
inline const std::string& eProcessSeverity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eProcessSeverity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eProcessSeverity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eProcessSeverity_descriptor(), enum_t_value);
}
inline bool eProcessSeverity_Parse(
    const std::string& name, eProcessSeverity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eProcessSeverity>(
    eProcessSeverity_descriptor(), name, value);
}
enum eProcessSeverityLevel : int {
  proc_sev_level_unknown = 0,
  proc_sev_level1 = 1,
  proc_sev_level2 = 2,
  proc_sev_level3 = 3,
  proc_sev_level4 = 4,
  proc_sev_level5 = 5,
  eProcessSeverityLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eProcessSeverityLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eProcessSeverityLevel_IsValid(int value);
constexpr eProcessSeverityLevel eProcessSeverityLevel_MIN = proc_sev_level_unknown;
constexpr eProcessSeverityLevel eProcessSeverityLevel_MAX = proc_sev_level5;
constexpr int eProcessSeverityLevel_ARRAYSIZE = eProcessSeverityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eProcessSeverityLevel_descriptor();
template<typename T>
inline const std::string& eProcessSeverityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eProcessSeverityLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eProcessSeverityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eProcessSeverityLevel_descriptor(), enum_t_value);
}
inline bool eProcessSeverityLevel_Parse(
    const std::string& name, eProcessSeverityLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eProcessSeverityLevel>(
    eProcessSeverityLevel_descriptor(), name, value);
}
// ===================================================================

class ProcessState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.ProcessState) */ {
 public:
  ProcessState();
  virtual ~ProcessState();

  ProcessState(const ProcessState& from);
  ProcessState(ProcessState&& from) noexcept
    : ProcessState() {
    *this = ::std::move(from);
  }

  inline ProcessState& operator=(const ProcessState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessState& operator=(ProcessState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessState* internal_default_instance() {
    return reinterpret_cast<const ProcessState*>(
               &_ProcessState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessState& a, ProcessState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessState* New() const final {
    return CreateMaybeMessage<ProcessState>(nullptr);
  }

  ProcessState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessState& from);
  void MergeFrom(const ProcessState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.ProcessState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kSeverityFieldNumber = 1,
    kSeverityLevelFieldNumber = 3,
  };
  // string info = 2;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .eCAL.pb.sys.eProcessSeverity severity = 1;
  void clear_severity();
  ::eCAL::pb::sys::eProcessSeverity severity() const;
  void set_severity(::eCAL::pb::sys::eProcessSeverity value);
  private:
  ::eCAL::pb::sys::eProcessSeverity _internal_severity() const;
  void _internal_set_severity(::eCAL::pb::sys::eProcessSeverity value);
  public:

  // .eCAL.pb.sys.eProcessSeverityLevel severity_level = 3;
  void clear_severity_level();
  ::eCAL::pb::sys::eProcessSeverityLevel severity_level() const;
  void set_severity_level(::eCAL::pb::sys::eProcessSeverityLevel value);
  private:
  ::eCAL::pb::sys::eProcessSeverityLevel _internal_severity_level() const;
  void _internal_set_severity_level(::eCAL::pb::sys::eProcessSeverityLevel value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.ProcessState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  int severity_;
  int severity_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessState

// .eCAL.pb.sys.eProcessSeverity severity = 1;
inline void ProcessState::clear_severity() {
  severity_ = 0;
}
inline ::eCAL::pb::sys::eProcessSeverity ProcessState::_internal_severity() const {
  return static_cast< ::eCAL::pb::sys::eProcessSeverity >(severity_);
}
inline ::eCAL::pb::sys::eProcessSeverity ProcessState::severity() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.ProcessState.severity)
  return _internal_severity();
}
inline void ProcessState::_internal_set_severity(::eCAL::pb::sys::eProcessSeverity value) {
  
  severity_ = value;
}
inline void ProcessState::set_severity(::eCAL::pb::sys::eProcessSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.ProcessState.severity)
}

// .eCAL.pb.sys.eProcessSeverityLevel severity_level = 3;
inline void ProcessState::clear_severity_level() {
  severity_level_ = 0;
}
inline ::eCAL::pb::sys::eProcessSeverityLevel ProcessState::_internal_severity_level() const {
  return static_cast< ::eCAL::pb::sys::eProcessSeverityLevel >(severity_level_);
}
inline ::eCAL::pb::sys::eProcessSeverityLevel ProcessState::severity_level() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.ProcessState.severity_level)
  return _internal_severity_level();
}
inline void ProcessState::_internal_set_severity_level(::eCAL::pb::sys::eProcessSeverityLevel value) {
  
  severity_level_ = value;
}
inline void ProcessState::set_severity_level(::eCAL::pb::sys::eProcessSeverityLevel value) {
  _internal_set_severity_level(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.ProcessState.severity_level)
}

// string info = 2;
inline void ProcessState::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessState::info() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.ProcessState.info)
  return _internal_info();
}
inline void ProcessState::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.ProcessState.info)
}
inline std::string* ProcessState::mutable_info() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.ProcessState.info)
  return _internal_mutable_info();
}
inline const std::string& ProcessState::_internal_info() const {
  return info_.GetNoArena();
}
inline void ProcessState::_internal_set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessState::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.ProcessState.info)
}
inline void ProcessState::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.ProcessState.info)
}
inline void ProcessState::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.ProcessState.info)
}
inline std::string* ProcessState::_internal_mutable_info() {
  
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessState::release_info() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.ProcessState.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessState::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.ProcessState.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sys
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::sys::eProcessSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::sys::eProcessSeverity>() {
  return ::eCAL::pb::sys::eProcessSeverity_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::sys::eProcessSeverityLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::sys::eProcessSeverityLevel>() {
  return ::eCAL::pb::sys::eProcessSeverityLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fprocess_2eproto
