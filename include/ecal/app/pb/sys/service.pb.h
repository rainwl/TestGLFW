// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/app/pb/sys/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecal/app/pb/sys/state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fapp_2fpb_2fsys_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fapp_2fpb_2fsys_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto;
namespace eCAL {
namespace pb {
namespace sys {
class GenericRequest;
class GenericRequestDefaultTypeInternal;
extern GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class TaskRequest;
class TaskRequestDefaultTypeInternal;
extern TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
}  // namespace sys
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::sys::GenericRequest* Arena::CreateMaybeMessage<::eCAL::pb::sys::GenericRequest>(Arena*);
template<> ::eCAL::pb::sys::Response* Arena::CreateMaybeMessage<::eCAL::pb::sys::Response>(Arena*);
template<> ::eCAL::pb::sys::TaskRequest* Arena::CreateMaybeMessage<::eCAL::pb::sys::TaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {
namespace sys {

enum Response_eResult : int {
  Response_eResult_none = 0,
  Response_eResult_success = 1,
  Response_eResult_failed = 2,
  Response_eResult_Response_eResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_eResult_Response_eResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_eResult_IsValid(int value);
constexpr Response_eResult Response_eResult_eResult_MIN = Response_eResult_none;
constexpr Response_eResult Response_eResult_eResult_MAX = Response_eResult_failed;
constexpr int Response_eResult_eResult_ARRAYSIZE = Response_eResult_eResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_eResult_descriptor();
template<typename T>
inline const std::string& Response_eResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_eResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_eResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_eResult_descriptor(), enum_t_value);
}
inline bool Response_eResult_Parse(
    const std::string& name, Response_eResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_eResult>(
    Response_eResult_descriptor(), name, value);
}
// ===================================================================

class TaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.TaskRequest) */ {
 public:
  TaskRequest();
  virtual ~TaskRequest();

  TaskRequest(const TaskRequest& from);
  TaskRequest(TaskRequest&& from) noexcept
    : TaskRequest() {
    *this = ::std::move(from);
  }

  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRequest& operator=(TaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRequest* internal_default_instance() {
    return reinterpret_cast<const TaskRequest*>(
               &_TaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskRequest& a, TaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRequest* New() const final {
    return CreateMaybeMessage<TaskRequest>(nullptr);
  }

  TaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskRequest& from);
  void MergeFrom(const TaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.TaskRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidsFieldNumber = 2,
    kTnamesFieldNumber = 3,
    kAllFieldNumber = 1,
  };
  // repeated uint32 tids = 2;
  int tids_size() const;
  private:
  int _internal_tids_size() const;
  public:
  void clear_tids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tids() const;
  void _internal_add_tids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tids(int index) const;
  void set_tids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tids();

  // repeated string tnames = 3;
  int tnames_size() const;
  private:
  int _internal_tnames_size() const;
  public:
  void clear_tnames();
  const std::string& tnames(int index) const;
  std::string* mutable_tnames(int index);
  void set_tnames(int index, const std::string& value);
  void set_tnames(int index, std::string&& value);
  void set_tnames(int index, const char* value);
  void set_tnames(int index, const char* value, size_t size);
  std::string* add_tnames();
  void add_tnames(const std::string& value);
  void add_tnames(std::string&& value);
  void add_tnames(const char* value);
  void add_tnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tnames();
  private:
  const std::string& _internal_tnames(int index) const;
  std::string* _internal_add_tnames();
  public:

  // bool all = 1;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.TaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tids_;
  mutable std::atomic<int> _tids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tnames_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GenericRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.GenericRequest) */ {
 public:
  GenericRequest();
  virtual ~GenericRequest();

  GenericRequest(const GenericRequest& from);
  GenericRequest(GenericRequest&& from) noexcept
    : GenericRequest() {
    *this = ::std::move(from);
  }

  inline GenericRequest& operator=(const GenericRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericRequest& operator=(GenericRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericRequest* internal_default_instance() {
    return reinterpret_cast<const GenericRequest*>(
               &_GenericRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericRequest& a, GenericRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericRequest* New() const final {
    return CreateMaybeMessage<GenericRequest>(nullptr);
  }

  GenericRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericRequest& from);
  void MergeFrom(const GenericRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.GenericRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.GenericRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.sys.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.sys.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto);
    return ::descriptor_table_ecal_2fapp_2fpb_2fsys_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Response_eResult eResult;
  static constexpr eResult none =
    Response_eResult_none;
  static constexpr eResult success =
    Response_eResult_success;
  static constexpr eResult failed =
    Response_eResult_failed;
  static inline bool eResult_IsValid(int value) {
    return Response_eResult_IsValid(value);
  }
  static constexpr eResult eResult_MIN =
    Response_eResult_eResult_MIN;
  static constexpr eResult eResult_MAX =
    Response_eResult_eResult_MAX;
  static constexpr int eResult_ARRAYSIZE =
    Response_eResult_eResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eResult_descriptor() {
    return Response_eResult_descriptor();
  }
  template<typename T>
  static inline const std::string& eResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eResult_Name.");
    return Response_eResult_Name(enum_t_value);
  }
  static inline bool eResult_Parse(const std::string& name,
      eResult* value) {
    return Response_eResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .eCAL.pb.sys.Response.eResult result = 1;
  void clear_result();
  ::eCAL::pb::sys::Response_eResult result() const;
  void set_result(::eCAL::pb::sys::Response_eResult value);
  private:
  ::eCAL::pb::sys::Response_eResult _internal_result() const;
  void _internal_set_result(::eCAL::pb::sys::Response_eResult value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.sys.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fapp_2fpb_2fsys_2fservice_2eproto;
};
// ===================================================================

class Service_Stub;

class Service : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Service() {};
 public:
  virtual ~Service();

  typedef Service_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void StartTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::TaskRequest* request,
                       ::eCAL::pb::sys::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StopTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::TaskRequest* request,
                       ::eCAL::pb::sys::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RestartTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::TaskRequest* request,
                       ::eCAL::pb::sys::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::GenericRequest* request,
                       ::eCAL::pb::sys::State* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Service);
};

class Service_Stub : public Service {
 public:
  Service_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Service_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Service_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Service ------------------------------------------

  void StartTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::TaskRequest* request,
                       ::eCAL::pb::sys::Response* response,
                       ::google::protobuf::Closure* done);
  void StopTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::TaskRequest* request,
                       ::eCAL::pb::sys::Response* response,
                       ::google::protobuf::Closure* done);
  void RestartTasks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::TaskRequest* request,
                       ::eCAL::pb::sys::Response* response,
                       ::google::protobuf::Closure* done);
  void GetStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::eCAL::pb::sys::GenericRequest* request,
                       ::eCAL::pb::sys::State* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Service_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskRequest

// bool all = 1;
inline void TaskRequest::clear_all() {
  all_ = false;
}
inline bool TaskRequest::_internal_all() const {
  return all_;
}
inline bool TaskRequest::all() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.TaskRequest.all)
  return _internal_all();
}
inline void TaskRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void TaskRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.TaskRequest.all)
}

// repeated uint32 tids = 2;
inline int TaskRequest::_internal_tids_size() const {
  return tids_.size();
}
inline int TaskRequest::tids_size() const {
  return _internal_tids_size();
}
inline void TaskRequest::clear_tids() {
  tids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRequest::_internal_tids(int index) const {
  return tids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskRequest::tids(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.TaskRequest.tids)
  return _internal_tids(index);
}
inline void TaskRequest::set_tids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tids_.Set(index, value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.TaskRequest.tids)
}
inline void TaskRequest::_internal_add_tids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tids_.Add(value);
}
inline void TaskRequest::add_tids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tids(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.TaskRequest.tids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TaskRequest::_internal_tids() const {
  return tids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TaskRequest::tids() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys.TaskRequest.tids)
  return _internal_tids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TaskRequest::_internal_mutable_tids() {
  return &tids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TaskRequest::mutable_tids() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys.TaskRequest.tids)
  return _internal_mutable_tids();
}

// repeated string tnames = 3;
inline int TaskRequest::_internal_tnames_size() const {
  return tnames_.size();
}
inline int TaskRequest::tnames_size() const {
  return _internal_tnames_size();
}
inline void TaskRequest::clear_tnames() {
  tnames_.Clear();
}
inline std::string* TaskRequest::add_tnames() {
  // @@protoc_insertion_point(field_add_mutable:eCAL.pb.sys.TaskRequest.tnames)
  return _internal_add_tnames();
}
inline const std::string& TaskRequest::_internal_tnames(int index) const {
  return tnames_.Get(index);
}
inline const std::string& TaskRequest::tnames(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.TaskRequest.tnames)
  return _internal_tnames(index);
}
inline std::string* TaskRequest::mutable_tnames(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.TaskRequest.tnames)
  return tnames_.Mutable(index);
}
inline void TaskRequest::set_tnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.TaskRequest.tnames)
  tnames_.Mutable(index)->assign(value);
}
inline void TaskRequest::set_tnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.TaskRequest.tnames)
  tnames_.Mutable(index)->assign(std::move(value));
}
inline void TaskRequest::set_tnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.TaskRequest.tnames)
}
inline void TaskRequest::set_tnames(int index, const char* value, size_t size) {
  tnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.TaskRequest.tnames)
}
inline std::string* TaskRequest::_internal_add_tnames() {
  return tnames_.Add();
}
inline void TaskRequest::add_tnames(const std::string& value) {
  tnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.TaskRequest.tnames)
}
inline void TaskRequest::add_tnames(std::string&& value) {
  tnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eCAL.pb.sys.TaskRequest.tnames)
}
inline void TaskRequest::add_tnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eCAL.pb.sys.TaskRequest.tnames)
}
inline void TaskRequest::add_tnames(const char* value, size_t size) {
  tnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eCAL.pb.sys.TaskRequest.tnames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TaskRequest::tnames() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.sys.TaskRequest.tnames)
  return tnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TaskRequest::mutable_tnames() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.sys.TaskRequest.tnames)
  return &tnames_;
}

// -------------------------------------------------------------------

// GenericRequest

// -------------------------------------------------------------------

// Response

// .eCAL.pb.sys.Response.eResult result = 1;
inline void Response::clear_result() {
  result_ = 0;
}
inline ::eCAL::pb::sys::Response_eResult Response::_internal_result() const {
  return static_cast< ::eCAL::pb::sys::Response_eResult >(result_);
}
inline ::eCAL::pb::sys::Response_eResult Response::result() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.Response.result)
  return _internal_result();
}
inline void Response::_internal_set_result(::eCAL::pb::sys::Response_eResult value) {
  
  result_ = value;
}
inline void Response::set_result(::eCAL::pb::sys::Response_eResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.Response.result)
}

// string error = 2;
inline void Response::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.sys.Response.error)
  return _internal_error();
}
inline void Response::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.sys.Response.error)
}
inline std::string* Response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.sys.Response.error)
  return _internal_mutable_error();
}
inline const std::string& Response::_internal_error() const {
  return error_.GetNoArena();
}
inline void Response::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.sys.Response.error)
}
inline void Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.sys.Response.error)
}
inline void Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.sys.Response.error)
}
inline std::string* Response::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:eCAL.pb.sys.Response.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.sys.Response.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sys
}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::sys::Response_eResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::sys::Response_eResult>() {
  return ::eCAL::pb::sys::Response_eResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fapp_2fpb_2fsys_2fservice_2eproto
