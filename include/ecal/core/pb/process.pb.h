// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/core/pb/process.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fprocess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fprocess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fcore_2fpb_2fprocess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fcore_2fpb_2fprocess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fcore_2fpb_2fprocess_2eproto;
namespace eCAL {
namespace pb {
class Process;
class ProcessDefaultTypeInternal;
extern ProcessDefaultTypeInternal _Process_default_instance_;
class ProcessState;
class ProcessStateDefaultTypeInternal;
extern ProcessStateDefaultTypeInternal _ProcessState_default_instance_;
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::Process* Arena::CreateMaybeMessage<::eCAL::pb::Process>(Arena*);
template<> ::eCAL::pb::ProcessState* Arena::CreateMaybeMessage<::eCAL::pb::ProcessState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {

enum eProcessSeverity : int {
  proc_sev_unknown = 0,
  proc_sev_healthy = 1,
  proc_sev_warning = 2,
  proc_sev_critical = 3,
  proc_sev_failed = 4,
  eProcessSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eProcessSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eProcessSeverity_IsValid(int value);
constexpr eProcessSeverity eProcessSeverity_MIN = proc_sev_unknown;
constexpr eProcessSeverity eProcessSeverity_MAX = proc_sev_failed;
constexpr int eProcessSeverity_ARRAYSIZE = eProcessSeverity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eProcessSeverity_descriptor();
template<typename T>
inline const std::string& eProcessSeverity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eProcessSeverity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eProcessSeverity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eProcessSeverity_descriptor(), enum_t_value);
}
inline bool eProcessSeverity_Parse(
    const std::string& name, eProcessSeverity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eProcessSeverity>(
    eProcessSeverity_descriptor(), name, value);
}
enum eProcessSeverityLevel : int {
  proc_sev_level_unknown = 0,
  proc_sev_level1 = 1,
  proc_sev_level2 = 2,
  proc_sev_level3 = 3,
  proc_sev_level4 = 4,
  proc_sev_level5 = 5,
  eProcessSeverityLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eProcessSeverityLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eProcessSeverityLevel_IsValid(int value);
constexpr eProcessSeverityLevel eProcessSeverityLevel_MIN = proc_sev_level_unknown;
constexpr eProcessSeverityLevel eProcessSeverityLevel_MAX = proc_sev_level5;
constexpr int eProcessSeverityLevel_ARRAYSIZE = eProcessSeverityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eProcessSeverityLevel_descriptor();
template<typename T>
inline const std::string& eProcessSeverityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eProcessSeverityLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eProcessSeverityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eProcessSeverityLevel_descriptor(), enum_t_value);
}
inline bool eProcessSeverityLevel_Parse(
    const std::string& name, eProcessSeverityLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eProcessSeverityLevel>(
    eProcessSeverityLevel_descriptor(), name, value);
}
enum eTSyncState : int {
  tsync_none = 0,
  tsync_realtime = 1,
  tsync_replay = 2,
  eTSyncState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eTSyncState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eTSyncState_IsValid(int value);
constexpr eTSyncState eTSyncState_MIN = tsync_none;
constexpr eTSyncState eTSyncState_MAX = tsync_replay;
constexpr int eTSyncState_ARRAYSIZE = eTSyncState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eTSyncState_descriptor();
template<typename T>
inline const std::string& eTSyncState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eTSyncState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eTSyncState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eTSyncState_descriptor(), enum_t_value);
}
inline bool eTSyncState_Parse(
    const std::string& name, eTSyncState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eTSyncState>(
    eTSyncState_descriptor(), name, value);
}
// ===================================================================

class ProcessState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.ProcessState) */ {
 public:
  ProcessState();
  virtual ~ProcessState();

  ProcessState(const ProcessState& from);
  ProcessState(ProcessState&& from) noexcept
    : ProcessState() {
    *this = ::std::move(from);
  }

  inline ProcessState& operator=(const ProcessState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessState& operator=(ProcessState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessState* internal_default_instance() {
    return reinterpret_cast<const ProcessState*>(
               &_ProcessState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessState& a, ProcessState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessState* New() const final {
    return CreateMaybeMessage<ProcessState>(nullptr);
  }

  ProcessState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessState& from);
  void MergeFrom(const ProcessState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.ProcessState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fprocess_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fprocess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kSeverityFieldNumber = 1,
    kSeverityLevelFieldNumber = 3,
  };
  // string info = 2;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .eCAL.pb.eProcessSeverity severity = 1;
  void clear_severity();
  ::eCAL::pb::eProcessSeverity severity() const;
  void set_severity(::eCAL::pb::eProcessSeverity value);
  private:
  ::eCAL::pb::eProcessSeverity _internal_severity() const;
  void _internal_set_severity(::eCAL::pb::eProcessSeverity value);
  public:

  // .eCAL.pb.eProcessSeverityLevel severity_level = 3;
  void clear_severity_level();
  ::eCAL::pb::eProcessSeverityLevel severity_level() const;
  void set_severity_level(::eCAL::pb::eProcessSeverityLevel value);
  private:
  ::eCAL::pb::eProcessSeverityLevel _internal_severity_level() const;
  void _internal_set_severity_level(::eCAL::pb::eProcessSeverityLevel value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.ProcessState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  int severity_;
  int severity_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fprocess_2eproto;
};
// -------------------------------------------------------------------

class Process :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Process) */ {
 public:
  Process();
  virtual ~Process();

  Process(const Process& from);
  Process(Process&& from) noexcept
    : Process() {
    *this = ::std::move(from);
  }

  inline Process& operator=(const Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline Process& operator=(Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process* internal_default_instance() {
    return reinterpret_cast<const Process*>(
               &_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Process& a, Process& b) {
    a.Swap(&b);
  }
  inline void Swap(Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Process* New() const final {
    return CreateMaybeMessage<Process>(nullptr);
  }

  Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Process>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Process& from);
  void MergeFrom(const Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fprocess_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fprocess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHnameFieldNumber = 2,
    kPnameFieldNumber = 4,
    kUnameFieldNumber = 5,
    kPparamFieldNumber = 6,
    kTsyncModNameFieldNumber = 14,
    kComponentInitInfoFieldNumber = 16,
    kEcalRuntimeVersionFieldNumber = 17,
    kHgnameFieldNumber = 18,
    kStateFieldNumber = 12,
    kRclockFieldNumber = 1,
    kPidFieldNumber = 3,
    kPmemoryFieldNumber = 7,
    kPcpuFieldNumber = 8,
    kUsrptimeFieldNumber = 9,
    kDatawriteFieldNumber = 10,
    kDatareadFieldNumber = 11,
    kTsyncStateFieldNumber = 13,
    kComponentInitStateFieldNumber = 15,
  };
  // string hname = 2;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // string pname = 4;
  void clear_pname();
  const std::string& pname() const;
  void set_pname(const std::string& value);
  void set_pname(std::string&& value);
  void set_pname(const char* value);
  void set_pname(const char* value, size_t size);
  std::string* mutable_pname();
  std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // string uname = 5;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string pparam = 6;
  void clear_pparam();
  const std::string& pparam() const;
  void set_pparam(const std::string& value);
  void set_pparam(std::string&& value);
  void set_pparam(const char* value);
  void set_pparam(const char* value, size_t size);
  std::string* mutable_pparam();
  std::string* release_pparam();
  void set_allocated_pparam(std::string* pparam);
  private:
  const std::string& _internal_pparam() const;
  void _internal_set_pparam(const std::string& value);
  std::string* _internal_mutable_pparam();
  public:

  // string tsync_mod_name = 14;
  void clear_tsync_mod_name();
  const std::string& tsync_mod_name() const;
  void set_tsync_mod_name(const std::string& value);
  void set_tsync_mod_name(std::string&& value);
  void set_tsync_mod_name(const char* value);
  void set_tsync_mod_name(const char* value, size_t size);
  std::string* mutable_tsync_mod_name();
  std::string* release_tsync_mod_name();
  void set_allocated_tsync_mod_name(std::string* tsync_mod_name);
  private:
  const std::string& _internal_tsync_mod_name() const;
  void _internal_set_tsync_mod_name(const std::string& value);
  std::string* _internal_mutable_tsync_mod_name();
  public:

  // string component_init_info = 16;
  void clear_component_init_info();
  const std::string& component_init_info() const;
  void set_component_init_info(const std::string& value);
  void set_component_init_info(std::string&& value);
  void set_component_init_info(const char* value);
  void set_component_init_info(const char* value, size_t size);
  std::string* mutable_component_init_info();
  std::string* release_component_init_info();
  void set_allocated_component_init_info(std::string* component_init_info);
  private:
  const std::string& _internal_component_init_info() const;
  void _internal_set_component_init_info(const std::string& value);
  std::string* _internal_mutable_component_init_info();
  public:

  // string ecal_runtime_version = 17;
  void clear_ecal_runtime_version();
  const std::string& ecal_runtime_version() const;
  void set_ecal_runtime_version(const std::string& value);
  void set_ecal_runtime_version(std::string&& value);
  void set_ecal_runtime_version(const char* value);
  void set_ecal_runtime_version(const char* value, size_t size);
  std::string* mutable_ecal_runtime_version();
  std::string* release_ecal_runtime_version();
  void set_allocated_ecal_runtime_version(std::string* ecal_runtime_version);
  private:
  const std::string& _internal_ecal_runtime_version() const;
  void _internal_set_ecal_runtime_version(const std::string& value);
  std::string* _internal_mutable_ecal_runtime_version();
  public:

  // string hgname = 18;
  void clear_hgname();
  const std::string& hgname() const;
  void set_hgname(const std::string& value);
  void set_hgname(std::string&& value);
  void set_hgname(const char* value);
  void set_hgname(const char* value, size_t size);
  std::string* mutable_hgname();
  std::string* release_hgname();
  void set_allocated_hgname(std::string* hgname);
  private:
  const std::string& _internal_hgname() const;
  void _internal_set_hgname(const std::string& value);
  std::string* _internal_mutable_hgname();
  public:

  // .eCAL.pb.ProcessState state = 12;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::eCAL::pb::ProcessState& state() const;
  ::eCAL::pb::ProcessState* release_state();
  ::eCAL::pb::ProcessState* mutable_state();
  void set_allocated_state(::eCAL::pb::ProcessState* state);
  private:
  const ::eCAL::pb::ProcessState& _internal_state() const;
  ::eCAL::pb::ProcessState* _internal_mutable_state();
  public:

  // int32 rclock = 1;
  void clear_rclock();
  ::PROTOBUF_NAMESPACE_ID::int32 rclock() const;
  void set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rclock() const;
  void _internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 pmemory = 7;
  void clear_pmemory();
  ::PROTOBUF_NAMESPACE_ID::int64 pmemory() const;
  void set_pmemory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pmemory() const;
  void _internal_set_pmemory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float pcpu = 8;
  void clear_pcpu();
  float pcpu() const;
  void set_pcpu(float value);
  private:
  float _internal_pcpu() const;
  void _internal_set_pcpu(float value);
  public:

  // float usrptime = 9;
  void clear_usrptime();
  float usrptime() const;
  void set_usrptime(float value);
  private:
  float _internal_usrptime() const;
  void _internal_set_usrptime(float value);
  public:

  // int64 datawrite = 10;
  void clear_datawrite();
  ::PROTOBUF_NAMESPACE_ID::int64 datawrite() const;
  void set_datawrite(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_datawrite() const;
  void _internal_set_datawrite(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 dataread = 11;
  void clear_dataread();
  ::PROTOBUF_NAMESPACE_ID::int64 dataread() const;
  void set_dataread(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dataread() const;
  void _internal_set_dataread(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eCAL.pb.eTSyncState tsync_state = 13;
  void clear_tsync_state();
  ::eCAL::pb::eTSyncState tsync_state() const;
  void set_tsync_state(::eCAL::pb::eTSyncState value);
  private:
  ::eCAL::pb::eTSyncState _internal_tsync_state() const;
  void _internal_set_tsync_state(::eCAL::pb::eTSyncState value);
  public:

  // int32 component_init_state = 15;
  void clear_component_init_state();
  ::PROTOBUF_NAMESPACE_ID::int32 component_init_state() const;
  void set_component_init_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_component_init_state() const;
  void _internal_set_component_init_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pparam_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tsync_mod_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_init_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecal_runtime_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hgname_;
  ::eCAL::pb::ProcessState* state_;
  ::PROTOBUF_NAMESPACE_ID::int32 rclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int64 pmemory_;
  float pcpu_;
  float usrptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 datawrite_;
  ::PROTOBUF_NAMESPACE_ID::int64 dataread_;
  int tsync_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 component_init_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fprocess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessState

// .eCAL.pb.eProcessSeverity severity = 1;
inline void ProcessState::clear_severity() {
  severity_ = 0;
}
inline ::eCAL::pb::eProcessSeverity ProcessState::_internal_severity() const {
  return static_cast< ::eCAL::pb::eProcessSeverity >(severity_);
}
inline ::eCAL::pb::eProcessSeverity ProcessState::severity() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ProcessState.severity)
  return _internal_severity();
}
inline void ProcessState::_internal_set_severity(::eCAL::pb::eProcessSeverity value) {
  
  severity_ = value;
}
inline void ProcessState::set_severity(::eCAL::pb::eProcessSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ProcessState.severity)
}

// .eCAL.pb.eProcessSeverityLevel severity_level = 3;
inline void ProcessState::clear_severity_level() {
  severity_level_ = 0;
}
inline ::eCAL::pb::eProcessSeverityLevel ProcessState::_internal_severity_level() const {
  return static_cast< ::eCAL::pb::eProcessSeverityLevel >(severity_level_);
}
inline ::eCAL::pb::eProcessSeverityLevel ProcessState::severity_level() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ProcessState.severity_level)
  return _internal_severity_level();
}
inline void ProcessState::_internal_set_severity_level(::eCAL::pb::eProcessSeverityLevel value) {
  
  severity_level_ = value;
}
inline void ProcessState::set_severity_level(::eCAL::pb::eProcessSeverityLevel value) {
  _internal_set_severity_level(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ProcessState.severity_level)
}

// string info = 2;
inline void ProcessState::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessState::info() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ProcessState.info)
  return _internal_info();
}
inline void ProcessState::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ProcessState.info)
}
inline std::string* ProcessState::mutable_info() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.ProcessState.info)
  return _internal_mutable_info();
}
inline const std::string& ProcessState::_internal_info() const {
  return info_.GetNoArena();
}
inline void ProcessState::_internal_set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessState::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.ProcessState.info)
}
inline void ProcessState::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.ProcessState.info)
}
inline void ProcessState::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.ProcessState.info)
}
inline std::string* ProcessState::_internal_mutable_info() {
  
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessState::release_info() {
  // @@protoc_insertion_point(field_release:eCAL.pb.ProcessState.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessState::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.ProcessState.info)
}

// -------------------------------------------------------------------

// Process

// int32 rclock = 1;
inline void Process::clear_rclock() {
  rclock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_rclock() const {
  return rclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::rclock() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.rclock)
  return _internal_rclock();
}
inline void Process::_internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rclock_ = value;
}
inline void Process::set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rclock(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.rclock)
}

// string hname = 2;
inline void Process::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.hname)
  return _internal_hname();
}
inline void Process::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.hname)
}
inline std::string* Process::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.hname)
  return _internal_mutable_hname();
}
inline const std::string& Process::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void Process::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.hname)
}
inline void Process::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.hname)
}
inline void Process::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.hname)
}
inline std::string* Process::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.hname)
}

// string hgname = 18;
inline void Process::clear_hgname() {
  hgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::hgname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.hgname)
  return _internal_hgname();
}
inline void Process::set_hgname(const std::string& value) {
  _internal_set_hgname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.hgname)
}
inline std::string* Process::mutable_hgname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.hgname)
  return _internal_mutable_hgname();
}
inline const std::string& Process::_internal_hgname() const {
  return hgname_.GetNoArena();
}
inline void Process::_internal_set_hgname(const std::string& value) {
  
  hgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_hgname(std::string&& value) {
  
  hgname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.hgname)
}
inline void Process::set_hgname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.hgname)
}
inline void Process::set_hgname(const char* value, size_t size) {
  
  hgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.hgname)
}
inline std::string* Process::_internal_mutable_hgname() {
  
  return hgname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_hgname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.hgname)
  
  return hgname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_hgname(std::string* hgname) {
  if (hgname != nullptr) {
    
  } else {
    
  }
  hgname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hgname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.hgname)
}

// int32 pid = 3;
inline void Process::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.pid)
  return _internal_pid();
}
inline void Process::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Process::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.pid)
}

// string pname = 4;
inline void Process::clear_pname() {
  pname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::pname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.pname)
  return _internal_pname();
}
inline void Process::set_pname(const std::string& value) {
  _internal_set_pname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.pname)
}
inline std::string* Process::mutable_pname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.pname)
  return _internal_mutable_pname();
}
inline const std::string& Process::_internal_pname() const {
  return pname_.GetNoArena();
}
inline void Process::_internal_set_pname(const std::string& value) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_pname(std::string&& value) {
  
  pname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.pname)
}
inline void Process::set_pname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.pname)
}
inline void Process::set_pname(const char* value, size_t size) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.pname)
}
inline std::string* Process::_internal_mutable_pname() {
  
  return pname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_pname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.pname)
  
  return pname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.pname)
}

// string uname = 5;
inline void Process::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::uname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.uname)
  return _internal_uname();
}
inline void Process::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.uname)
}
inline std::string* Process::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.uname)
  return _internal_mutable_uname();
}
inline const std::string& Process::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void Process::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.uname)
}
inline void Process::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.uname)
}
inline void Process::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.uname)
}
inline std::string* Process::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_uname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.uname)
}

// string pparam = 6;
inline void Process::clear_pparam() {
  pparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::pparam() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.pparam)
  return _internal_pparam();
}
inline void Process::set_pparam(const std::string& value) {
  _internal_set_pparam(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.pparam)
}
inline std::string* Process::mutable_pparam() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.pparam)
  return _internal_mutable_pparam();
}
inline const std::string& Process::_internal_pparam() const {
  return pparam_.GetNoArena();
}
inline void Process::_internal_set_pparam(const std::string& value) {
  
  pparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_pparam(std::string&& value) {
  
  pparam_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.pparam)
}
inline void Process::set_pparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.pparam)
}
inline void Process::set_pparam(const char* value, size_t size) {
  
  pparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.pparam)
}
inline std::string* Process::_internal_mutable_pparam() {
  
  return pparam_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_pparam() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.pparam)
  
  return pparam_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_pparam(std::string* pparam) {
  if (pparam != nullptr) {
    
  } else {
    
  }
  pparam_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pparam);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.pparam)
}

// int64 pmemory = 7;
inline void Process::clear_pmemory() {
  pmemory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Process::_internal_pmemory() const {
  return pmemory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Process::pmemory() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.pmemory)
  return _internal_pmemory();
}
inline void Process::_internal_set_pmemory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pmemory_ = value;
}
inline void Process::set_pmemory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pmemory(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.pmemory)
}

// float pcpu = 8;
inline void Process::clear_pcpu() {
  pcpu_ = 0;
}
inline float Process::_internal_pcpu() const {
  return pcpu_;
}
inline float Process::pcpu() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.pcpu)
  return _internal_pcpu();
}
inline void Process::_internal_set_pcpu(float value) {
  
  pcpu_ = value;
}
inline void Process::set_pcpu(float value) {
  _internal_set_pcpu(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.pcpu)
}

// float usrptime = 9;
inline void Process::clear_usrptime() {
  usrptime_ = 0;
}
inline float Process::_internal_usrptime() const {
  return usrptime_;
}
inline float Process::usrptime() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.usrptime)
  return _internal_usrptime();
}
inline void Process::_internal_set_usrptime(float value) {
  
  usrptime_ = value;
}
inline void Process::set_usrptime(float value) {
  _internal_set_usrptime(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.usrptime)
}

// int64 datawrite = 10;
inline void Process::clear_datawrite() {
  datawrite_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Process::_internal_datawrite() const {
  return datawrite_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Process::datawrite() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.datawrite)
  return _internal_datawrite();
}
inline void Process::_internal_set_datawrite(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datawrite_ = value;
}
inline void Process::set_datawrite(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_datawrite(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.datawrite)
}

// int64 dataread = 11;
inline void Process::clear_dataread() {
  dataread_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Process::_internal_dataread() const {
  return dataread_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Process::dataread() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.dataread)
  return _internal_dataread();
}
inline void Process::_internal_set_dataread(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dataread_ = value;
}
inline void Process::set_dataread(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dataread(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.dataread)
}

// .eCAL.pb.ProcessState state = 12;
inline bool Process::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Process::has_state() const {
  return _internal_has_state();
}
inline void Process::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::eCAL::pb::ProcessState& Process::_internal_state() const {
  const ::eCAL::pb::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::ProcessState*>(
      &::eCAL::pb::_ProcessState_default_instance_);
}
inline const ::eCAL::pb::ProcessState& Process::state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.state)
  return _internal_state();
}
inline ::eCAL::pb::ProcessState* Process::release_state() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.state)
  
  ::eCAL::pb::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::eCAL::pb::ProcessState* Process::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::ProcessState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::eCAL::pb::ProcessState* Process::mutable_state() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.state)
  return _internal_mutable_state();
}
inline void Process::set_allocated_state(::eCAL::pb::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.state)
}

// .eCAL.pb.eTSyncState tsync_state = 13;
inline void Process::clear_tsync_state() {
  tsync_state_ = 0;
}
inline ::eCAL::pb::eTSyncState Process::_internal_tsync_state() const {
  return static_cast< ::eCAL::pb::eTSyncState >(tsync_state_);
}
inline ::eCAL::pb::eTSyncState Process::tsync_state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.tsync_state)
  return _internal_tsync_state();
}
inline void Process::_internal_set_tsync_state(::eCAL::pb::eTSyncState value) {
  
  tsync_state_ = value;
}
inline void Process::set_tsync_state(::eCAL::pb::eTSyncState value) {
  _internal_set_tsync_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.tsync_state)
}

// string tsync_mod_name = 14;
inline void Process::clear_tsync_mod_name() {
  tsync_mod_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::tsync_mod_name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.tsync_mod_name)
  return _internal_tsync_mod_name();
}
inline void Process::set_tsync_mod_name(const std::string& value) {
  _internal_set_tsync_mod_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.tsync_mod_name)
}
inline std::string* Process::mutable_tsync_mod_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.tsync_mod_name)
  return _internal_mutable_tsync_mod_name();
}
inline const std::string& Process::_internal_tsync_mod_name() const {
  return tsync_mod_name_.GetNoArena();
}
inline void Process::_internal_set_tsync_mod_name(const std::string& value) {
  
  tsync_mod_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_tsync_mod_name(std::string&& value) {
  
  tsync_mod_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.tsync_mod_name)
}
inline void Process::set_tsync_mod_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tsync_mod_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.tsync_mod_name)
}
inline void Process::set_tsync_mod_name(const char* value, size_t size) {
  
  tsync_mod_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.tsync_mod_name)
}
inline std::string* Process::_internal_mutable_tsync_mod_name() {
  
  return tsync_mod_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_tsync_mod_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.tsync_mod_name)
  
  return tsync_mod_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_tsync_mod_name(std::string* tsync_mod_name) {
  if (tsync_mod_name != nullptr) {
    
  } else {
    
  }
  tsync_mod_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tsync_mod_name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.tsync_mod_name)
}

// int32 component_init_state = 15;
inline void Process::clear_component_init_state() {
  component_init_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_component_init_state() const {
  return component_init_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::component_init_state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.component_init_state)
  return _internal_component_init_state();
}
inline void Process::_internal_set_component_init_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  component_init_state_ = value;
}
inline void Process::set_component_init_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_component_init_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.component_init_state)
}

// string component_init_info = 16;
inline void Process::clear_component_init_info() {
  component_init_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::component_init_info() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.component_init_info)
  return _internal_component_init_info();
}
inline void Process::set_component_init_info(const std::string& value) {
  _internal_set_component_init_info(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.component_init_info)
}
inline std::string* Process::mutable_component_init_info() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.component_init_info)
  return _internal_mutable_component_init_info();
}
inline const std::string& Process::_internal_component_init_info() const {
  return component_init_info_.GetNoArena();
}
inline void Process::_internal_set_component_init_info(const std::string& value) {
  
  component_init_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_component_init_info(std::string&& value) {
  
  component_init_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.component_init_info)
}
inline void Process::set_component_init_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_init_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.component_init_info)
}
inline void Process::set_component_init_info(const char* value, size_t size) {
  
  component_init_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.component_init_info)
}
inline std::string* Process::_internal_mutable_component_init_info() {
  
  return component_init_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_component_init_info() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.component_init_info)
  
  return component_init_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_component_init_info(std::string* component_init_info) {
  if (component_init_info != nullptr) {
    
  } else {
    
  }
  component_init_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_init_info);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.component_init_info)
}

// string ecal_runtime_version = 17;
inline void Process::clear_ecal_runtime_version() {
  ecal_runtime_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Process::ecal_runtime_version() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Process.ecal_runtime_version)
  return _internal_ecal_runtime_version();
}
inline void Process::set_ecal_runtime_version(const std::string& value) {
  _internal_set_ecal_runtime_version(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Process.ecal_runtime_version)
}
inline std::string* Process::mutable_ecal_runtime_version() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Process.ecal_runtime_version)
  return _internal_mutable_ecal_runtime_version();
}
inline const std::string& Process::_internal_ecal_runtime_version() const {
  return ecal_runtime_version_.GetNoArena();
}
inline void Process::_internal_set_ecal_runtime_version(const std::string& value) {
  
  ecal_runtime_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Process::set_ecal_runtime_version(std::string&& value) {
  
  ecal_runtime_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Process.ecal_runtime_version)
}
inline void Process::set_ecal_runtime_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ecal_runtime_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Process.ecal_runtime_version)
}
inline void Process::set_ecal_runtime_version(const char* value, size_t size) {
  
  ecal_runtime_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Process.ecal_runtime_version)
}
inline std::string* Process::_internal_mutable_ecal_runtime_version() {
  
  return ecal_runtime_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Process::release_ecal_runtime_version() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Process.ecal_runtime_version)
  
  return ecal_runtime_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_ecal_runtime_version(std::string* ecal_runtime_version) {
  if (ecal_runtime_version != nullptr) {
    
  } else {
    
  }
  ecal_runtime_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecal_runtime_version);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Process.ecal_runtime_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::eProcessSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::eProcessSeverity>() {
  return ::eCAL::pb::eProcessSeverity_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::eProcessSeverityLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::eProcessSeverityLevel>() {
  return ::eCAL::pb::eProcessSeverityLevel_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::eTSyncState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::eTSyncState>() {
  return ::eCAL::pb::eTSyncState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fprocess_2eproto
