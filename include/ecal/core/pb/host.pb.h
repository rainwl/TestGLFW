// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/core/pb/host.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fhost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fhost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fcore_2fpb_2fhost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fcore_2fpb_2fhost_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fcore_2fpb_2fhost_2eproto;
namespace eCAL {
namespace pb {
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class OSInfo;
class OSInfoDefaultTypeInternal;
extern OSInfoDefaultTypeInternal _OSInfo_default_instance_;
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::Host* Arena::CreateMaybeMessage<::eCAL::pb::Host>(Arena*);
template<> ::eCAL::pb::OSInfo* Arena::CreateMaybeMessage<::eCAL::pb::OSInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {

// ===================================================================

class OSInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.OSInfo) */ {
 public:
  OSInfo();
  virtual ~OSInfo();

  OSInfo(const OSInfo& from);
  OSInfo(OSInfo&& from) noexcept
    : OSInfo() {
    *this = ::std::move(from);
  }

  inline OSInfo& operator=(const OSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OSInfo& operator=(OSInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OSInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OSInfo* internal_default_instance() {
    return reinterpret_cast<const OSInfo*>(
               &_OSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OSInfo& a, OSInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OSInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OSInfo* New() const final {
    return CreateMaybeMessage<OSInfo>(nullptr);
  }

  OSInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OSInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OSInfo& from);
  void MergeFrom(const OSInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OSInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.OSInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fhost_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fhost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsnameFieldNumber = 1,
  };
  // string osname = 1;
  void clear_osname();
  const std::string& osname() const;
  void set_osname(const std::string& value);
  void set_osname(std::string&& value);
  void set_osname(const char* value);
  void set_osname(const char* value, size_t size);
  std::string* mutable_osname();
  std::string* release_osname();
  void set_allocated_osname(std::string* osname);
  private:
  const std::string& _internal_osname() const;
  void _internal_set_osname(const std::string& value);
  std::string* _internal_mutable_osname();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.OSInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fhost_2eproto;
};
// -------------------------------------------------------------------

class Host :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Host) */ {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);
  Host(Host&& from) noexcept
    : Host() {
    *this = ::std::move(from);
  }

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline Host& operator=(Host&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Host& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Host& a, Host& b) {
    a.Swap(&b);
  }
  inline void Swap(Host* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Host* New() const final {
    return CreateMaybeMessage<Host>(nullptr);
  }

  Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Host>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Host* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Host";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fhost_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fhost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHnameFieldNumber = 1,
    kOsFieldNumber = 2,
  };
  // string hname = 1;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // .eCAL.pb.OSInfo os = 2;
  bool has_os() const;
  private:
  bool _internal_has_os() const;
  public:
  void clear_os();
  const ::eCAL::pb::OSInfo& os() const;
  ::eCAL::pb::OSInfo* release_os();
  ::eCAL::pb::OSInfo* mutable_os();
  void set_allocated_os(::eCAL::pb::OSInfo* os);
  private:
  const ::eCAL::pb::OSInfo& _internal_os() const;
  ::eCAL::pb::OSInfo* _internal_mutable_os();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Host)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::eCAL::pb::OSInfo* os_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fhost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OSInfo

// string osname = 1;
inline void OSInfo::clear_osname() {
  osname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OSInfo::osname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.OSInfo.osname)
  return _internal_osname();
}
inline void OSInfo::set_osname(const std::string& value) {
  _internal_set_osname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.OSInfo.osname)
}
inline std::string* OSInfo::mutable_osname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.OSInfo.osname)
  return _internal_mutable_osname();
}
inline const std::string& OSInfo::_internal_osname() const {
  return osname_.GetNoArena();
}
inline void OSInfo::_internal_set_osname(const std::string& value) {
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OSInfo::set_osname(std::string&& value) {
  
  osname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.OSInfo.osname)
}
inline void OSInfo::set_osname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.OSInfo.osname)
}
inline void OSInfo::set_osname(const char* value, size_t size) {
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.OSInfo.osname)
}
inline std::string* OSInfo::_internal_mutable_osname() {
  
  return osname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OSInfo::release_osname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.OSInfo.osname)
  
  return osname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OSInfo::set_allocated_osname(std::string* osname) {
  if (osname != nullptr) {
    
  } else {
    
  }
  osname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.OSInfo.osname)
}

// -------------------------------------------------------------------

// Host

// string hname = 1;
inline void Host::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Host::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Host.hname)
  return _internal_hname();
}
inline void Host::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Host.hname)
}
inline std::string* Host::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Host.hname)
  return _internal_mutable_hname();
}
inline const std::string& Host::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void Host::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Host::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Host.hname)
}
inline void Host::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Host.hname)
}
inline void Host::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Host.hname)
}
inline std::string* Host::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Host::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Host.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Host.hname)
}

// .eCAL.pb.OSInfo os = 2;
inline bool Host::_internal_has_os() const {
  return this != internal_default_instance() && os_ != nullptr;
}
inline bool Host::has_os() const {
  return _internal_has_os();
}
inline void Host::clear_os() {
  if (GetArenaNoVirtual() == nullptr && os_ != nullptr) {
    delete os_;
  }
  os_ = nullptr;
}
inline const ::eCAL::pb::OSInfo& Host::_internal_os() const {
  const ::eCAL::pb::OSInfo* p = os_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::OSInfo*>(
      &::eCAL::pb::_OSInfo_default_instance_);
}
inline const ::eCAL::pb::OSInfo& Host::os() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Host.os)
  return _internal_os();
}
inline ::eCAL::pb::OSInfo* Host::release_os() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Host.os)
  
  ::eCAL::pb::OSInfo* temp = os_;
  os_ = nullptr;
  return temp;
}
inline ::eCAL::pb::OSInfo* Host::_internal_mutable_os() {
  
  if (os_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::OSInfo>(GetArenaNoVirtual());
    os_ = p;
  }
  return os_;
}
inline ::eCAL::pb::OSInfo* Host::mutable_os() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Host.os)
  return _internal_mutable_os();
}
inline void Host::set_allocated_os(::eCAL::pb::OSInfo* os) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete os_;
  }
  if (os) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      os = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os, submessage_arena);
    }
    
  } else {
    
  }
  os_ = os;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Host.os)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace eCAL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fhost_2eproto
