// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/core/pb/topic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2ftopic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2ftopic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecal/core/pb/layer.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fcore_2fpb_2ftopic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fcore_2fpb_2ftopic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto;
namespace eCAL {
namespace pb {
class DataTypeInformation;
class DataTypeInformationDefaultTypeInternal;
extern DataTypeInformationDefaultTypeInternal _DataTypeInformation_default_instance_;
class QOS;
class QOSDefaultTypeInternal;
extern QOSDefaultTypeInternal _QOS_default_instance_;
class Topic;
class TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
class Topic_AttrEntry_DoNotUse;
class Topic_AttrEntry_DoNotUseDefaultTypeInternal;
extern Topic_AttrEntry_DoNotUseDefaultTypeInternal _Topic_AttrEntry_DoNotUse_default_instance_;
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::DataTypeInformation* Arena::CreateMaybeMessage<::eCAL::pb::DataTypeInformation>(Arena*);
template<> ::eCAL::pb::QOS* Arena::CreateMaybeMessage<::eCAL::pb::QOS>(Arena*);
template<> ::eCAL::pb::Topic* Arena::CreateMaybeMessage<::eCAL::pb::Topic>(Arena*);
template<> ::eCAL::pb::Topic_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::eCAL::pb::Topic_AttrEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {

enum QOS_eQOSPolicy_Reliability : int {
  QOS_eQOSPolicy_Reliability_best_effort_reliability_qos = 0,
  QOS_eQOSPolicy_Reliability_reliable_reliability_qos = 1,
  QOS_eQOSPolicy_Reliability_QOS_eQOSPolicy_Reliability_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QOS_eQOSPolicy_Reliability_QOS_eQOSPolicy_Reliability_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QOS_eQOSPolicy_Reliability_IsValid(int value);
constexpr QOS_eQOSPolicy_Reliability QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_MIN = QOS_eQOSPolicy_Reliability_best_effort_reliability_qos;
constexpr QOS_eQOSPolicy_Reliability QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_MAX = QOS_eQOSPolicy_Reliability_reliable_reliability_qos;
constexpr int QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_ARRAYSIZE = QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QOS_eQOSPolicy_Reliability_descriptor();
template<typename T>
inline const std::string& QOS_eQOSPolicy_Reliability_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QOS_eQOSPolicy_Reliability>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QOS_eQOSPolicy_Reliability_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QOS_eQOSPolicy_Reliability_descriptor(), enum_t_value);
}
inline bool QOS_eQOSPolicy_Reliability_Parse(
    const std::string& name, QOS_eQOSPolicy_Reliability* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QOS_eQOSPolicy_Reliability>(
    QOS_eQOSPolicy_Reliability_descriptor(), name, value);
}
enum QOS_eQOSPolicy_HistoryKind : int {
  QOS_eQOSPolicy_HistoryKind_keep_last_history_qos = 0,
  QOS_eQOSPolicy_HistoryKind_keep_all_history_qos = 1,
  QOS_eQOSPolicy_HistoryKind_QOS_eQOSPolicy_HistoryKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QOS_eQOSPolicy_HistoryKind_QOS_eQOSPolicy_HistoryKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QOS_eQOSPolicy_HistoryKind_IsValid(int value);
constexpr QOS_eQOSPolicy_HistoryKind QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_MIN = QOS_eQOSPolicy_HistoryKind_keep_last_history_qos;
constexpr QOS_eQOSPolicy_HistoryKind QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_MAX = QOS_eQOSPolicy_HistoryKind_keep_all_history_qos;
constexpr int QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_ARRAYSIZE = QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QOS_eQOSPolicy_HistoryKind_descriptor();
template<typename T>
inline const std::string& QOS_eQOSPolicy_HistoryKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QOS_eQOSPolicy_HistoryKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QOS_eQOSPolicy_HistoryKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QOS_eQOSPolicy_HistoryKind_descriptor(), enum_t_value);
}
inline bool QOS_eQOSPolicy_HistoryKind_Parse(
    const std::string& name, QOS_eQOSPolicy_HistoryKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QOS_eQOSPolicy_HistoryKind>(
    QOS_eQOSPolicy_HistoryKind_descriptor(), name, value);
}
// ===================================================================

class QOS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.QOS) */ {
 public:
  QOS();
  virtual ~QOS();

  QOS(const QOS& from);
  QOS(QOS&& from) noexcept
    : QOS() {
    *this = ::std::move(from);
  }

  inline QOS& operator=(const QOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline QOS& operator=(QOS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QOS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QOS* internal_default_instance() {
    return reinterpret_cast<const QOS*>(
               &_QOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QOS& a, QOS& b) {
    a.Swap(&b);
  }
  inline void Swap(QOS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QOS* New() const final {
    return CreateMaybeMessage<QOS>(nullptr);
  }

  QOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QOS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QOS& from);
  void MergeFrom(const QOS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QOS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.QOS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QOS_eQOSPolicy_Reliability eQOSPolicy_Reliability;
  static constexpr eQOSPolicy_Reliability best_effort_reliability_qos =
    QOS_eQOSPolicy_Reliability_best_effort_reliability_qos;
  static constexpr eQOSPolicy_Reliability reliable_reliability_qos =
    QOS_eQOSPolicy_Reliability_reliable_reliability_qos;
  static inline bool eQOSPolicy_Reliability_IsValid(int value) {
    return QOS_eQOSPolicy_Reliability_IsValid(value);
  }
  static constexpr eQOSPolicy_Reliability eQOSPolicy_Reliability_MIN =
    QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_MIN;
  static constexpr eQOSPolicy_Reliability eQOSPolicy_Reliability_MAX =
    QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_MAX;
  static constexpr int eQOSPolicy_Reliability_ARRAYSIZE =
    QOS_eQOSPolicy_Reliability_eQOSPolicy_Reliability_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eQOSPolicy_Reliability_descriptor() {
    return QOS_eQOSPolicy_Reliability_descriptor();
  }
  template<typename T>
  static inline const std::string& eQOSPolicy_Reliability_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eQOSPolicy_Reliability>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eQOSPolicy_Reliability_Name.");
    return QOS_eQOSPolicy_Reliability_Name(enum_t_value);
  }
  static inline bool eQOSPolicy_Reliability_Parse(const std::string& name,
      eQOSPolicy_Reliability* value) {
    return QOS_eQOSPolicy_Reliability_Parse(name, value);
  }

  typedef QOS_eQOSPolicy_HistoryKind eQOSPolicy_HistoryKind;
  static constexpr eQOSPolicy_HistoryKind keep_last_history_qos =
    QOS_eQOSPolicy_HistoryKind_keep_last_history_qos;
  static constexpr eQOSPolicy_HistoryKind keep_all_history_qos =
    QOS_eQOSPolicy_HistoryKind_keep_all_history_qos;
  static inline bool eQOSPolicy_HistoryKind_IsValid(int value) {
    return QOS_eQOSPolicy_HistoryKind_IsValid(value);
  }
  static constexpr eQOSPolicy_HistoryKind eQOSPolicy_HistoryKind_MIN =
    QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_MIN;
  static constexpr eQOSPolicy_HistoryKind eQOSPolicy_HistoryKind_MAX =
    QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_MAX;
  static constexpr int eQOSPolicy_HistoryKind_ARRAYSIZE =
    QOS_eQOSPolicy_HistoryKind_eQOSPolicy_HistoryKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eQOSPolicy_HistoryKind_descriptor() {
    return QOS_eQOSPolicy_HistoryKind_descriptor();
  }
  template<typename T>
  static inline const std::string& eQOSPolicy_HistoryKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eQOSPolicy_HistoryKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eQOSPolicy_HistoryKind_Name.");
    return QOS_eQOSPolicy_HistoryKind_Name(enum_t_value);
  }
  static inline bool eQOSPolicy_HistoryKind_Parse(const std::string& name,
      eQOSPolicy_HistoryKind* value) {
    return QOS_eQOSPolicy_HistoryKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReliabilityFieldNumber = 1,
    kHistoryFieldNumber = 2,
    kHistoryDepthFieldNumber = 3,
  };
  // .eCAL.pb.QOS.eQOSPolicy_Reliability reliability = 1;
  void clear_reliability();
  ::eCAL::pb::QOS_eQOSPolicy_Reliability reliability() const;
  void set_reliability(::eCAL::pb::QOS_eQOSPolicy_Reliability value);
  private:
  ::eCAL::pb::QOS_eQOSPolicy_Reliability _internal_reliability() const;
  void _internal_set_reliability(::eCAL::pb::QOS_eQOSPolicy_Reliability value);
  public:

  // .eCAL.pb.QOS.eQOSPolicy_HistoryKind history = 2;
  void clear_history();
  ::eCAL::pb::QOS_eQOSPolicy_HistoryKind history() const;
  void set_history(::eCAL::pb::QOS_eQOSPolicy_HistoryKind value);
  private:
  ::eCAL::pb::QOS_eQOSPolicy_HistoryKind _internal_history() const;
  void _internal_set_history(::eCAL::pb::QOS_eQOSPolicy_HistoryKind value);
  public:

  // int32 history_depth = 3;
  void clear_history_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 history_depth() const;
  void set_history_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_history_depth() const;
  void _internal_set_history_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.QOS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int reliability_;
  int history_;
  ::PROTOBUF_NAMESPACE_ID::int32 history_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2ftopic_2eproto;
};
// -------------------------------------------------------------------

class DataTypeInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.DataTypeInformation) */ {
 public:
  DataTypeInformation();
  virtual ~DataTypeInformation();

  DataTypeInformation(const DataTypeInformation& from);
  DataTypeInformation(DataTypeInformation&& from) noexcept
    : DataTypeInformation() {
    *this = ::std::move(from);
  }

  inline DataTypeInformation& operator=(const DataTypeInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTypeInformation& operator=(DataTypeInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataTypeInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTypeInformation* internal_default_instance() {
    return reinterpret_cast<const DataTypeInformation*>(
               &_DataTypeInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataTypeInformation& a, DataTypeInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(DataTypeInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataTypeInformation* New() const final {
    return CreateMaybeMessage<DataTypeInformation>(nullptr);
  }

  DataTypeInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataTypeInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataTypeInformation& from);
  void MergeFrom(const DataTypeInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataTypeInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.DataTypeInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEncodingFieldNumber = 2,
    kDescFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string encoding = 2;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // bytes desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.DataTypeInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2ftopic_2eproto;
};
// -------------------------------------------------------------------

class Topic_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Topic_AttrEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Topic_AttrEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Topic_AttrEntry_DoNotUse();
  Topic_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Topic_AttrEntry_DoNotUse& other);
  static const Topic_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Topic_AttrEntry_DoNotUse*>(&_Topic_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.Topic.AttrEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "eCAL.pb.Topic.AttrEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Topic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Topic) */ {
 public:
  Topic();
  virtual ~Topic();

  Topic(const Topic& from);
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Topic& operator=(Topic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Topic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }
  inline void Swap(Topic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Topic* New() const final {
    return CreateMaybeMessage<Topic>(nullptr);
  }

  Topic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Topic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Topic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Topic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2ftopic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTlayerFieldNumber = 12,
    kAttrFieldNumber = 27,
    kHnameFieldNumber = 2,
    kPnameFieldNumber = 4,
    kUnameFieldNumber = 5,
    kTidFieldNumber = 6,
    kTnameFieldNumber = 7,
    kDirectionFieldNumber = 8,
    kTtypeFieldNumber = 9,
    kTdescFieldNumber = 10,
    kHgnameFieldNumber = 28,
    kTqosFieldNumber = 11,
    kTdatatypeFieldNumber = 30,
    kRclockFieldNumber = 1,
    kPidFieldNumber = 3,
    kTsizeFieldNumber = 13,
    kConnectionsLocFieldNumber = 16,
    kConnectionsExtFieldNumber = 17,
    kMessageDropsFieldNumber = 18,
    kDidFieldNumber = 19,
    kDclockFieldNumber = 20,
    kDfreqFieldNumber = 21,
    kHidFieldNumber = 26,
  };
  // repeated .eCAL.pb.TLayer tlayer = 12;
  int tlayer_size() const;
  private:
  int _internal_tlayer_size() const;
  public:
  void clear_tlayer();
  ::eCAL::pb::TLayer* mutable_tlayer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::TLayer >*
      mutable_tlayer();
  private:
  const ::eCAL::pb::TLayer& _internal_tlayer(int index) const;
  ::eCAL::pb::TLayer* _internal_add_tlayer();
  public:
  const ::eCAL::pb::TLayer& tlayer(int index) const;
  ::eCAL::pb::TLayer* add_tlayer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::TLayer >&
      tlayer() const;

  // map<string, string> attr = 27;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attr();

  // string hname = 2;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // string pname = 4;
  void clear_pname();
  const std::string& pname() const;
  void set_pname(const std::string& value);
  void set_pname(std::string&& value);
  void set_pname(const char* value);
  void set_pname(const char* value, size_t size);
  std::string* mutable_pname();
  std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // string uname = 5;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string tid = 6;
  void clear_tid();
  const std::string& tid() const;
  void set_tid(const std::string& value);
  void set_tid(std::string&& value);
  void set_tid(const char* value);
  void set_tid(const char* value, size_t size);
  std::string* mutable_tid();
  std::string* release_tid();
  void set_allocated_tid(std::string* tid);
  private:
  const std::string& _internal_tid() const;
  void _internal_set_tid(const std::string& value);
  std::string* _internal_mutable_tid();
  public:

  // string tname = 7;
  void clear_tname();
  const std::string& tname() const;
  void set_tname(const std::string& value);
  void set_tname(std::string&& value);
  void set_tname(const char* value);
  void set_tname(const char* value, size_t size);
  std::string* mutable_tname();
  std::string* release_tname();
  void set_allocated_tname(std::string* tname);
  private:
  const std::string& _internal_tname() const;
  void _internal_set_tname(const std::string& value);
  std::string* _internal_mutable_tname();
  public:

  // string direction = 8;
  void clear_direction();
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string ttype = 9;
  void clear_ttype();
  const std::string& ttype() const;
  void set_ttype(const std::string& value);
  void set_ttype(std::string&& value);
  void set_ttype(const char* value);
  void set_ttype(const char* value, size_t size);
  std::string* mutable_ttype();
  std::string* release_ttype();
  void set_allocated_ttype(std::string* ttype);
  private:
  const std::string& _internal_ttype() const;
  void _internal_set_ttype(const std::string& value);
  std::string* _internal_mutable_ttype();
  public:

  // bytes tdesc = 10;
  void clear_tdesc();
  const std::string& tdesc() const;
  void set_tdesc(const std::string& value);
  void set_tdesc(std::string&& value);
  void set_tdesc(const char* value);
  void set_tdesc(const void* value, size_t size);
  std::string* mutable_tdesc();
  std::string* release_tdesc();
  void set_allocated_tdesc(std::string* tdesc);
  private:
  const std::string& _internal_tdesc() const;
  void _internal_set_tdesc(const std::string& value);
  std::string* _internal_mutable_tdesc();
  public:

  // string hgname = 28;
  void clear_hgname();
  const std::string& hgname() const;
  void set_hgname(const std::string& value);
  void set_hgname(std::string&& value);
  void set_hgname(const char* value);
  void set_hgname(const char* value, size_t size);
  std::string* mutable_hgname();
  std::string* release_hgname();
  void set_allocated_hgname(std::string* hgname);
  private:
  const std::string& _internal_hgname() const;
  void _internal_set_hgname(const std::string& value);
  std::string* _internal_mutable_hgname();
  public:

  // .eCAL.pb.QOS tqos = 11;
  bool has_tqos() const;
  private:
  bool _internal_has_tqos() const;
  public:
  void clear_tqos();
  const ::eCAL::pb::QOS& tqos() const;
  ::eCAL::pb::QOS* release_tqos();
  ::eCAL::pb::QOS* mutable_tqos();
  void set_allocated_tqos(::eCAL::pb::QOS* tqos);
  private:
  const ::eCAL::pb::QOS& _internal_tqos() const;
  ::eCAL::pb::QOS* _internal_mutable_tqos();
  public:

  // .eCAL.pb.DataTypeInformation tdatatype = 30;
  bool has_tdatatype() const;
  private:
  bool _internal_has_tdatatype() const;
  public:
  void clear_tdatatype();
  const ::eCAL::pb::DataTypeInformation& tdatatype() const;
  ::eCAL::pb::DataTypeInformation* release_tdatatype();
  ::eCAL::pb::DataTypeInformation* mutable_tdatatype();
  void set_allocated_tdatatype(::eCAL::pb::DataTypeInformation* tdatatype);
  private:
  const ::eCAL::pb::DataTypeInformation& _internal_tdatatype() const;
  ::eCAL::pb::DataTypeInformation* _internal_mutable_tdatatype();
  public:

  // int32 rclock = 1;
  void clear_rclock();
  ::PROTOBUF_NAMESPACE_ID::int32 rclock() const;
  void set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rclock() const;
  void _internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsize = 13;
  void clear_tsize();
  ::PROTOBUF_NAMESPACE_ID::int32 tsize() const;
  void set_tsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsize() const;
  void _internal_set_tsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connections_loc = 16;
  void clear_connections_loc();
  ::PROTOBUF_NAMESPACE_ID::int32 connections_loc() const;
  void set_connections_loc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connections_loc() const;
  void _internal_set_connections_loc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connections_ext = 17;
  void clear_connections_ext();
  ::PROTOBUF_NAMESPACE_ID::int32 connections_ext() const;
  void set_connections_ext(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connections_ext() const;
  void _internal_set_connections_ext(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 message_drops = 18;
  void clear_message_drops();
  ::PROTOBUF_NAMESPACE_ID::int32 message_drops() const;
  void set_message_drops(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_drops() const;
  void _internal_set_message_drops(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 did = 19;
  void clear_did();
  ::PROTOBUF_NAMESPACE_ID::int64 did() const;
  void set_did(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_did() const;
  void _internal_set_did(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 dclock = 20;
  void clear_dclock();
  ::PROTOBUF_NAMESPACE_ID::int64 dclock() const;
  void set_dclock(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dclock() const;
  void _internal_set_dclock(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 dfreq = 21;
  void clear_dfreq();
  ::PROTOBUF_NAMESPACE_ID::int32 dfreq() const;
  void set_dfreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dfreq() const;
  void _internal_set_dfreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hid = 26;
  void clear_hid();
  ::PROTOBUF_NAMESPACE_ID::int32 hid() const;
  void set_hid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hid() const;
  void _internal_set_hid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Topic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::TLayer > tlayer_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Topic_AttrEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tdesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hgname_;
  ::eCAL::pb::QOS* tqos_;
  ::eCAL::pb::DataTypeInformation* tdatatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 rclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 connections_loc_;
  ::PROTOBUF_NAMESPACE_ID::int32 connections_ext_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_drops_;
  ::PROTOBUF_NAMESPACE_ID::int64 did_;
  ::PROTOBUF_NAMESPACE_ID::int64 dclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 dfreq_;
  ::PROTOBUF_NAMESPACE_ID::int32 hid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2ftopic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QOS

// .eCAL.pb.QOS.eQOSPolicy_Reliability reliability = 1;
inline void QOS::clear_reliability() {
  reliability_ = 0;
}
inline ::eCAL::pb::QOS_eQOSPolicy_Reliability QOS::_internal_reliability() const {
  return static_cast< ::eCAL::pb::QOS_eQOSPolicy_Reliability >(reliability_);
}
inline ::eCAL::pb::QOS_eQOSPolicy_Reliability QOS::reliability() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.QOS.reliability)
  return _internal_reliability();
}
inline void QOS::_internal_set_reliability(::eCAL::pb::QOS_eQOSPolicy_Reliability value) {
  
  reliability_ = value;
}
inline void QOS::set_reliability(::eCAL::pb::QOS_eQOSPolicy_Reliability value) {
  _internal_set_reliability(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.QOS.reliability)
}

// .eCAL.pb.QOS.eQOSPolicy_HistoryKind history = 2;
inline void QOS::clear_history() {
  history_ = 0;
}
inline ::eCAL::pb::QOS_eQOSPolicy_HistoryKind QOS::_internal_history() const {
  return static_cast< ::eCAL::pb::QOS_eQOSPolicy_HistoryKind >(history_);
}
inline ::eCAL::pb::QOS_eQOSPolicy_HistoryKind QOS::history() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.QOS.history)
  return _internal_history();
}
inline void QOS::_internal_set_history(::eCAL::pb::QOS_eQOSPolicy_HistoryKind value) {
  
  history_ = value;
}
inline void QOS::set_history(::eCAL::pb::QOS_eQOSPolicy_HistoryKind value) {
  _internal_set_history(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.QOS.history)
}

// int32 history_depth = 3;
inline void QOS::clear_history_depth() {
  history_depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QOS::_internal_history_depth() const {
  return history_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QOS::history_depth() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.QOS.history_depth)
  return _internal_history_depth();
}
inline void QOS::_internal_set_history_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  history_depth_ = value;
}
inline void QOS::set_history_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_history_depth(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.QOS.history_depth)
}

// -------------------------------------------------------------------

// DataTypeInformation

// string name = 1;
inline void DataTypeInformation::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataTypeInformation::name() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.DataTypeInformation.name)
  return _internal_name();
}
inline void DataTypeInformation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.DataTypeInformation.name)
}
inline std::string* DataTypeInformation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.DataTypeInformation.name)
  return _internal_mutable_name();
}
inline const std::string& DataTypeInformation::_internal_name() const {
  return name_.GetNoArena();
}
inline void DataTypeInformation::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataTypeInformation::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.DataTypeInformation.name)
}
inline void DataTypeInformation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.DataTypeInformation.name)
}
inline void DataTypeInformation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.DataTypeInformation.name)
}
inline std::string* DataTypeInformation::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTypeInformation::release_name() {
  // @@protoc_insertion_point(field_release:eCAL.pb.DataTypeInformation.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTypeInformation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.DataTypeInformation.name)
}

// string encoding = 2;
inline void DataTypeInformation::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataTypeInformation::encoding() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.DataTypeInformation.encoding)
  return _internal_encoding();
}
inline void DataTypeInformation::set_encoding(const std::string& value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.DataTypeInformation.encoding)
}
inline std::string* DataTypeInformation::mutable_encoding() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.DataTypeInformation.encoding)
  return _internal_mutable_encoding();
}
inline const std::string& DataTypeInformation::_internal_encoding() const {
  return encoding_.GetNoArena();
}
inline void DataTypeInformation::_internal_set_encoding(const std::string& value) {
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataTypeInformation::set_encoding(std::string&& value) {
  
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.DataTypeInformation.encoding)
}
inline void DataTypeInformation::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.DataTypeInformation.encoding)
}
inline void DataTypeInformation::set_encoding(const char* value, size_t size) {
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.DataTypeInformation.encoding)
}
inline std::string* DataTypeInformation::_internal_mutable_encoding() {
  
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTypeInformation::release_encoding() {
  // @@protoc_insertion_point(field_release:eCAL.pb.DataTypeInformation.encoding)
  
  return encoding_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTypeInformation::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.DataTypeInformation.encoding)
}

// bytes desc = 3;
inline void DataTypeInformation::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataTypeInformation::desc() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.DataTypeInformation.desc)
  return _internal_desc();
}
inline void DataTypeInformation::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.DataTypeInformation.desc)
}
inline std::string* DataTypeInformation::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.DataTypeInformation.desc)
  return _internal_mutable_desc();
}
inline const std::string& DataTypeInformation::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void DataTypeInformation::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataTypeInformation::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.DataTypeInformation.desc)
}
inline void DataTypeInformation::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.DataTypeInformation.desc)
}
inline void DataTypeInformation::set_desc(const void* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.DataTypeInformation.desc)
}
inline std::string* DataTypeInformation::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTypeInformation::release_desc() {
  // @@protoc_insertion_point(field_release:eCAL.pb.DataTypeInformation.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTypeInformation::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.DataTypeInformation.desc)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Topic

// int32 rclock = 1;
inline void Topic::clear_rclock() {
  rclock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_rclock() const {
  return rclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::rclock() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.rclock)
  return _internal_rclock();
}
inline void Topic::_internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rclock_ = value;
}
inline void Topic::set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rclock(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.rclock)
}

// int32 hid = 26;
inline void Topic::clear_hid() {
  hid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_hid() const {
  return hid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::hid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.hid)
  return _internal_hid();
}
inline void Topic::_internal_set_hid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hid_ = value;
}
inline void Topic::set_hid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.hid)
}

// string hname = 2;
inline void Topic::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.hname)
  return _internal_hname();
}
inline void Topic::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.hname)
}
inline std::string* Topic::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.hname)
  return _internal_mutable_hname();
}
inline const std::string& Topic::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void Topic::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.hname)
}
inline void Topic::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.hname)
}
inline void Topic::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.hname)
}
inline std::string* Topic::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.hname)
}

// string hgname = 28;
inline void Topic::clear_hgname() {
  hgname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::hgname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.hgname)
  return _internal_hgname();
}
inline void Topic::set_hgname(const std::string& value) {
  _internal_set_hgname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.hgname)
}
inline std::string* Topic::mutable_hgname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.hgname)
  return _internal_mutable_hgname();
}
inline const std::string& Topic::_internal_hgname() const {
  return hgname_.GetNoArena();
}
inline void Topic::_internal_set_hgname(const std::string& value) {
  
  hgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_hgname(std::string&& value) {
  
  hgname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.hgname)
}
inline void Topic::set_hgname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.hgname)
}
inline void Topic::set_hgname(const char* value, size_t size) {
  
  hgname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.hgname)
}
inline std::string* Topic::_internal_mutable_hgname() {
  
  return hgname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_hgname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.hgname)
  
  return hgname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_hgname(std::string* hgname) {
  if (hgname != nullptr) {
    
  } else {
    
  }
  hgname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hgname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.hgname)
}

// int32 pid = 3;
inline void Topic::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.pid)
  return _internal_pid();
}
inline void Topic::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Topic::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.pid)
}

// string pname = 4;
inline void Topic::clear_pname() {
  pname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::pname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.pname)
  return _internal_pname();
}
inline void Topic::set_pname(const std::string& value) {
  _internal_set_pname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.pname)
}
inline std::string* Topic::mutable_pname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.pname)
  return _internal_mutable_pname();
}
inline const std::string& Topic::_internal_pname() const {
  return pname_.GetNoArena();
}
inline void Topic::_internal_set_pname(const std::string& value) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_pname(std::string&& value) {
  
  pname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.pname)
}
inline void Topic::set_pname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.pname)
}
inline void Topic::set_pname(const char* value, size_t size) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.pname)
}
inline std::string* Topic::_internal_mutable_pname() {
  
  return pname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_pname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.pname)
  
  return pname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.pname)
}

// string uname = 5;
inline void Topic::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::uname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.uname)
  return _internal_uname();
}
inline void Topic::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.uname)
}
inline std::string* Topic::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.uname)
  return _internal_mutable_uname();
}
inline const std::string& Topic::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void Topic::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.uname)
}
inline void Topic::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.uname)
}
inline void Topic::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.uname)
}
inline std::string* Topic::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_uname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.uname)
}

// string tid = 6;
inline void Topic::clear_tid() {
  tid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::tid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tid)
  return _internal_tid();
}
inline void Topic::set_tid(const std::string& value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.tid)
}
inline std::string* Topic::mutable_tid() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.tid)
  return _internal_mutable_tid();
}
inline const std::string& Topic::_internal_tid() const {
  return tid_.GetNoArena();
}
inline void Topic::_internal_set_tid(const std::string& value) {
  
  tid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_tid(std::string&& value) {
  
  tid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.tid)
}
inline void Topic::set_tid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.tid)
}
inline void Topic::set_tid(const char* value, size_t size) {
  
  tid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.tid)
}
inline std::string* Topic::_internal_mutable_tid() {
  
  return tid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_tid() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.tid)
  
  return tid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_tid(std::string* tid) {
  if (tid != nullptr) {
    
  } else {
    
  }
  tid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tid);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.tid)
}

// string tname = 7;
inline void Topic::clear_tname() {
  tname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::tname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tname)
  return _internal_tname();
}
inline void Topic::set_tname(const std::string& value) {
  _internal_set_tname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.tname)
}
inline std::string* Topic::mutable_tname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.tname)
  return _internal_mutable_tname();
}
inline const std::string& Topic::_internal_tname() const {
  return tname_.GetNoArena();
}
inline void Topic::_internal_set_tname(const std::string& value) {
  
  tname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_tname(std::string&& value) {
  
  tname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.tname)
}
inline void Topic::set_tname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.tname)
}
inline void Topic::set_tname(const char* value, size_t size) {
  
  tname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.tname)
}
inline std::string* Topic::_internal_mutable_tname() {
  
  return tname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_tname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.tname)
  
  return tname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_tname(std::string* tname) {
  if (tname != nullptr) {
    
  } else {
    
  }
  tname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.tname)
}

// string direction = 8;
inline void Topic::clear_direction() {
  direction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::direction() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.direction)
  return _internal_direction();
}
inline void Topic::set_direction(const std::string& value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.direction)
}
inline std::string* Topic::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.direction)
  return _internal_mutable_direction();
}
inline const std::string& Topic::_internal_direction() const {
  return direction_.GetNoArena();
}
inline void Topic::_internal_set_direction(const std::string& value) {
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_direction(std::string&& value) {
  
  direction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.direction)
}
inline void Topic::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.direction)
}
inline void Topic::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.direction)
}
inline std::string* Topic::_internal_mutable_direction() {
  
  return direction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_direction() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.direction)
  
  return direction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.direction)
}

// string ttype = 9;
inline void Topic::clear_ttype() {
  ttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::ttype() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.ttype)
  return _internal_ttype();
}
inline void Topic::set_ttype(const std::string& value) {
  _internal_set_ttype(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.ttype)
}
inline std::string* Topic::mutable_ttype() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.ttype)
  return _internal_mutable_ttype();
}
inline const std::string& Topic::_internal_ttype() const {
  return ttype_.GetNoArena();
}
inline void Topic::_internal_set_ttype(const std::string& value) {
  
  ttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_ttype(std::string&& value) {
  
  ttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.ttype)
}
inline void Topic::set_ttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.ttype)
}
inline void Topic::set_ttype(const char* value, size_t size) {
  
  ttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.ttype)
}
inline std::string* Topic::_internal_mutable_ttype() {
  
  return ttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_ttype() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.ttype)
  
  return ttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_ttype(std::string* ttype) {
  if (ttype != nullptr) {
    
  } else {
    
  }
  ttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ttype);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.ttype)
}

// bytes tdesc = 10;
inline void Topic::clear_tdesc() {
  tdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Topic::tdesc() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tdesc)
  return _internal_tdesc();
}
inline void Topic::set_tdesc(const std::string& value) {
  _internal_set_tdesc(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.tdesc)
}
inline std::string* Topic::mutable_tdesc() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.tdesc)
  return _internal_mutable_tdesc();
}
inline const std::string& Topic::_internal_tdesc() const {
  return tdesc_.GetNoArena();
}
inline void Topic::_internal_set_tdesc(const std::string& value) {
  
  tdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Topic::set_tdesc(std::string&& value) {
  
  tdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Topic.tdesc)
}
inline void Topic::set_tdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Topic.tdesc)
}
inline void Topic::set_tdesc(const void* value, size_t size) {
  
  tdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Topic.tdesc)
}
inline std::string* Topic::_internal_mutable_tdesc() {
  
  return tdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Topic::release_tdesc() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.tdesc)
  
  return tdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_tdesc(std::string* tdesc) {
  if (tdesc != nullptr) {
    
  } else {
    
  }
  tdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tdesc);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.tdesc)
}

// .eCAL.pb.DataTypeInformation tdatatype = 30;
inline bool Topic::_internal_has_tdatatype() const {
  return this != internal_default_instance() && tdatatype_ != nullptr;
}
inline bool Topic::has_tdatatype() const {
  return _internal_has_tdatatype();
}
inline void Topic::clear_tdatatype() {
  if (GetArenaNoVirtual() == nullptr && tdatatype_ != nullptr) {
    delete tdatatype_;
  }
  tdatatype_ = nullptr;
}
inline const ::eCAL::pb::DataTypeInformation& Topic::_internal_tdatatype() const {
  const ::eCAL::pb::DataTypeInformation* p = tdatatype_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::DataTypeInformation*>(
      &::eCAL::pb::_DataTypeInformation_default_instance_);
}
inline const ::eCAL::pb::DataTypeInformation& Topic::tdatatype() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tdatatype)
  return _internal_tdatatype();
}
inline ::eCAL::pb::DataTypeInformation* Topic::release_tdatatype() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.tdatatype)
  
  ::eCAL::pb::DataTypeInformation* temp = tdatatype_;
  tdatatype_ = nullptr;
  return temp;
}
inline ::eCAL::pb::DataTypeInformation* Topic::_internal_mutable_tdatatype() {
  
  if (tdatatype_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::DataTypeInformation>(GetArenaNoVirtual());
    tdatatype_ = p;
  }
  return tdatatype_;
}
inline ::eCAL::pb::DataTypeInformation* Topic::mutable_tdatatype() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.tdatatype)
  return _internal_mutable_tdatatype();
}
inline void Topic::set_allocated_tdatatype(::eCAL::pb::DataTypeInformation* tdatatype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tdatatype_;
  }
  if (tdatatype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tdatatype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdatatype, submessage_arena);
    }
    
  } else {
    
  }
  tdatatype_ = tdatatype;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.tdatatype)
}

// .eCAL.pb.QOS tqos = 11;
inline bool Topic::_internal_has_tqos() const {
  return this != internal_default_instance() && tqos_ != nullptr;
}
inline bool Topic::has_tqos() const {
  return _internal_has_tqos();
}
inline void Topic::clear_tqos() {
  if (GetArenaNoVirtual() == nullptr && tqos_ != nullptr) {
    delete tqos_;
  }
  tqos_ = nullptr;
}
inline const ::eCAL::pb::QOS& Topic::_internal_tqos() const {
  const ::eCAL::pb::QOS* p = tqos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::QOS*>(
      &::eCAL::pb::_QOS_default_instance_);
}
inline const ::eCAL::pb::QOS& Topic::tqos() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tqos)
  return _internal_tqos();
}
inline ::eCAL::pb::QOS* Topic::release_tqos() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Topic.tqos)
  
  ::eCAL::pb::QOS* temp = tqos_;
  tqos_ = nullptr;
  return temp;
}
inline ::eCAL::pb::QOS* Topic::_internal_mutable_tqos() {
  
  if (tqos_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::QOS>(GetArenaNoVirtual());
    tqos_ = p;
  }
  return tqos_;
}
inline ::eCAL::pb::QOS* Topic::mutable_tqos() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.tqos)
  return _internal_mutable_tqos();
}
inline void Topic::set_allocated_tqos(::eCAL::pb::QOS* tqos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tqos_;
  }
  if (tqos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tqos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tqos, submessage_arena);
    }
    
  } else {
    
  }
  tqos_ = tqos;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Topic.tqos)
}

// repeated .eCAL.pb.TLayer tlayer = 12;
inline int Topic::_internal_tlayer_size() const {
  return tlayer_.size();
}
inline int Topic::tlayer_size() const {
  return _internal_tlayer_size();
}
inline ::eCAL::pb::TLayer* Topic::mutable_tlayer(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Topic.tlayer)
  return tlayer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::TLayer >*
Topic::mutable_tlayer() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Topic.tlayer)
  return &tlayer_;
}
inline const ::eCAL::pb::TLayer& Topic::_internal_tlayer(int index) const {
  return tlayer_.Get(index);
}
inline const ::eCAL::pb::TLayer& Topic::tlayer(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tlayer)
  return _internal_tlayer(index);
}
inline ::eCAL::pb::TLayer* Topic::_internal_add_tlayer() {
  return tlayer_.Add();
}
inline ::eCAL::pb::TLayer* Topic::add_tlayer() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Topic.tlayer)
  return _internal_add_tlayer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::TLayer >&
Topic::tlayer() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Topic.tlayer)
  return tlayer_;
}

// int32 tsize = 13;
inline void Topic::clear_tsize() {
  tsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_tsize() const {
  return tsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::tsize() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.tsize)
  return _internal_tsize();
}
inline void Topic::_internal_set_tsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsize_ = value;
}
inline void Topic::set_tsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsize(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.tsize)
}

// int32 connections_loc = 16;
inline void Topic::clear_connections_loc() {
  connections_loc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_connections_loc() const {
  return connections_loc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::connections_loc() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.connections_loc)
  return _internal_connections_loc();
}
inline void Topic::_internal_set_connections_loc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connections_loc_ = value;
}
inline void Topic::set_connections_loc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connections_loc(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.connections_loc)
}

// int32 connections_ext = 17;
inline void Topic::clear_connections_ext() {
  connections_ext_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_connections_ext() const {
  return connections_ext_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::connections_ext() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.connections_ext)
  return _internal_connections_ext();
}
inline void Topic::_internal_set_connections_ext(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connections_ext_ = value;
}
inline void Topic::set_connections_ext(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connections_ext(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.connections_ext)
}

// int32 message_drops = 18;
inline void Topic::clear_message_drops() {
  message_drops_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_message_drops() const {
  return message_drops_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::message_drops() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.message_drops)
  return _internal_message_drops();
}
inline void Topic::_internal_set_message_drops(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_drops_ = value;
}
inline void Topic::set_message_drops(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_drops(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.message_drops)
}

// int64 did = 19;
inline void Topic::clear_did() {
  did_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Topic::_internal_did() const {
  return did_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Topic::did() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.did)
  return _internal_did();
}
inline void Topic::_internal_set_did(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  did_ = value;
}
inline void Topic::set_did(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.did)
}

// int64 dclock = 20;
inline void Topic::clear_dclock() {
  dclock_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Topic::_internal_dclock() const {
  return dclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Topic::dclock() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.dclock)
  return _internal_dclock();
}
inline void Topic::_internal_set_dclock(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dclock_ = value;
}
inline void Topic::set_dclock(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dclock(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.dclock)
}

// int32 dfreq = 21;
inline void Topic::clear_dfreq() {
  dfreq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::_internal_dfreq() const {
  return dfreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topic::dfreq() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Topic.dfreq)
  return _internal_dfreq();
}
inline void Topic::_internal_set_dfreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dfreq_ = value;
}
inline void Topic::set_dfreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dfreq(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Topic.dfreq)
}

// map<string, string> attr = 27;
inline int Topic::_internal_attr_size() const {
  return attr_.size();
}
inline int Topic::attr_size() const {
  return _internal_attr_size();
}
inline void Topic::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Topic::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Topic::attr() const {
  // @@protoc_insertion_point(field_map:eCAL.pb.Topic.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Topic::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Topic::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:eCAL.pb.Topic.attr)
  return _internal_mutable_attr();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::QOS_eQOSPolicy_Reliability> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::QOS_eQOSPolicy_Reliability>() {
  return ::eCAL::pb::QOS_eQOSPolicy_Reliability_descriptor();
}
template <> struct is_proto_enum< ::eCAL::pb::QOS_eQOSPolicy_HistoryKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::QOS_eQOSPolicy_HistoryKind>() {
  return ::eCAL::pb::QOS_eQOSPolicy_HistoryKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2ftopic_2eproto
