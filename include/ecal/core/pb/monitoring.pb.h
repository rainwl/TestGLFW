// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/core/pb/monitoring.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fmonitoring_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fmonitoring_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ecal/core/pb/host.pb.h"
#include "ecal/core/pb/process.pb.h"
#include "ecal/core/pb/service.pb.h"
#include "ecal/core/pb/topic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fcore_2fpb_2fmonitoring_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fcore_2fpb_2fmonitoring_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto;
namespace eCAL {
namespace pb {
class LogMessage;
class LogMessageDefaultTypeInternal;
extern LogMessageDefaultTypeInternal _LogMessage_default_instance_;
class Logging;
class LoggingDefaultTypeInternal;
extern LoggingDefaultTypeInternal _Logging_default_instance_;
class Monitoring;
class MonitoringDefaultTypeInternal;
extern MonitoringDefaultTypeInternal _Monitoring_default_instance_;
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::LogMessage* Arena::CreateMaybeMessage<::eCAL::pb::LogMessage>(Arena*);
template<> ::eCAL::pb::Logging* Arena::CreateMaybeMessage<::eCAL::pb::Logging>(Arena*);
template<> ::eCAL::pb::Monitoring* Arena::CreateMaybeMessage<::eCAL::pb::Monitoring>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {

// ===================================================================

class LogMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.LogMessage) */ {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);
  LogMessage(LogMessage&& from) noexcept
    : LogMessage() {
    *this = ::std::move(from);
  }

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMessage& operator=(LogMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMessage* internal_default_instance() {
    return reinterpret_cast<const LogMessage*>(
               &_LogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogMessage& a, LogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMessage* New() const final {
    return CreateMaybeMessage<LogMessage>(nullptr);
  }

  LogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.LogMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHnameFieldNumber = 2,
    kPnameFieldNumber = 4,
    kUnameFieldNumber = 5,
    kContentFieldNumber = 7,
    kTimeFieldNumber = 1,
    kPidFieldNumber = 3,
    kLevelFieldNumber = 6,
  };
  // string hname = 2;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // string pname = 4;
  void clear_pname();
  const std::string& pname() const;
  void set_pname(const std::string& value);
  void set_pname(std::string&& value);
  void set_pname(const char* value);
  void set_pname(const char* value, size_t size);
  std::string* mutable_pname();
  std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // string uname = 5;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string content = 7;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 pid = 3;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 6;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.LogMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class Monitoring :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Monitoring) */ {
 public:
  Monitoring();
  virtual ~Monitoring();

  Monitoring(const Monitoring& from);
  Monitoring(Monitoring&& from) noexcept
    : Monitoring() {
    *this = ::std::move(from);
  }

  inline Monitoring& operator=(const Monitoring& from) {
    CopyFrom(from);
    return *this;
  }
  inline Monitoring& operator=(Monitoring&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Monitoring& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Monitoring* internal_default_instance() {
    return reinterpret_cast<const Monitoring*>(
               &_Monitoring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Monitoring& a, Monitoring& b) {
    a.Swap(&b);
  }
  inline void Swap(Monitoring* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Monitoring* New() const final {
    return CreateMaybeMessage<Monitoring>(nullptr);
  }

  Monitoring* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Monitoring>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Monitoring& from);
  void MergeFrom(const Monitoring& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Monitoring* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Monitoring";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostsFieldNumber = 1,
    kProcessesFieldNumber = 2,
    kServicesFieldNumber = 3,
    kTopicsFieldNumber = 4,
    kClientsFieldNumber = 5,
  };
  // repeated .eCAL.pb.Host hosts = 1;
  int hosts_size() const;
  private:
  int _internal_hosts_size() const;
  public:
  void clear_hosts();
  ::eCAL::pb::Host* mutable_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Host >*
      mutable_hosts();
  private:
  const ::eCAL::pb::Host& _internal_hosts(int index) const;
  ::eCAL::pb::Host* _internal_add_hosts();
  public:
  const ::eCAL::pb::Host& hosts(int index) const;
  ::eCAL::pb::Host* add_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Host >&
      hosts() const;

  // repeated .eCAL.pb.Process processes = 2;
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  ::eCAL::pb::Process* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Process >*
      mutable_processes();
  private:
  const ::eCAL::pb::Process& _internal_processes(int index) const;
  ::eCAL::pb::Process* _internal_add_processes();
  public:
  const ::eCAL::pb::Process& processes(int index) const;
  ::eCAL::pb::Process* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Process >&
      processes() const;

  // repeated .eCAL.pb.Service services = 3;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::eCAL::pb::Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Service >*
      mutable_services();
  private:
  const ::eCAL::pb::Service& _internal_services(int index) const;
  ::eCAL::pb::Service* _internal_add_services();
  public:
  const ::eCAL::pb::Service& services(int index) const;
  ::eCAL::pb::Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Service >&
      services() const;

  // repeated .eCAL.pb.Topic topics = 4;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::eCAL::pb::Topic* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Topic >*
      mutable_topics();
  private:
  const ::eCAL::pb::Topic& _internal_topics(int index) const;
  ::eCAL::pb::Topic* _internal_add_topics();
  public:
  const ::eCAL::pb::Topic& topics(int index) const;
  ::eCAL::pb::Topic* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Topic >&
      topics() const;

  // repeated .eCAL.pb.Client clients = 5;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::eCAL::pb::Client* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Client >*
      mutable_clients();
  private:
  const ::eCAL::pb::Client& _internal_clients(int index) const;
  ::eCAL::pb::Client* _internal_add_clients();
  public:
  const ::eCAL::pb::Client& clients(int index) const;
  ::eCAL::pb::Client* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Client >&
      clients() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.Monitoring)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Host > hosts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Process > processes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Service > services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Topic > topics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Client > clients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class Logging :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Logging) */ {
 public:
  Logging();
  virtual ~Logging();

  Logging(const Logging& from);
  Logging(Logging&& from) noexcept
    : Logging() {
    *this = ::std::move(from);
  }

  inline Logging& operator=(const Logging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logging& operator=(Logging&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logging& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logging* internal_default_instance() {
    return reinterpret_cast<const Logging*>(
               &_Logging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Logging& a, Logging& b) {
    a.Swap(&b);
  }
  inline void Swap(Logging* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logging* New() const final {
    return CreateMaybeMessage<Logging>(nullptr);
  }

  Logging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logging>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logging& from);
  void MergeFrom(const Logging& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logging* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Logging";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
  };
  // repeated .eCAL.pb.LogMessage logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::eCAL::pb::LogMessage* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::LogMessage >*
      mutable_logs();
  private:
  const ::eCAL::pb::LogMessage& _internal_logs(int index) const;
  ::eCAL::pb::LogMessage* _internal_add_logs();
  public:
  const ::eCAL::pb::LogMessage& logs(int index) const;
  ::eCAL::pb::LogMessage* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::LogMessage >&
      logs() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.Logging)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::LogMessage > logs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fmonitoring_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMessage

// int64 time = 1;
inline void LogMessage::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMessage::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMessage::time() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.time)
  return _internal_time();
}
inline void LogMessage::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void LogMessage::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.time)
}

// string hname = 2;
inline void LogMessage::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMessage::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.hname)
  return _internal_hname();
}
inline void LogMessage::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.hname)
}
inline std::string* LogMessage::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.LogMessage.hname)
  return _internal_mutable_hname();
}
inline const std::string& LogMessage::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void LogMessage::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMessage::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.LogMessage.hname)
}
inline void LogMessage::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.LogMessage.hname)
}
inline void LogMessage::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.LogMessage.hname)
}
inline std::string* LogMessage::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMessage::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.LogMessage.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.LogMessage.hname)
}

// int32 pid = 3;
inline void LogMessage::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMessage::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMessage::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.pid)
  return _internal_pid();
}
inline void LogMessage::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void LogMessage::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.pid)
}

// string pname = 4;
inline void LogMessage::clear_pname() {
  pname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMessage::pname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.pname)
  return _internal_pname();
}
inline void LogMessage::set_pname(const std::string& value) {
  _internal_set_pname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.pname)
}
inline std::string* LogMessage::mutable_pname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.LogMessage.pname)
  return _internal_mutable_pname();
}
inline const std::string& LogMessage::_internal_pname() const {
  return pname_.GetNoArena();
}
inline void LogMessage::_internal_set_pname(const std::string& value) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMessage::set_pname(std::string&& value) {
  
  pname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.LogMessage.pname)
}
inline void LogMessage::set_pname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.LogMessage.pname)
}
inline void LogMessage::set_pname(const char* value, size_t size) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.LogMessage.pname)
}
inline std::string* LogMessage::_internal_mutable_pname() {
  
  return pname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMessage::release_pname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.LogMessage.pname)
  
  return pname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.LogMessage.pname)
}

// string uname = 5;
inline void LogMessage::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMessage::uname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.uname)
  return _internal_uname();
}
inline void LogMessage::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.uname)
}
inline std::string* LogMessage::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.LogMessage.uname)
  return _internal_mutable_uname();
}
inline const std::string& LogMessage::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void LogMessage::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMessage::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.LogMessage.uname)
}
inline void LogMessage::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.LogMessage.uname)
}
inline void LogMessage::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.LogMessage.uname)
}
inline std::string* LogMessage::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMessage::release_uname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.LogMessage.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.LogMessage.uname)
}

// int32 level = 6;
inline void LogMessage::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMessage::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMessage::level() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.level)
  return _internal_level();
}
inline void LogMessage::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void LogMessage::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.level)
}

// string content = 7;
inline void LogMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMessage::content() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.LogMessage.content)
  return _internal_content();
}
inline void LogMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.LogMessage.content)
}
inline std::string* LogMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.LogMessage.content)
  return _internal_mutable_content();
}
inline const std::string& LogMessage::_internal_content() const {
  return content_.GetNoArena();
}
inline void LogMessage::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.LogMessage.content)
}
inline void LogMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.LogMessage.content)
}
inline void LogMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.LogMessage.content)
}
inline std::string* LogMessage::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMessage::release_content() {
  // @@protoc_insertion_point(field_release:eCAL.pb.LogMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.LogMessage.content)
}

// -------------------------------------------------------------------

// Monitoring

// repeated .eCAL.pb.Host hosts = 1;
inline int Monitoring::_internal_hosts_size() const {
  return hosts_.size();
}
inline int Monitoring::hosts_size() const {
  return _internal_hosts_size();
}
inline ::eCAL::pb::Host* Monitoring::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Monitoring.hosts)
  return hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Host >*
Monitoring::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Monitoring.hosts)
  return &hosts_;
}
inline const ::eCAL::pb::Host& Monitoring::_internal_hosts(int index) const {
  return hosts_.Get(index);
}
inline const ::eCAL::pb::Host& Monitoring::hosts(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Monitoring.hosts)
  return _internal_hosts(index);
}
inline ::eCAL::pb::Host* Monitoring::_internal_add_hosts() {
  return hosts_.Add();
}
inline ::eCAL::pb::Host* Monitoring::add_hosts() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Monitoring.hosts)
  return _internal_add_hosts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Host >&
Monitoring::hosts() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Monitoring.hosts)
  return hosts_;
}

// repeated .eCAL.pb.Process processes = 2;
inline int Monitoring::_internal_processes_size() const {
  return processes_.size();
}
inline int Monitoring::processes_size() const {
  return _internal_processes_size();
}
inline ::eCAL::pb::Process* Monitoring::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Monitoring.processes)
  return processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Process >*
Monitoring::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Monitoring.processes)
  return &processes_;
}
inline const ::eCAL::pb::Process& Monitoring::_internal_processes(int index) const {
  return processes_.Get(index);
}
inline const ::eCAL::pb::Process& Monitoring::processes(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Monitoring.processes)
  return _internal_processes(index);
}
inline ::eCAL::pb::Process* Monitoring::_internal_add_processes() {
  return processes_.Add();
}
inline ::eCAL::pb::Process* Monitoring::add_processes() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Monitoring.processes)
  return _internal_add_processes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Process >&
Monitoring::processes() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Monitoring.processes)
  return processes_;
}

// repeated .eCAL.pb.Service services = 3;
inline int Monitoring::_internal_services_size() const {
  return services_.size();
}
inline int Monitoring::services_size() const {
  return _internal_services_size();
}
inline ::eCAL::pb::Service* Monitoring::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Monitoring.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Service >*
Monitoring::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Monitoring.services)
  return &services_;
}
inline const ::eCAL::pb::Service& Monitoring::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::eCAL::pb::Service& Monitoring::services(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Monitoring.services)
  return _internal_services(index);
}
inline ::eCAL::pb::Service* Monitoring::_internal_add_services() {
  return services_.Add();
}
inline ::eCAL::pb::Service* Monitoring::add_services() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Monitoring.services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Service >&
Monitoring::services() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Monitoring.services)
  return services_;
}

// repeated .eCAL.pb.Client clients = 5;
inline int Monitoring::_internal_clients_size() const {
  return clients_.size();
}
inline int Monitoring::clients_size() const {
  return _internal_clients_size();
}
inline ::eCAL::pb::Client* Monitoring::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Monitoring.clients)
  return clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Client >*
Monitoring::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Monitoring.clients)
  return &clients_;
}
inline const ::eCAL::pb::Client& Monitoring::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const ::eCAL::pb::Client& Monitoring::clients(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Monitoring.clients)
  return _internal_clients(index);
}
inline ::eCAL::pb::Client* Monitoring::_internal_add_clients() {
  return clients_.Add();
}
inline ::eCAL::pb::Client* Monitoring::add_clients() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Monitoring.clients)
  return _internal_add_clients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Client >&
Monitoring::clients() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Monitoring.clients)
  return clients_;
}

// repeated .eCAL.pb.Topic topics = 4;
inline int Monitoring::_internal_topics_size() const {
  return topics_.size();
}
inline int Monitoring::topics_size() const {
  return _internal_topics_size();
}
inline ::eCAL::pb::Topic* Monitoring::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Monitoring.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Topic >*
Monitoring::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Monitoring.topics)
  return &topics_;
}
inline const ::eCAL::pb::Topic& Monitoring::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::eCAL::pb::Topic& Monitoring::topics(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Monitoring.topics)
  return _internal_topics(index);
}
inline ::eCAL::pb::Topic* Monitoring::_internal_add_topics() {
  return topics_.Add();
}
inline ::eCAL::pb::Topic* Monitoring::add_topics() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Monitoring.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Topic >&
Monitoring::topics() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Monitoring.topics)
  return topics_;
}

// -------------------------------------------------------------------

// Logging

// repeated .eCAL.pb.LogMessage logs = 1;
inline int Logging::_internal_logs_size() const {
  return logs_.size();
}
inline int Logging::logs_size() const {
  return _internal_logs_size();
}
inline void Logging::clear_logs() {
  logs_.Clear();
}
inline ::eCAL::pb::LogMessage* Logging::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Logging.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::LogMessage >*
Logging::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Logging.logs)
  return &logs_;
}
inline const ::eCAL::pb::LogMessage& Logging::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::eCAL::pb::LogMessage& Logging::logs(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Logging.logs)
  return _internal_logs(index);
}
inline ::eCAL::pb::LogMessage* Logging::_internal_add_logs() {
  return logs_.Add();
}
inline ::eCAL::pb::LogMessage* Logging::add_logs() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Logging.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::LogMessage >&
Logging::logs() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Logging.logs)
  return logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace eCAL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fmonitoring_2eproto
