// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/core/pb/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fcore_2fpb_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fcore_2fpb_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto;
namespace eCAL {
namespace pb {
class Client;
class ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class Method;
class MethodDefaultTypeInternal;
extern MethodDefaultTypeInternal _Method_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class ServiceHeader;
class ServiceHeaderDefaultTypeInternal;
extern ServiceHeaderDefaultTypeInternal _ServiceHeader_default_instance_;
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::Client* Arena::CreateMaybeMessage<::eCAL::pb::Client>(Arena*);
template<> ::eCAL::pb::Method* Arena::CreateMaybeMessage<::eCAL::pb::Method>(Arena*);
template<> ::eCAL::pb::Request* Arena::CreateMaybeMessage<::eCAL::pb::Request>(Arena*);
template<> ::eCAL::pb::Response* Arena::CreateMaybeMessage<::eCAL::pb::Response>(Arena*);
template<> ::eCAL::pb::Service* Arena::CreateMaybeMessage<::eCAL::pb::Service>(Arena*);
template<> ::eCAL::pb::ServiceHeader* Arena::CreateMaybeMessage<::eCAL::pb::ServiceHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {

enum ServiceHeader_eCallState : int {
  ServiceHeader_eCallState_none = 0,
  ServiceHeader_eCallState_executed = 1,
  ServiceHeader_eCallState_failed = 2,
  ServiceHeader_eCallState_ServiceHeader_eCallState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceHeader_eCallState_ServiceHeader_eCallState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceHeader_eCallState_IsValid(int value);
constexpr ServiceHeader_eCallState ServiceHeader_eCallState_eCallState_MIN = ServiceHeader_eCallState_none;
constexpr ServiceHeader_eCallState ServiceHeader_eCallState_eCallState_MAX = ServiceHeader_eCallState_failed;
constexpr int ServiceHeader_eCallState_eCallState_ARRAYSIZE = ServiceHeader_eCallState_eCallState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceHeader_eCallState_descriptor();
template<typename T>
inline const std::string& ServiceHeader_eCallState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceHeader_eCallState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceHeader_eCallState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceHeader_eCallState_descriptor(), enum_t_value);
}
inline bool ServiceHeader_eCallState_Parse(
    const std::string& name, ServiceHeader_eCallState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceHeader_eCallState>(
    ServiceHeader_eCallState_descriptor(), name, value);
}
// ===================================================================

class ServiceHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.ServiceHeader) */ {
 public:
  ServiceHeader();
  virtual ~ServiceHeader();

  ServiceHeader(const ServiceHeader& from);
  ServiceHeader(ServiceHeader&& from) noexcept
    : ServiceHeader() {
    *this = ::std::move(from);
  }

  inline ServiceHeader& operator=(const ServiceHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceHeader& operator=(ServiceHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceHeader* internal_default_instance() {
    return reinterpret_cast<const ServiceHeader*>(
               &_ServiceHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceHeader& a, ServiceHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceHeader* New() const final {
    return CreateMaybeMessage<ServiceHeader>(nullptr);
  }

  ServiceHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceHeader& from);
  void MergeFrom(const ServiceHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.ServiceHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServiceHeader_eCallState eCallState;
  static constexpr eCallState none =
    ServiceHeader_eCallState_none;
  static constexpr eCallState executed =
    ServiceHeader_eCallState_executed;
  static constexpr eCallState failed =
    ServiceHeader_eCallState_failed;
  static inline bool eCallState_IsValid(int value) {
    return ServiceHeader_eCallState_IsValid(value);
  }
  static constexpr eCallState eCallState_MIN =
    ServiceHeader_eCallState_eCallState_MIN;
  static constexpr eCallState eCallState_MAX =
    ServiceHeader_eCallState_eCallState_MAX;
  static constexpr int eCallState_ARRAYSIZE =
    ServiceHeader_eCallState_eCallState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eCallState_descriptor() {
    return ServiceHeader_eCallState_descriptor();
  }
  template<typename T>
  static inline const std::string& eCallState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eCallState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eCallState_Name.");
    return ServiceHeader_eCallState_Name(enum_t_value);
  }
  static inline bool eCallState_Parse(const std::string& name,
      eCallState* value) {
    return ServiceHeader_eCallState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHnameFieldNumber = 1,
    kSnameFieldNumber = 2,
    kMnameFieldNumber = 3,
    kErrorFieldNumber = 4,
    kSidFieldNumber = 7,
    kIdFieldNumber = 5,
    kStateFieldNumber = 6,
  };
  // string hname = 1;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // string sname = 2;
  void clear_sname();
  const std::string& sname() const;
  void set_sname(const std::string& value);
  void set_sname(std::string&& value);
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  std::string* mutable_sname();
  std::string* release_sname();
  void set_allocated_sname(std::string* sname);
  private:
  const std::string& _internal_sname() const;
  void _internal_set_sname(const std::string& value);
  std::string* _internal_mutable_sname();
  public:

  // string mname = 3;
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // string error = 4;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string sid = 7;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // int32 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .eCAL.pb.ServiceHeader.eCallState state = 6;
  void clear_state();
  ::eCAL::pb::ServiceHeader_eCallState state() const;
  void set_state(::eCAL::pb::ServiceHeader_eCallState value);
  private:
  ::eCAL::pb::ServiceHeader_eCallState _internal_state() const;
  void _internal_set_state(::eCAL::pb::ServiceHeader_eCallState value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.ServiceHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes request = 2;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const void* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // .eCAL.pb.ServiceHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::eCAL::pb::ServiceHeader& header() const;
  ::eCAL::pb::ServiceHeader* release_header();
  ::eCAL::pb::ServiceHeader* mutable_header();
  void set_allocated_header(::eCAL::pb::ServiceHeader* header);
  private:
  const ::eCAL::pb::ServiceHeader& _internal_header() const;
  ::eCAL::pb::ServiceHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::eCAL::pb::ServiceHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kRetStateFieldNumber = 3,
  };
  // bytes response = 2;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // .eCAL.pb.ServiceHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::eCAL::pb::ServiceHeader& header() const;
  ::eCAL::pb::ServiceHeader* release_header();
  ::eCAL::pb::ServiceHeader* mutable_header();
  void set_allocated_header(::eCAL::pb::ServiceHeader* header);
  private:
  const ::eCAL::pb::ServiceHeader& _internal_header() const;
  ::eCAL::pb::ServiceHeader* _internal_mutable_header();
  public:

  // int64 ret_state = 3;
  void clear_ret_state();
  ::PROTOBUF_NAMESPACE_ID::int64 ret_state() const;
  void set_ret_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ret_state() const;
  void _internal_set_ret_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::eCAL::pb::ServiceHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 ret_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Method :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Method) */ {
 public:
  Method();
  virtual ~Method();

  Method(const Method& from);
  Method(Method&& from) noexcept
    : Method() {
    *this = ::std::move(from);
  }

  inline Method& operator=(const Method& from) {
    CopyFrom(from);
    return *this;
  }
  inline Method& operator=(Method&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Method& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Method* internal_default_instance() {
    return reinterpret_cast<const Method*>(
               &_Method_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Method& a, Method& b) {
    a.Swap(&b);
  }
  inline void Swap(Method* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Method* New() const final {
    return CreateMaybeMessage<Method>(nullptr);
  }

  Method* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Method>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Method& from);
  void MergeFrom(const Method& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Method* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Method";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnameFieldNumber = 1,
    kReqTypeFieldNumber = 2,
    kRespTypeFieldNumber = 3,
    kReqDescFieldNumber = 5,
    kRespDescFieldNumber = 6,
    kCallCountFieldNumber = 4,
  };
  // string mname = 1;
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // string req_type = 2;
  void clear_req_type();
  const std::string& req_type() const;
  void set_req_type(const std::string& value);
  void set_req_type(std::string&& value);
  void set_req_type(const char* value);
  void set_req_type(const char* value, size_t size);
  std::string* mutable_req_type();
  std::string* release_req_type();
  void set_allocated_req_type(std::string* req_type);
  private:
  const std::string& _internal_req_type() const;
  void _internal_set_req_type(const std::string& value);
  std::string* _internal_mutable_req_type();
  public:

  // string resp_type = 3;
  void clear_resp_type();
  const std::string& resp_type() const;
  void set_resp_type(const std::string& value);
  void set_resp_type(std::string&& value);
  void set_resp_type(const char* value);
  void set_resp_type(const char* value, size_t size);
  std::string* mutable_resp_type();
  std::string* release_resp_type();
  void set_allocated_resp_type(std::string* resp_type);
  private:
  const std::string& _internal_resp_type() const;
  void _internal_set_resp_type(const std::string& value);
  std::string* _internal_mutable_resp_type();
  public:

  // bytes req_desc = 5;
  void clear_req_desc();
  const std::string& req_desc() const;
  void set_req_desc(const std::string& value);
  void set_req_desc(std::string&& value);
  void set_req_desc(const char* value);
  void set_req_desc(const void* value, size_t size);
  std::string* mutable_req_desc();
  std::string* release_req_desc();
  void set_allocated_req_desc(std::string* req_desc);
  private:
  const std::string& _internal_req_desc() const;
  void _internal_set_req_desc(const std::string& value);
  std::string* _internal_mutable_req_desc();
  public:

  // bytes resp_desc = 6;
  void clear_resp_desc();
  const std::string& resp_desc() const;
  void set_resp_desc(const std::string& value);
  void set_resp_desc(std::string&& value);
  void set_resp_desc(const char* value);
  void set_resp_desc(const void* value, size_t size);
  std::string* mutable_resp_desc();
  std::string* release_resp_desc();
  void set_allocated_resp_desc(std::string* resp_desc);
  private:
  const std::string& _internal_resp_desc() const;
  void _internal_set_resp_desc(const std::string& value);
  std::string* _internal_mutable_resp_desc();
  public:

  // int64 call_count = 4;
  void clear_call_count();
  ::PROTOBUF_NAMESPACE_ID::int64 call_count() const;
  void set_call_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_call_count() const;
  void _internal_set_call_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Method)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_desc_;
  ::PROTOBUF_NAMESPACE_ID::int64 call_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Service :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsFieldNumber = 8,
    kHnameFieldNumber = 2,
    kPnameFieldNumber = 3,
    kUnameFieldNumber = 4,
    kSnameFieldNumber = 6,
    kSidFieldNumber = 9,
    kRclockFieldNumber = 1,
    kPidFieldNumber = 5,
    kTcpPortFieldNumber = 7,
    kVersionFieldNumber = 10,
  };
  // repeated .eCAL.pb.Method methods = 8;
  int methods_size() const;
  private:
  int _internal_methods_size() const;
  public:
  void clear_methods();
  ::eCAL::pb::Method* mutable_methods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Method >*
      mutable_methods();
  private:
  const ::eCAL::pb::Method& _internal_methods(int index) const;
  ::eCAL::pb::Method* _internal_add_methods();
  public:
  const ::eCAL::pb::Method& methods(int index) const;
  ::eCAL::pb::Method* add_methods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Method >&
      methods() const;

  // string hname = 2;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // string pname = 3;
  void clear_pname();
  const std::string& pname() const;
  void set_pname(const std::string& value);
  void set_pname(std::string&& value);
  void set_pname(const char* value);
  void set_pname(const char* value, size_t size);
  std::string* mutable_pname();
  std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // string uname = 4;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string sname = 6;
  void clear_sname();
  const std::string& sname() const;
  void set_sname(const std::string& value);
  void set_sname(std::string&& value);
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  std::string* mutable_sname();
  std::string* release_sname();
  void set_allocated_sname(std::string* sname);
  private:
  const std::string& _internal_sname() const;
  void _internal_set_sname(const std::string& value);
  std::string* _internal_mutable_sname();
  public:

  // string sid = 9;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // int32 rclock = 1;
  void clear_rclock();
  ::PROTOBUF_NAMESPACE_ID::int32 rclock() const;
  void set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rclock() const;
  void _internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 5;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 tcp_port = 7;
  void clear_tcp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcp_port() const;
  void set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcp_port() const;
  void _internal_set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 10;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Service)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Method > methods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Client :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Client) */ {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return CreateMaybeMessage<Client>(nullptr);
  }

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Client";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHnameFieldNumber = 2,
    kPnameFieldNumber = 3,
    kUnameFieldNumber = 4,
    kSnameFieldNumber = 6,
    kSidFieldNumber = 7,
    kRclockFieldNumber = 1,
    kPidFieldNumber = 5,
    kVersionFieldNumber = 8,
  };
  // string hname = 2;
  void clear_hname();
  const std::string& hname() const;
  void set_hname(const std::string& value);
  void set_hname(std::string&& value);
  void set_hname(const char* value);
  void set_hname(const char* value, size_t size);
  std::string* mutable_hname();
  std::string* release_hname();
  void set_allocated_hname(std::string* hname);
  private:
  const std::string& _internal_hname() const;
  void _internal_set_hname(const std::string& value);
  std::string* _internal_mutable_hname();
  public:

  // string pname = 3;
  void clear_pname();
  const std::string& pname() const;
  void set_pname(const std::string& value);
  void set_pname(std::string&& value);
  void set_pname(const char* value);
  void set_pname(const char* value, size_t size);
  std::string* mutable_pname();
  std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // string uname = 4;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string sname = 6;
  void clear_sname();
  const std::string& sname() const;
  void set_sname(const std::string& value);
  void set_sname(std::string&& value);
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  std::string* mutable_sname();
  std::string* release_sname();
  void set_allocated_sname(std::string* sname);
  private:
  const std::string& _internal_sname() const;
  void _internal_set_sname(const std::string& value);
  std::string* _internal_mutable_sname();
  public:

  // string sid = 7;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // int32 rclock = 1;
  void clear_rclock();
  ::PROTOBUF_NAMESPACE_ID::int32 rclock() const;
  void set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rclock() const;
  void _internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 5;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 version = 8;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Client)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceHeader

// string hname = 1;
inline void ServiceHeader::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceHeader::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.hname)
  return _internal_hname();
}
inline void ServiceHeader::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.hname)
}
inline std::string* ServiceHeader::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.ServiceHeader.hname)
  return _internal_mutable_hname();
}
inline const std::string& ServiceHeader::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void ServiceHeader::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceHeader::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.ServiceHeader.hname)
}
inline void ServiceHeader::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.ServiceHeader.hname)
}
inline void ServiceHeader::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.ServiceHeader.hname)
}
inline std::string* ServiceHeader::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceHeader::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.ServiceHeader.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceHeader::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.ServiceHeader.hname)
}

// string sname = 2;
inline void ServiceHeader::clear_sname() {
  sname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceHeader::sname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.sname)
  return _internal_sname();
}
inline void ServiceHeader::set_sname(const std::string& value) {
  _internal_set_sname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.sname)
}
inline std::string* ServiceHeader::mutable_sname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.ServiceHeader.sname)
  return _internal_mutable_sname();
}
inline const std::string& ServiceHeader::_internal_sname() const {
  return sname_.GetNoArena();
}
inline void ServiceHeader::_internal_set_sname(const std::string& value) {
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceHeader::set_sname(std::string&& value) {
  
  sname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.ServiceHeader.sname)
}
inline void ServiceHeader::set_sname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.ServiceHeader.sname)
}
inline void ServiceHeader::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.ServiceHeader.sname)
}
inline std::string* ServiceHeader::_internal_mutable_sname() {
  
  return sname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceHeader::release_sname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.ServiceHeader.sname)
  
  return sname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceHeader::set_allocated_sname(std::string* sname) {
  if (sname != nullptr) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.ServiceHeader.sname)
}

// string sid = 7;
inline void ServiceHeader::clear_sid() {
  sid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceHeader::sid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.sid)
  return _internal_sid();
}
inline void ServiceHeader::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.sid)
}
inline std::string* ServiceHeader::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.ServiceHeader.sid)
  return _internal_mutable_sid();
}
inline const std::string& ServiceHeader::_internal_sid() const {
  return sid_.GetNoArena();
}
inline void ServiceHeader::_internal_set_sid(const std::string& value) {
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceHeader::set_sid(std::string&& value) {
  
  sid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.ServiceHeader.sid)
}
inline void ServiceHeader::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.ServiceHeader.sid)
}
inline void ServiceHeader::set_sid(const char* value, size_t size) {
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.ServiceHeader.sid)
}
inline std::string* ServiceHeader::_internal_mutable_sid() {
  
  return sid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceHeader::release_sid() {
  // @@protoc_insertion_point(field_release:eCAL.pb.ServiceHeader.sid)
  
  return sid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceHeader::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.ServiceHeader.sid)
}

// string mname = 3;
inline void ServiceHeader::clear_mname() {
  mname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceHeader::mname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.mname)
  return _internal_mname();
}
inline void ServiceHeader::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.mname)
}
inline std::string* ServiceHeader::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.ServiceHeader.mname)
  return _internal_mutable_mname();
}
inline const std::string& ServiceHeader::_internal_mname() const {
  return mname_.GetNoArena();
}
inline void ServiceHeader::_internal_set_mname(const std::string& value) {
  
  mname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceHeader::set_mname(std::string&& value) {
  
  mname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.ServiceHeader.mname)
}
inline void ServiceHeader::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.ServiceHeader.mname)
}
inline void ServiceHeader::set_mname(const char* value, size_t size) {
  
  mname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.ServiceHeader.mname)
}
inline std::string* ServiceHeader::_internal_mutable_mname() {
  
  return mname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceHeader::release_mname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.ServiceHeader.mname)
  
  return mname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceHeader::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    
  } else {
    
  }
  mname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.ServiceHeader.mname)
}

// string error = 4;
inline void ServiceHeader::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceHeader::error() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.error)
  return _internal_error();
}
inline void ServiceHeader::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.error)
}
inline std::string* ServiceHeader::mutable_error() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.ServiceHeader.error)
  return _internal_mutable_error();
}
inline const std::string& ServiceHeader::_internal_error() const {
  return error_.GetNoArena();
}
inline void ServiceHeader::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceHeader::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.ServiceHeader.error)
}
inline void ServiceHeader::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.ServiceHeader.error)
}
inline void ServiceHeader::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.ServiceHeader.error)
}
inline std::string* ServiceHeader::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceHeader::release_error() {
  // @@protoc_insertion_point(field_release:eCAL.pb.ServiceHeader.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceHeader::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.ServiceHeader.error)
}

// int32 id = 5;
inline void ServiceHeader::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceHeader::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceHeader::id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.id)
  return _internal_id();
}
inline void ServiceHeader::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ServiceHeader::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.id)
}

// .eCAL.pb.ServiceHeader.eCallState state = 6;
inline void ServiceHeader::clear_state() {
  state_ = 0;
}
inline ::eCAL::pb::ServiceHeader_eCallState ServiceHeader::_internal_state() const {
  return static_cast< ::eCAL::pb::ServiceHeader_eCallState >(state_);
}
inline ::eCAL::pb::ServiceHeader_eCallState ServiceHeader::state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.ServiceHeader.state)
  return _internal_state();
}
inline void ServiceHeader::_internal_set_state(::eCAL::pb::ServiceHeader_eCallState value) {
  
  state_ = value;
}
inline void ServiceHeader::set_state(::eCAL::pb::ServiceHeader_eCallState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.ServiceHeader.state)
}

// -------------------------------------------------------------------

// Request

// .eCAL.pb.ServiceHeader header = 1;
inline bool Request::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Request::has_header() const {
  return _internal_has_header();
}
inline void Request::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::eCAL::pb::ServiceHeader& Request::_internal_header() const {
  const ::eCAL::pb::ServiceHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::ServiceHeader*>(
      &::eCAL::pb::_ServiceHeader_default_instance_);
}
inline const ::eCAL::pb::ServiceHeader& Request::header() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Request.header)
  return _internal_header();
}
inline ::eCAL::pb::ServiceHeader* Request::release_header() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Request.header)
  
  ::eCAL::pb::ServiceHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::eCAL::pb::ServiceHeader* Request::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::ServiceHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::eCAL::pb::ServiceHeader* Request::mutable_header() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Request.header)
  return _internal_mutable_header();
}
inline void Request::set_allocated_header(::eCAL::pb::ServiceHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Request.header)
}

// bytes request = 2;
inline void Request::clear_request() {
  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request::request() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Request.request)
  return _internal_request();
}
inline void Request::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Request.request)
}
inline std::string* Request::mutable_request() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Request.request)
  return _internal_mutable_request();
}
inline const std::string& Request::_internal_request() const {
  return request_.GetNoArena();
}
inline void Request::_internal_set_request(const std::string& value) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_request(std::string&& value) {
  
  request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Request.request)
}
inline void Request::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Request.request)
}
inline void Request::set_request(const void* value, size_t size) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Request.request)
}
inline std::string* Request::_internal_mutable_request() {
  
  return request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_request() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Request.request)
  
  return request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Request.request)
}

// -------------------------------------------------------------------

// Response

// .eCAL.pb.ServiceHeader header = 1;
inline bool Response::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Response::has_header() const {
  return _internal_has_header();
}
inline void Response::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::eCAL::pb::ServiceHeader& Response::_internal_header() const {
  const ::eCAL::pb::ServiceHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::ServiceHeader*>(
      &::eCAL::pb::_ServiceHeader_default_instance_);
}
inline const ::eCAL::pb::ServiceHeader& Response::header() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Response.header)
  return _internal_header();
}
inline ::eCAL::pb::ServiceHeader* Response::release_header() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Response.header)
  
  ::eCAL::pb::ServiceHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::eCAL::pb::ServiceHeader* Response::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::ServiceHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::eCAL::pb::ServiceHeader* Response::mutable_header() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Response.header)
  return _internal_mutable_header();
}
inline void Response::set_allocated_header(::eCAL::pb::ServiceHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Response.header)
}

// bytes response = 2;
inline void Response::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::response() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Response.response)
  return _internal_response();
}
inline void Response::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Response.response)
}
inline std::string* Response::mutable_response() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Response.response)
  return _internal_mutable_response();
}
inline const std::string& Response::_internal_response() const {
  return response_.GetNoArena();
}
inline void Response::_internal_set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Response.response)
}
inline void Response::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Response.response)
}
inline void Response::set_response(const void* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Response.response)
}
inline std::string* Response::_internal_mutable_response() {
  
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_response() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Response.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Response.response)
}

// int64 ret_state = 3;
inline void Response::clear_ret_state() {
  ret_state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_ret_state() const {
  return ret_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::ret_state() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Response.ret_state)
  return _internal_ret_state();
}
inline void Response::_internal_set_ret_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ret_state_ = value;
}
inline void Response::set_ret_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ret_state(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Response.ret_state)
}

// -------------------------------------------------------------------

// Method

// string mname = 1;
inline void Method::clear_mname() {
  mname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Method::mname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Method.mname)
  return _internal_mname();
}
inline void Method::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Method.mname)
}
inline std::string* Method::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Method.mname)
  return _internal_mutable_mname();
}
inline const std::string& Method::_internal_mname() const {
  return mname_.GetNoArena();
}
inline void Method::_internal_set_mname(const std::string& value) {
  
  mname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Method::set_mname(std::string&& value) {
  
  mname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Method.mname)
}
inline void Method::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Method.mname)
}
inline void Method::set_mname(const char* value, size_t size) {
  
  mname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Method.mname)
}
inline std::string* Method::_internal_mutable_mname() {
  
  return mname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Method::release_mname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Method.mname)
  
  return mname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    
  } else {
    
  }
  mname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Method.mname)
}

// string req_type = 2;
inline void Method::clear_req_type() {
  req_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Method::req_type() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Method.req_type)
  return _internal_req_type();
}
inline void Method::set_req_type(const std::string& value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Method.req_type)
}
inline std::string* Method::mutable_req_type() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Method.req_type)
  return _internal_mutable_req_type();
}
inline const std::string& Method::_internal_req_type() const {
  return req_type_.GetNoArena();
}
inline void Method::_internal_set_req_type(const std::string& value) {
  
  req_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Method::set_req_type(std::string&& value) {
  
  req_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Method.req_type)
}
inline void Method::set_req_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Method.req_type)
}
inline void Method::set_req_type(const char* value, size_t size) {
  
  req_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Method.req_type)
}
inline std::string* Method::_internal_mutable_req_type() {
  
  return req_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Method::release_req_type() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Method.req_type)
  
  return req_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_req_type(std::string* req_type) {
  if (req_type != nullptr) {
    
  } else {
    
  }
  req_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req_type);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Method.req_type)
}

// bytes req_desc = 5;
inline void Method::clear_req_desc() {
  req_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Method::req_desc() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Method.req_desc)
  return _internal_req_desc();
}
inline void Method::set_req_desc(const std::string& value) {
  _internal_set_req_desc(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Method.req_desc)
}
inline std::string* Method::mutable_req_desc() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Method.req_desc)
  return _internal_mutable_req_desc();
}
inline const std::string& Method::_internal_req_desc() const {
  return req_desc_.GetNoArena();
}
inline void Method::_internal_set_req_desc(const std::string& value) {
  
  req_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Method::set_req_desc(std::string&& value) {
  
  req_desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Method.req_desc)
}
inline void Method::set_req_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Method.req_desc)
}
inline void Method::set_req_desc(const void* value, size_t size) {
  
  req_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Method.req_desc)
}
inline std::string* Method::_internal_mutable_req_desc() {
  
  return req_desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Method::release_req_desc() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Method.req_desc)
  
  return req_desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_req_desc(std::string* req_desc) {
  if (req_desc != nullptr) {
    
  } else {
    
  }
  req_desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req_desc);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Method.req_desc)
}

// string resp_type = 3;
inline void Method::clear_resp_type() {
  resp_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Method::resp_type() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Method.resp_type)
  return _internal_resp_type();
}
inline void Method::set_resp_type(const std::string& value) {
  _internal_set_resp_type(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Method.resp_type)
}
inline std::string* Method::mutable_resp_type() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Method.resp_type)
  return _internal_mutable_resp_type();
}
inline const std::string& Method::_internal_resp_type() const {
  return resp_type_.GetNoArena();
}
inline void Method::_internal_set_resp_type(const std::string& value) {
  
  resp_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Method::set_resp_type(std::string&& value) {
  
  resp_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Method.resp_type)
}
inline void Method::set_resp_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resp_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Method.resp_type)
}
inline void Method::set_resp_type(const char* value, size_t size) {
  
  resp_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Method.resp_type)
}
inline std::string* Method::_internal_mutable_resp_type() {
  
  return resp_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Method::release_resp_type() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Method.resp_type)
  
  return resp_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_resp_type(std::string* resp_type) {
  if (resp_type != nullptr) {
    
  } else {
    
  }
  resp_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resp_type);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Method.resp_type)
}

// bytes resp_desc = 6;
inline void Method::clear_resp_desc() {
  resp_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Method::resp_desc() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Method.resp_desc)
  return _internal_resp_desc();
}
inline void Method::set_resp_desc(const std::string& value) {
  _internal_set_resp_desc(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Method.resp_desc)
}
inline std::string* Method::mutable_resp_desc() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Method.resp_desc)
  return _internal_mutable_resp_desc();
}
inline const std::string& Method::_internal_resp_desc() const {
  return resp_desc_.GetNoArena();
}
inline void Method::_internal_set_resp_desc(const std::string& value) {
  
  resp_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Method::set_resp_desc(std::string&& value) {
  
  resp_desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Method.resp_desc)
}
inline void Method::set_resp_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resp_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Method.resp_desc)
}
inline void Method::set_resp_desc(const void* value, size_t size) {
  
  resp_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Method.resp_desc)
}
inline std::string* Method::_internal_mutable_resp_desc() {
  
  return resp_desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Method::release_resp_desc() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Method.resp_desc)
  
  return resp_desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_resp_desc(std::string* resp_desc) {
  if (resp_desc != nullptr) {
    
  } else {
    
  }
  resp_desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resp_desc);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Method.resp_desc)
}

// int64 call_count = 4;
inline void Method::clear_call_count() {
  call_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Method::_internal_call_count() const {
  return call_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Method::call_count() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Method.call_count)
  return _internal_call_count();
}
inline void Method::_internal_set_call_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  call_count_ = value;
}
inline void Method::set_call_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_call_count(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Method.call_count)
}

// -------------------------------------------------------------------

// Service

// int32 rclock = 1;
inline void Service::clear_rclock() {
  rclock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Service::_internal_rclock() const {
  return rclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Service::rclock() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.rclock)
  return _internal_rclock();
}
inline void Service::_internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rclock_ = value;
}
inline void Service::set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rclock(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.rclock)
}

// string hname = 2;
inline void Service::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.hname)
  return _internal_hname();
}
inline void Service::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.hname)
}
inline std::string* Service::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Service.hname)
  return _internal_mutable_hname();
}
inline const std::string& Service::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void Service::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Service.hname)
}
inline void Service::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Service.hname)
}
inline void Service::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Service.hname)
}
inline std::string* Service::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Service.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Service.hname)
}

// string pname = 3;
inline void Service::clear_pname() {
  pname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::pname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.pname)
  return _internal_pname();
}
inline void Service::set_pname(const std::string& value) {
  _internal_set_pname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.pname)
}
inline std::string* Service::mutable_pname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Service.pname)
  return _internal_mutable_pname();
}
inline const std::string& Service::_internal_pname() const {
  return pname_.GetNoArena();
}
inline void Service::_internal_set_pname(const std::string& value) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_pname(std::string&& value) {
  
  pname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Service.pname)
}
inline void Service::set_pname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Service.pname)
}
inline void Service::set_pname(const char* value, size_t size) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Service.pname)
}
inline std::string* Service::_internal_mutable_pname() {
  
  return pname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_pname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Service.pname)
  
  return pname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Service.pname)
}

// string uname = 4;
inline void Service::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::uname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.uname)
  return _internal_uname();
}
inline void Service::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.uname)
}
inline std::string* Service::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Service.uname)
  return _internal_mutable_uname();
}
inline const std::string& Service::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void Service::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Service.uname)
}
inline void Service::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Service.uname)
}
inline void Service::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Service.uname)
}
inline std::string* Service::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_uname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Service.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Service.uname)
}

// int32 pid = 5;
inline void Service::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Service::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Service::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.pid)
  return _internal_pid();
}
inline void Service::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Service::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.pid)
}

// string sname = 6;
inline void Service::clear_sname() {
  sname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::sname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.sname)
  return _internal_sname();
}
inline void Service::set_sname(const std::string& value) {
  _internal_set_sname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.sname)
}
inline std::string* Service::mutable_sname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Service.sname)
  return _internal_mutable_sname();
}
inline const std::string& Service::_internal_sname() const {
  return sname_.GetNoArena();
}
inline void Service::_internal_set_sname(const std::string& value) {
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_sname(std::string&& value) {
  
  sname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Service.sname)
}
inline void Service::set_sname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Service.sname)
}
inline void Service::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Service.sname)
}
inline std::string* Service::_internal_mutable_sname() {
  
  return sname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_sname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Service.sname)
  
  return sname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_sname(std::string* sname) {
  if (sname != nullptr) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Service.sname)
}

// string sid = 9;
inline void Service::clear_sid() {
  sid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::sid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.sid)
  return _internal_sid();
}
inline void Service::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.sid)
}
inline std::string* Service::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Service.sid)
  return _internal_mutable_sid();
}
inline const std::string& Service::_internal_sid() const {
  return sid_.GetNoArena();
}
inline void Service::_internal_set_sid(const std::string& value) {
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_sid(std::string&& value) {
  
  sid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Service.sid)
}
inline void Service::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Service.sid)
}
inline void Service::set_sid(const char* value, size_t size) {
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Service.sid)
}
inline std::string* Service::_internal_mutable_sid() {
  
  return sid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_sid() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Service.sid)
  
  return sid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Service.sid)
}

// repeated .eCAL.pb.Method methods = 8;
inline int Service::_internal_methods_size() const {
  return methods_.size();
}
inline int Service::methods_size() const {
  return _internal_methods_size();
}
inline void Service::clear_methods() {
  methods_.Clear();
}
inline ::eCAL::pb::Method* Service::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Service.methods)
  return methods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Method >*
Service::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.Service.methods)
  return &methods_;
}
inline const ::eCAL::pb::Method& Service::_internal_methods(int index) const {
  return methods_.Get(index);
}
inline const ::eCAL::pb::Method& Service::methods(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.methods)
  return _internal_methods(index);
}
inline ::eCAL::pb::Method* Service::_internal_add_methods() {
  return methods_.Add();
}
inline ::eCAL::pb::Method* Service::add_methods() {
  // @@protoc_insertion_point(field_add:eCAL.pb.Service.methods)
  return _internal_add_methods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Method >&
Service::methods() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.Service.methods)
  return methods_;
}

// uint32 version = 10;
inline void Service::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::version() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.version)
  return _internal_version();
}
inline void Service::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Service::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.version)
}

// uint32 tcp_port = 7;
inline void Service::clear_tcp_port() {
  tcp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_tcp_port() const {
  return tcp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::tcp_port() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Service.tcp_port)
  return _internal_tcp_port();
}
inline void Service::_internal_set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcp_port_ = value;
}
inline void Service::set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcp_port(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Service.tcp_port)
}

// -------------------------------------------------------------------

// Client

// int32 rclock = 1;
inline void Client::clear_rclock() {
  rclock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client::_internal_rclock() const {
  return rclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client::rclock() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.rclock)
  return _internal_rclock();
}
inline void Client::_internal_set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rclock_ = value;
}
inline void Client::set_rclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rclock(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.rclock)
}

// string hname = 2;
inline void Client::clear_hname() {
  hname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::hname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.hname)
  return _internal_hname();
}
inline void Client::set_hname(const std::string& value) {
  _internal_set_hname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.hname)
}
inline std::string* Client::mutable_hname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Client.hname)
  return _internal_mutable_hname();
}
inline const std::string& Client::_internal_hname() const {
  return hname_.GetNoArena();
}
inline void Client::_internal_set_hname(const std::string& value) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_hname(std::string&& value) {
  
  hname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Client.hname)
}
inline void Client::set_hname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Client.hname)
}
inline void Client::set_hname(const char* value, size_t size) {
  
  hname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Client.hname)
}
inline std::string* Client::_internal_mutable_hname() {
  
  return hname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_hname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Client.hname)
  
  return hname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_hname(std::string* hname) {
  if (hname != nullptr) {
    
  } else {
    
  }
  hname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Client.hname)
}

// string pname = 3;
inline void Client::clear_pname() {
  pname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::pname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.pname)
  return _internal_pname();
}
inline void Client::set_pname(const std::string& value) {
  _internal_set_pname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.pname)
}
inline std::string* Client::mutable_pname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Client.pname)
  return _internal_mutable_pname();
}
inline const std::string& Client::_internal_pname() const {
  return pname_.GetNoArena();
}
inline void Client::_internal_set_pname(const std::string& value) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_pname(std::string&& value) {
  
  pname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Client.pname)
}
inline void Client::set_pname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Client.pname)
}
inline void Client::set_pname(const char* value, size_t size) {
  
  pname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Client.pname)
}
inline std::string* Client::_internal_mutable_pname() {
  
  return pname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_pname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Client.pname)
  
  return pname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Client.pname)
}

// string uname = 4;
inline void Client::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::uname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.uname)
  return _internal_uname();
}
inline void Client::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.uname)
}
inline std::string* Client::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Client.uname)
  return _internal_mutable_uname();
}
inline const std::string& Client::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void Client::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Client.uname)
}
inline void Client::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Client.uname)
}
inline void Client::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Client.uname)
}
inline std::string* Client::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_uname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Client.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Client.uname)
}

// int32 pid = 5;
inline void Client::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client::pid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.pid)
  return _internal_pid();
}
inline void Client::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Client::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.pid)
}

// string sname = 6;
inline void Client::clear_sname() {
  sname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::sname() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.sname)
  return _internal_sname();
}
inline void Client::set_sname(const std::string& value) {
  _internal_set_sname(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.sname)
}
inline std::string* Client::mutable_sname() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Client.sname)
  return _internal_mutable_sname();
}
inline const std::string& Client::_internal_sname() const {
  return sname_.GetNoArena();
}
inline void Client::_internal_set_sname(const std::string& value) {
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_sname(std::string&& value) {
  
  sname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Client.sname)
}
inline void Client::set_sname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Client.sname)
}
inline void Client::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Client.sname)
}
inline std::string* Client::_internal_mutable_sname() {
  
  return sname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_sname() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Client.sname)
  
  return sname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_sname(std::string* sname) {
  if (sname != nullptr) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Client.sname)
}

// string sid = 7;
inline void Client::clear_sid() {
  sid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::sid() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.sid)
  return _internal_sid();
}
inline void Client::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.sid)
}
inline std::string* Client::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Client.sid)
  return _internal_mutable_sid();
}
inline const std::string& Client::_internal_sid() const {
  return sid_.GetNoArena();
}
inline void Client::_internal_set_sid(const std::string& value) {
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_sid(std::string&& value) {
  
  sid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Client.sid)
}
inline void Client::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Client.sid)
}
inline void Client::set_sid(const char* value, size_t size) {
  
  sid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Client.sid)
}
inline std::string* Client::_internal_mutable_sid() {
  
  return sid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_sid() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Client.sid)
  
  return sid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Client.sid)
}

// uint32 version = 8;
inline void Client::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Client::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Client::version() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Client.version)
  return _internal_version();
}
inline void Client::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Client::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Client.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::ServiceHeader_eCallState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::ServiceHeader_eCallState>() {
  return ::eCAL::pb::ServiceHeader_eCallState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fservice_2eproto
