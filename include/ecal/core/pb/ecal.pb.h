// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecal/core/pb/ecal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fecal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fecal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecal/core/pb/host.pb.h"
#include "ecal/core/pb/process.pb.h"
#include "ecal/core/pb/service.pb.h"
#include "ecal/core/pb/topic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecal_2fcore_2fpb_2fecal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecal_2fcore_2fpb_2fecal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto;
namespace eCAL {
namespace pb {
class Content;
class ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class SampleList;
class SampleListDefaultTypeInternal;
extern SampleListDefaultTypeInternal _SampleList_default_instance_;
}  // namespace pb
}  // namespace eCAL
PROTOBUF_NAMESPACE_OPEN
template<> ::eCAL::pb::Content* Arena::CreateMaybeMessage<::eCAL::pb::Content>(Arena*);
template<> ::eCAL::pb::Sample* Arena::CreateMaybeMessage<::eCAL::pb::Sample>(Arena*);
template<> ::eCAL::pb::SampleList* Arena::CreateMaybeMessage<::eCAL::pb::SampleList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eCAL {
namespace pb {

enum eCmdType : int {
  bct_none = 0,
  bct_set_sample = 1,
  bct_reg_publisher = 2,
  bct_reg_subscriber = 3,
  bct_reg_process = 4,
  bct_reg_service = 5,
  bct_reg_client = 6,
  bct_unreg_publisher = 12,
  bct_unreg_subscriber = 13,
  bct_unreg_process = 14,
  bct_unreg_service = 15,
  bct_unreg_client = 16,
  eCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eCmdType_IsValid(int value);
constexpr eCmdType eCmdType_MIN = bct_none;
constexpr eCmdType eCmdType_MAX = bct_unreg_client;
constexpr int eCmdType_ARRAYSIZE = eCmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eCmdType_descriptor();
template<typename T>
inline const std::string& eCmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eCmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eCmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eCmdType_descriptor(), enum_t_value);
}
inline bool eCmdType_Parse(
    const std::string& name, eCmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eCmdType>(
    eCmdType_descriptor(), name, value);
}
// ===================================================================

class Content :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Content) */ {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Content& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Content* New() const final {
    return CreateMaybeMessage<Content>(nullptr);
  }

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Content";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kIdFieldNumber = 1,
    kClockFieldNumber = 2,
    kTimeFieldNumber = 3,
    kHashFieldNumber = 7,
    kSizeFieldNumber = 6,
  };
  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 clock = 2;
  void clear_clock();
  ::PROTOBUF_NAMESPACE_ID::int64 clock() const;
  void set_clock(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_clock() const;
  void _internal_set_clock(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 hash = 7;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::int64 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 size = 6;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Content)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 clock_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fecal_2eproto;
};
// -------------------------------------------------------------------

class Sample :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.Sample) */ {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.Sample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingFieldNumber = 8,
    kHostFieldNumber = 2,
    kProcessFieldNumber = 3,
    kServiceFieldNumber = 4,
    kTopicFieldNumber = 5,
    kContentFieldNumber = 6,
    kClientFieldNumber = 7,
    kCmdTypeFieldNumber = 1,
  };
  // bytes padding = 8;
  void clear_padding();
  const std::string& padding() const;
  void set_padding(const std::string& value);
  void set_padding(std::string&& value);
  void set_padding(const char* value);
  void set_padding(const void* value, size_t size);
  std::string* mutable_padding();
  std::string* release_padding();
  void set_allocated_padding(std::string* padding);
  private:
  const std::string& _internal_padding() const;
  void _internal_set_padding(const std::string& value);
  std::string* _internal_mutable_padding();
  public:

  // .eCAL.pb.Host host = 2;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::eCAL::pb::Host& host() const;
  ::eCAL::pb::Host* release_host();
  ::eCAL::pb::Host* mutable_host();
  void set_allocated_host(::eCAL::pb::Host* host);
  private:
  const ::eCAL::pb::Host& _internal_host() const;
  ::eCAL::pb::Host* _internal_mutable_host();
  public:

  // .eCAL.pb.Process process = 3;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::eCAL::pb::Process& process() const;
  ::eCAL::pb::Process* release_process();
  ::eCAL::pb::Process* mutable_process();
  void set_allocated_process(::eCAL::pb::Process* process);
  private:
  const ::eCAL::pb::Process& _internal_process() const;
  ::eCAL::pb::Process* _internal_mutable_process();
  public:

  // .eCAL.pb.Service service = 4;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::eCAL::pb::Service& service() const;
  ::eCAL::pb::Service* release_service();
  ::eCAL::pb::Service* mutable_service();
  void set_allocated_service(::eCAL::pb::Service* service);
  private:
  const ::eCAL::pb::Service& _internal_service() const;
  ::eCAL::pb::Service* _internal_mutable_service();
  public:

  // .eCAL.pb.Topic topic = 5;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::eCAL::pb::Topic& topic() const;
  ::eCAL::pb::Topic* release_topic();
  ::eCAL::pb::Topic* mutable_topic();
  void set_allocated_topic(::eCAL::pb::Topic* topic);
  private:
  const ::eCAL::pb::Topic& _internal_topic() const;
  ::eCAL::pb::Topic* _internal_mutable_topic();
  public:

  // .eCAL.pb.Content content = 6;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::eCAL::pb::Content& content() const;
  ::eCAL::pb::Content* release_content();
  ::eCAL::pb::Content* mutable_content();
  void set_allocated_content(::eCAL::pb::Content* content);
  private:
  const ::eCAL::pb::Content& _internal_content() const;
  ::eCAL::pb::Content* _internal_mutable_content();
  public:

  // .eCAL.pb.Client client = 7;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::eCAL::pb::Client& client() const;
  ::eCAL::pb::Client* release_client();
  ::eCAL::pb::Client* mutable_client();
  void set_allocated_client(::eCAL::pb::Client* client);
  private:
  const ::eCAL::pb::Client& _internal_client() const;
  ::eCAL::pb::Client* _internal_mutable_client();
  public:

  // .eCAL.pb.eCmdType cmd_type = 1;
  void clear_cmd_type();
  ::eCAL::pb::eCmdType cmd_type() const;
  void set_cmd_type(::eCAL::pb::eCmdType value);
  private:
  ::eCAL::pb::eCmdType _internal_cmd_type() const;
  void _internal_set_cmd_type(::eCAL::pb::eCmdType value);
  public:

  // @@protoc_insertion_point(class_scope:eCAL.pb.Sample)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_;
  ::eCAL::pb::Host* host_;
  ::eCAL::pb::Process* process_;
  ::eCAL::pb::Service* service_;
  ::eCAL::pb::Topic* topic_;
  ::eCAL::pb::Content* content_;
  ::eCAL::pb::Client* client_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fecal_2eproto;
};
// -------------------------------------------------------------------

class SampleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eCAL.pb.SampleList) */ {
 public:
  SampleList();
  virtual ~SampleList();

  SampleList(const SampleList& from);
  SampleList(SampleList&& from) noexcept
    : SampleList() {
    *this = ::std::move(from);
  }

  inline SampleList& operator=(const SampleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleList& operator=(SampleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleList* internal_default_instance() {
    return reinterpret_cast<const SampleList*>(
               &_SampleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SampleList& a, SampleList& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleList* New() const final {
    return CreateMaybeMessage<SampleList>(nullptr);
  }

  SampleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleList& from);
  void MergeFrom(const SampleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eCAL.pb.SampleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto);
    return ::descriptor_table_ecal_2fcore_2fpb_2fecal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .eCAL.pb.Sample samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::eCAL::pb::Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Sample >*
      mutable_samples();
  private:
  const ::eCAL::pb::Sample& _internal_samples(int index) const;
  ::eCAL::pb::Sample* _internal_add_samples();
  public:
  const ::eCAL::pb::Sample& samples(int index) const;
  ::eCAL::pb::Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Sample >&
      samples() const;

  // @@protoc_insertion_point(class_scope:eCAL.pb.SampleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Sample > samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecal_2fcore_2fpb_2fecal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Content

// int64 id = 1;
inline void Content::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::id() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Content.id)
  return _internal_id();
}
inline void Content::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Content::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Content.id)
}

// int64 clock = 2;
inline void Content::clear_clock() {
  clock_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::_internal_clock() const {
  return clock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::clock() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Content.clock)
  return _internal_clock();
}
inline void Content::_internal_set_clock(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clock_ = value;
}
inline void Content::set_clock(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_clock(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Content.clock)
}

// int64 time = 3;
inline void Content::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::time() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Content.time)
  return _internal_time();
}
inline void Content::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Content::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Content.time)
}

// bytes payload = 4;
inline void Content::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Content::payload() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Content.payload)
  return _internal_payload();
}
inline void Content::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Content.payload)
}
inline std::string* Content::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Content.payload)
  return _internal_mutable_payload();
}
inline const std::string& Content::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void Content::_internal_set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Content::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Content.payload)
}
inline void Content::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Content.payload)
}
inline void Content::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Content.payload)
}
inline std::string* Content::_internal_mutable_payload() {
  
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Content::release_payload() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Content.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Content::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Content.payload)
}

// int32 size = 6;
inline void Content::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Content::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Content::size() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Content.size)
  return _internal_size();
}
inline void Content::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Content::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Content.size)
}

// int64 hash = 7;
inline void Content::clear_hash() {
  hash_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::hash() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Content.hash)
  return _internal_hash();
}
inline void Content::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  hash_ = value;
}
inline void Content::set_hash(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Content.hash)
}

// -------------------------------------------------------------------

// Sample

// .eCAL.pb.eCmdType cmd_type = 1;
inline void Sample::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::eCAL::pb::eCmdType Sample::_internal_cmd_type() const {
  return static_cast< ::eCAL::pb::eCmdType >(cmd_type_);
}
inline ::eCAL::pb::eCmdType Sample::cmd_type() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.cmd_type)
  return _internal_cmd_type();
}
inline void Sample::_internal_set_cmd_type(::eCAL::pb::eCmdType value) {
  
  cmd_type_ = value;
}
inline void Sample::set_cmd_type(::eCAL::pb::eCmdType value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Sample.cmd_type)
}

// .eCAL.pb.Host host = 2;
inline bool Sample::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool Sample::has_host() const {
  return _internal_has_host();
}
inline const ::eCAL::pb::Host& Sample::_internal_host() const {
  const ::eCAL::pb::Host* p = host_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::Host*>(
      &::eCAL::pb::_Host_default_instance_);
}
inline const ::eCAL::pb::Host& Sample::host() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.host)
  return _internal_host();
}
inline ::eCAL::pb::Host* Sample::release_host() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.host)
  
  ::eCAL::pb::Host* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::eCAL::pb::Host* Sample::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::Host>(GetArenaNoVirtual());
    host_ = p;
  }
  return host_;
}
inline ::eCAL::pb::Host* Sample::mutable_host() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.host)
  return _internal_mutable_host();
}
inline void Sample::set_allocated_host(::eCAL::pb::Host* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.host)
}

// .eCAL.pb.Process process = 3;
inline bool Sample::_internal_has_process() const {
  return this != internal_default_instance() && process_ != nullptr;
}
inline bool Sample::has_process() const {
  return _internal_has_process();
}
inline const ::eCAL::pb::Process& Sample::_internal_process() const {
  const ::eCAL::pb::Process* p = process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::Process*>(
      &::eCAL::pb::_Process_default_instance_);
}
inline const ::eCAL::pb::Process& Sample::process() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.process)
  return _internal_process();
}
inline ::eCAL::pb::Process* Sample::release_process() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.process)
  
  ::eCAL::pb::Process* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::eCAL::pb::Process* Sample::_internal_mutable_process() {
  
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::Process>(GetArenaNoVirtual());
    process_ = p;
  }
  return process_;
}
inline ::eCAL::pb::Process* Sample::mutable_process() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.process)
  return _internal_mutable_process();
}
inline void Sample::set_allocated_process(::eCAL::pb::Process* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    
  } else {
    
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.process)
}

// .eCAL.pb.Service service = 4;
inline bool Sample::_internal_has_service() const {
  return this != internal_default_instance() && service_ != nullptr;
}
inline bool Sample::has_service() const {
  return _internal_has_service();
}
inline const ::eCAL::pb::Service& Sample::_internal_service() const {
  const ::eCAL::pb::Service* p = service_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::Service*>(
      &::eCAL::pb::_Service_default_instance_);
}
inline const ::eCAL::pb::Service& Sample::service() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.service)
  return _internal_service();
}
inline ::eCAL::pb::Service* Sample::release_service() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.service)
  
  ::eCAL::pb::Service* temp = service_;
  service_ = nullptr;
  return temp;
}
inline ::eCAL::pb::Service* Sample::_internal_mutable_service() {
  
  if (service_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::Service>(GetArenaNoVirtual());
    service_ = p;
  }
  return service_;
}
inline ::eCAL::pb::Service* Sample::mutable_service() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.service)
  return _internal_mutable_service();
}
inline void Sample::set_allocated_service(::eCAL::pb::Service* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.service)
}

// .eCAL.pb.Client client = 7;
inline bool Sample::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool Sample::has_client() const {
  return _internal_has_client();
}
inline const ::eCAL::pb::Client& Sample::_internal_client() const {
  const ::eCAL::pb::Client* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::Client*>(
      &::eCAL::pb::_Client_default_instance_);
}
inline const ::eCAL::pb::Client& Sample::client() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.client)
  return _internal_client();
}
inline ::eCAL::pb::Client* Sample::release_client() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.client)
  
  ::eCAL::pb::Client* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::eCAL::pb::Client* Sample::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::Client>(GetArenaNoVirtual());
    client_ = p;
  }
  return client_;
}
inline ::eCAL::pb::Client* Sample::mutable_client() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.client)
  return _internal_mutable_client();
}
inline void Sample::set_allocated_client(::eCAL::pb::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.client)
}

// .eCAL.pb.Topic topic = 5;
inline bool Sample::_internal_has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline bool Sample::has_topic() const {
  return _internal_has_topic();
}
inline const ::eCAL::pb::Topic& Sample::_internal_topic() const {
  const ::eCAL::pb::Topic* p = topic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::Topic*>(
      &::eCAL::pb::_Topic_default_instance_);
}
inline const ::eCAL::pb::Topic& Sample::topic() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.topic)
  return _internal_topic();
}
inline ::eCAL::pb::Topic* Sample::release_topic() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.topic)
  
  ::eCAL::pb::Topic* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::eCAL::pb::Topic* Sample::_internal_mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::Topic>(GetArenaNoVirtual());
    topic_ = p;
  }
  return topic_;
}
inline ::eCAL::pb::Topic* Sample::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.topic)
  return _internal_mutable_topic();
}
inline void Sample::set_allocated_topic(::eCAL::pb::Topic* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.topic)
}

// .eCAL.pb.Content content = 6;
inline bool Sample::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool Sample::has_content() const {
  return _internal_has_content();
}
inline void Sample::clear_content() {
  if (GetArenaNoVirtual() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
inline const ::eCAL::pb::Content& Sample::_internal_content() const {
  const ::eCAL::pb::Content* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eCAL::pb::Content*>(
      &::eCAL::pb::_Content_default_instance_);
}
inline const ::eCAL::pb::Content& Sample::content() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.content)
  return _internal_content();
}
inline ::eCAL::pb::Content* Sample::release_content() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.content)
  
  ::eCAL::pb::Content* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::eCAL::pb::Content* Sample::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::eCAL::pb::Content>(GetArenaNoVirtual());
    content_ = p;
  }
  return content_;
}
inline ::eCAL::pb::Content* Sample::mutable_content() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.content)
  return _internal_mutable_content();
}
inline void Sample::set_allocated_content(::eCAL::pb::Content* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete content_;
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.content)
}

// bytes padding = 8;
inline void Sample::clear_padding() {
  padding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sample::padding() const {
  // @@protoc_insertion_point(field_get:eCAL.pb.Sample.padding)
  return _internal_padding();
}
inline void Sample::set_padding(const std::string& value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:eCAL.pb.Sample.padding)
}
inline std::string* Sample::mutable_padding() {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.Sample.padding)
  return _internal_mutable_padding();
}
inline const std::string& Sample::_internal_padding() const {
  return padding_.GetNoArena();
}
inline void Sample::_internal_set_padding(const std::string& value) {
  
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Sample::set_padding(std::string&& value) {
  
  padding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eCAL.pb.Sample.padding)
}
inline void Sample::set_padding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eCAL.pb.Sample.padding)
}
inline void Sample::set_padding(const void* value, size_t size) {
  
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eCAL.pb.Sample.padding)
}
inline std::string* Sample::_internal_mutable_padding() {
  
  return padding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sample::release_padding() {
  // @@protoc_insertion_point(field_release:eCAL.pb.Sample.padding)
  
  return padding_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sample::set_allocated_padding(std::string* padding) {
  if (padding != nullptr) {
    
  } else {
    
  }
  padding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding);
  // @@protoc_insertion_point(field_set_allocated:eCAL.pb.Sample.padding)
}

// -------------------------------------------------------------------

// SampleList

// repeated .eCAL.pb.Sample samples = 1;
inline int SampleList::_internal_samples_size() const {
  return samples_.size();
}
inline int SampleList::samples_size() const {
  return _internal_samples_size();
}
inline void SampleList::clear_samples() {
  samples_.Clear();
}
inline ::eCAL::pb::Sample* SampleList::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:eCAL.pb.SampleList.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Sample >*
SampleList::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:eCAL.pb.SampleList.samples)
  return &samples_;
}
inline const ::eCAL::pb::Sample& SampleList::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::eCAL::pb::Sample& SampleList::samples(int index) const {
  // @@protoc_insertion_point(field_get:eCAL.pb.SampleList.samples)
  return _internal_samples(index);
}
inline ::eCAL::pb::Sample* SampleList::_internal_add_samples() {
  return samples_.Add();
}
inline ::eCAL::pb::Sample* SampleList::add_samples() {
  // @@protoc_insertion_point(field_add:eCAL.pb.SampleList.samples)
  return _internal_add_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eCAL::pb::Sample >&
SampleList::samples() const {
  // @@protoc_insertion_point(field_list:eCAL.pb.SampleList.samples)
  return samples_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace eCAL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eCAL::pb::eCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eCAL::pb::eCmdType>() {
  return ::eCAL::pb::eCmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecal_2fcore_2fpb_2fecal_2eproto
